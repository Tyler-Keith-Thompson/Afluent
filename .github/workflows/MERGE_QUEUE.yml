name: Run Required Checks
run-name: PR Checks for ${{ github.ref_name }}

# Trigger jobs whenever Trunk Merge Queue tests a PR using a `trunk-merge/` branch
on:
  push:
    branches:
      - trunk-merge/**

jobs:
  test:
    runs-on: ubuntu-latest
    container: swift:6.0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved', '*/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      - name: Run TESTS
        run: swift test --use-integrated-swift-driver
  swift-regression-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift-version: ["5.9", "5.10"]
    container: swift:${{ matrix.swift-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Run build
        run: rm Package.resolved && swift build

  apple-platform-regression-tests:
    runs-on: macos-15
    strategy:
      matrix:
        platform: [macOS, iOS, tvOS, visionOS, watchOS, catalyst]
    steps:
      - uses: actions/checkout@v4
      - name: Build and Test for ${{ matrix.platform }}
        run: |
          set -eo pipefail
          
          # Function to get the latest available simulator for a platform
          get_latest_simulator() {
            local platform=$1
            case $platform in
              iOS)
                # Get the latest iPhone simulator
                xcrun simctl list devices iPhone available | grep -E "iPhone [0-9]+" | tail -1 | sed -E 's/.*iPhone ([^(]+) \(([^)]+)\).*/platform=iOS Simulator,name=iPhone \1,id=\2/'
                ;;
              tvOS)
                # Get the latest Apple TV simulator
                xcrun simctl list devices "Apple TV" available | grep "Apple TV" | tail -1 | sed -E 's/.*(Apple TV[^(]+) \(([^)]+)\).*/platform=tvOS Simulator,name=\1,id=\2/'
                ;;
              visionOS)
                # Get the latest Vision Pro simulator
                xcrun simctl list devices "Apple Vision Pro" available | grep "Apple Vision Pro" | tail -1 | sed -E 's/.*(Apple Vision Pro[^(]*) \(([^)]+)\).*/platform=visionOS Simulator,name=\1,id=\2/'
                ;;
              watchOS)
                # Get the latest Apple Watch simulator
                xcrun simctl list devices "Apple Watch" available | grep "Apple Watch" | tail -1 | sed -E 's/.*(Apple Watch[^(]+) \(([^)]+)\).*/platform=watchOS Simulator,name=\1,id=\2/'
                ;;
              macOS)
                echo "platform=macOS,arch=arm64"
                ;;
              catalyst)
                echo "platform=macOS,arch=arm64,variant=Mac Catalyst"
                ;;
            esac
          }
          
          # Get the destination for the current platform
          DESTINATION=$(get_latest_simulator ${{ matrix.platform }})
          
          # Fallback to generic destinations if simulator detection fails
          if [ -z "$DESTINATION" ]; then
            case ${{ matrix.platform }} in
              iOS) DESTINATION="platform=iOS Simulator,name=iPhone 15" ;;
              tvOS) DESTINATION="platform=tvOS Simulator,name=Apple TV 4K" ;;
              visionOS) DESTINATION="platform=visionOS Simulator,name=Apple Vision Pro" ;;
              watchOS) DESTINATION="platform=watchOS Simulator,name=Apple Watch Series 9" ;;
              macOS) DESTINATION="platform=macOS,arch=arm64" ;;
              catalyst) DESTINATION="platform=macOS,arch=arm64,variant=Mac Catalyst" ;;
            esac
          fi
          
          echo "Using destination: $DESTINATION"
          
          xcodebuild \
            -scheme Afluent-Package \
            -destination "$DESTINATION" \
            clean build