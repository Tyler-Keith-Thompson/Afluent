{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"generated":true,"title":"Classes","anchor":"Classes"},{"generated":true,"anchor":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"title":"Protocols"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"anchor":"Structures","title":"Structures"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions","generated":true,"anchor":"Functions"},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations","generated":true,"anchor":"Enumerations"},{"anchor":"Extended-Modules","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules"}],"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"collection","title":"Afluent","roleHeading":"Framework","externalID":"Afluent","symbolKind":"module","modules":[{"name":"Afluent"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"sections":[],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/TimerSequence":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","url":"\/documentation\/afluent\/timersequence","abstract":[],"title":"TimerSequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimerSequence"}],"role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimerSequence"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","role":"symbol","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/Just":{"title":"Just","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Just"}],"url":"\/documentation\/afluent\/just","abstract":[],"type":"topic","navigatorTitle":[{"text":"Just","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","role":"symbol"},"doc://Afluent/documentation/Afluent":{"role":"collection","title":"Afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","url":"\/documentation\/afluent","kind":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"url":"\/documentation\/afluent\/topleveldecoder","title":"TopLevelDecoder","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic","kind":"symbol","title":"RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrybycountstrategy","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}]},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","title":"AsynchronousOperation","type":"topic","url":"\/documentation\/afluent\/asynchronousoperation"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"url":"\/documentation\/afluent\/anycancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","kind":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"title":"AnyCancellable","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"kind":"symbol","url":"\/documentation\/afluent\/anyasynchronousunitofwork","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"title":"AnyAsynchronousUnitOfWork","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"type":"topic","url":"\/documentation\/afluent\/asynchronousunitofwork","kind":"symbol","title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/TaskState":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"title":"TaskState","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskState"}],"url":"\/documentation\/afluent\/taskstate","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")...) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","title":"Race(cancelAllOnWin:_:against:)","type":"topic"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"title":"RetryStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"title":"AsynchronousUnitOfWorkSequence","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworksequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"type":"topic","title":"ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"url":"\/documentation\/afluent\/backoffstrategy","kind":"symbol","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","title":"BackoffStrategy","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/TimeoutError":{"title":"TimeoutError","kind":"symbol","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/timeouterror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}]},"doc://Afluent/documentation/Afluent/Deferred":{"role":"symbol","title":"Deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"title":"AsynchronousUnitOfWorkCache","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","abstract":[],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"title":"AnyAsyncSequence","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasyncsequence","abstract":[],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}]},"doc://Afluent/documentation/Afluent/Foundation":{"abstract":[],"url":"\/documentation\/afluent\/foundation","role":"collection","title":"Foundation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCache":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","abstract":[],"url":"\/documentation\/afluent\/auowcache","title":"AUOWCache","role":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"title":"UnretainedError","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","abstract":[]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"url":"\/documentation\/afluent\/subscriptiondemand","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","kind":"symbol","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[],"title":"SubscriptionDemand","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SubscriptionDemand"}]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"role":"symbol","title":"SerialTaskQueue","navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SerialTaskQueue"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","url":"\/documentation\/afluent\/serialtaskqueue"},"doc://Afluent/documentation/Afluent/_Concurrency":{"abstract":[],"url":"\/documentation\/afluent\/_concurrency","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","kind":"symbol","type":"topic","title":"_Concurrency"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","abstract":[],"url":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"title":"SingleValueChannel","abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel"},"doc://Afluent/documentation/Afluent/Workers":{"title":"Workers","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","kind":"symbol","url":"\/documentation\/afluent\/workers","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Workers"}],"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"role":"symbol","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","title":"DeferredTask"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"url":"\/documentation\/afluent\/queueexecutor","title":"QueueExecutor","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"QueueExecutor"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}]},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ClockDurationUnit","kind":"identifier"}],"title":"ClockDurationUnit","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","abstract":[],"url":"\/documentation\/afluent\/clockdurationunit","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueSubject"}],"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"title":"SingleValueSubject","url":"\/documentation\/afluent\/singlevaluesubject","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}]}}}