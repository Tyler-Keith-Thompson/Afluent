{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry."}],"type":"paragraph"}]}],"metadata":{"externalID":"s:7Afluent13RetryStrategyP","symbolKind":"protocol","modules":[{"name":"Afluent"}],"remoteSource":{"fileName":"RetryStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12"},"roleHeading":"Protocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy"},"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrystrategy"]}],"sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"]},{"anchor":"Type-Methods","generated":true,"title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"]}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","role":"symbol","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"title":"byCount(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"byCount"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"}],"abstract":[{"type":"text","text":"Creates a retry strategy that retries the operation up to a specified number of times."}],"type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"code":"RetryByCountStrategy","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic","kind":"symbol","title":"RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrybycountstrategy","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}]},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"handle","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"type":"topic","title":"handle(error:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","kind":"symbol"},"doc://Afluent/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","abstract":[{"text":"Creates a retry strategy using the provided backoff strategy and a continuous clock.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"backoff","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"kind":"text","text":">) -> "},{"text":"RetryByBackoffStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ExponentialBackoffStrategy","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"kind":"text","text":">>"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","title":"backoff(_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"required":true,"url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beforeRetry"},{"kind":"text","text":": (any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","kind":"symbol","title":"handle(error:beforeRetry:)","type":"topic"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"title":"RetryStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent":{"role":"collection","title":"Afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","url":"\/documentation\/afluent","kind":"symbol"}}}