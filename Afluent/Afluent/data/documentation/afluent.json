{"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"generated":true,"title":"Classes","anchor":"Classes"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"anchor":"Protocols","title":"Protocols","generated":true},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"generated":true,"anchor":"Structures"},{"anchor":"Functions","title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"generated":true},{"generated":true,"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"anchor":"Type-Aliases"},{"anchor":"Enumerations","title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"generated":true},{"anchor":"Extended-Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules","generated":true}],"metadata":{"symbolKind":"module","roleHeading":"Framework","role":"collection","title":"Afluent","modules":[{"name":"Afluent"}],"externalID":"Afluent"},"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"role":"symbol","title":"SerialTaskQueue","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","kind":"symbol","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/serialtaskqueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SerialTaskQueue"}],"navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyCancellable":{"abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"url":"\/documentation\/afluent\/anycancellable","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"type":"topic","title":"AnyCancellable","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyCancellable","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","abstract":[],"url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubscriptionDemand"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","url":"\/documentation\/afluent\/subscriptiondemand","abstract":[],"title":"SubscriptionDemand","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/Foundation":{"kind":"symbol","url":"\/documentation\/afluent\/foundation","abstract":[],"title":"Foundation","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation"},"doc://Afluent/documentation/Afluent/TaskState":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/taskstate","title":"TaskState","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","navigatorTitle":[{"text":"TaskState","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","title":"AsyncSequences","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Deferred":{"role":"symbol","url":"\/documentation\/afluent\/deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"type":"topic","title":"Deferred","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"url":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluesubject","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}],"title":"SingleValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"title":"BackoffStrategy","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"url":"\/documentation\/afluent\/backoffstrategy"},"doc://Afluent/documentation/Afluent/TimerSequence":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"type":"topic","title":"TimerSequence","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","url":"\/documentation\/afluent\/timersequence","abstract":[],"kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/Workers":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","url":"\/documentation\/afluent\/workers","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"role":"symbol","title":"Workers","navigatorTitle":[{"kind":"identifier","text":"Workers"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel","role":"symbol","title":"SingleValueChannel"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"url":"\/documentation\/afluent\/toplevelencoder","abstract":[],"title":"TopLevelEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"},"doc://Afluent/documentation/Afluent/DeferredTask":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","title":"DeferredTask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask"},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"role":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"url":"\/documentation\/afluent\/auowcache","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","kind":"symbol","title":"AUOWCache"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}],"abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"title":"AsynchronousOperation","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/asynchronousoperation","kind":"symbol"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Race"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"text":": (() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")...) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"title":"Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","type":"topic","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"role":"symbol","title":"RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"type":"topic","title":"AnyAsynchronousUnitOfWork","url":"\/documentation\/afluent\/anyasynchronousunitofwork","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","type":"topic","url":"\/documentation\/afluent\/_concurrency","title":"_Concurrency","abstract":[],"role":"collection"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"title":"ExponentialBackoffStrategy","type":"topic"},"doc://Afluent/documentation/Afluent/TimeoutError":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","title":"TimeoutError","url":"\/documentation\/afluent\/timeouterror","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimeoutError"}],"abstract":[{"text":"An error indicating a timeout has occurred.","type":"text"}]},"doc://Afluent/documentation/Afluent/Just":{"title":"Just","url":"\/documentation\/afluent\/just","abstract":[],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Just"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Just"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic","title":"RetryByCountStrategy","abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"abstract":[],"role":"symbol","title":"AsynchronousUnitOfWorkCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache"},"doc://Afluent/documentation/Afluent/UnretainedError":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"abstract":[],"type":"topic","title":"UnretainedError","url":"\/documentation\/afluent\/unretainederror","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}]},"doc://Afluent/documentation/Afluent/QueueExecutor":{"navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"QueueExecutor","kind":"identifier"}],"abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/queueexecutor","role":"symbol","title":"QueueExecutor","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/clockdurationunit","title":"ClockDurationUnit","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"type":"topic","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}],"url":"\/documentation\/afluent\/anyasyncsequence","title":"AnyAsyncSequence","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/topleveldecoder","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","title":"TopLevelDecoder","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"type":"topic","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"}}}