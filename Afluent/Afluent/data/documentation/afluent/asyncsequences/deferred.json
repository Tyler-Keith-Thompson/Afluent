{"kind":"symbol","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Upstream"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sci","kind":"typeIdentifier","text":"AsyncSequence"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By wrapping either of these in a "},{"type":"codeVoice","code":"Deferred"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"text":" ","type":"text"},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"metadata":{"modules":[{"name":"Afluent"}],"remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"roleHeading":"Structure","extendedModule":"Afluent","role":"symbol","title":"AsyncSequences.Deferred","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}]},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"title":"Structures","anchor":"Structures","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"generated":true,"title":"Type Aliases","anchor":"Type-Aliases"},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"]}],"sections":[],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"kind":"relationships","title":"Conforms To"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"title":"AsyncSequences.Deferred.AsyncIterator","abstract":[],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncIterator","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","title":"AsyncSequences","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"kind":"symbol","type":"topic","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAsyncIterator","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Deferred","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","title":"makeAsyncIterator()","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"type":"topic","abstract":[{"text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that will later be called at the time of iteration."}],"title":"init(upstream:)","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"upstream","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"title":"AsyncSequences.Deferred.Element","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"abstract":[],"role":"symbol"},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"abstract":[],"role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","kind":"article","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred","abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","abstract":[],"url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol"},"doc://Afluent/Sci":{"identifier":"doc:\/\/Afluent\/Sci","title":"_Concurrency.AsyncSequence","type":"unresolvable"}}}