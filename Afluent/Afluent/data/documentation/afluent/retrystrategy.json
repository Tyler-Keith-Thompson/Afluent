{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Protocol","symbolKind":"protocol","externalID":"s:7Afluent13RetryStrategyP","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"remoteSource":{"fileName":"RetryStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12"},"title":"RetryStrategy","role":"symbol","modules":[{"name":"Afluent"}]},"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"},{"kind":"text","text":" : "},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"]}]},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs."},{"text":" ","type":"text"},{"type":"text","text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/afluent\/retrystrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"topicSections":[{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"]},{"anchor":"Type-Methods","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"],"title":"Type Methods"}],"relationshipsSections":[{"type":"inheritsFrom","title":"Inherits From","identifiers":["doc:\/\/Afluent\/s8SendableP"],"kind":"relationships"},{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"type":"conformingTypes"}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","title":"backoff(_:)","abstract":[{"text":"Creates a retry strategy using the provided backoff strategy and a continuous clock.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"backoff"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"text":"<","kind":"text"},{"text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","text":"RetryByBackoffStrategy"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier","text":"ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier"},{"kind":"text","text":">>"}],"kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","title":"handle(error:)"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic","title":"RetryByCountStrategy","abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"role":"symbol","title":"RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","title":"handle(error:beforeRetry:)","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"handle","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"error"},{"text":": any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"beforeRetry","kind":"externalParam"},{"text":": (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","type":"topic","required":true,"url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"byCount"},{"text":"(","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"}],"abstract":[{"text":"Creates a retry strategy that retries the operation up to a specified number of times.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","kind":"symbol","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" is "},{"code":"RetryByCountStrategy","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"byCount(_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","abstract":[],"url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"type":"topic","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"}}}