{"sections":[],"metadata":{"symbolKind":"module","modules":[{"name":"Afluent"}],"role":"collection","title":"Afluent","roleHeading":"Framework","externalID":"Afluent"},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes","generated":true,"anchor":"Classes"},{"anchor":"Protocols","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"title":"Protocols"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"title":"Structures","anchor":"Structures","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions","generated":true,"anchor":"Functions"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"title":"Type Aliases","anchor":"Type-Aliases","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations","generated":true,"anchor":"Enumerations"},{"title":"Extended Modules","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"anchor":"Extended-Modules"}],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"references":{"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"kind":"symbol","type":"topic","title":"AnyAsynchronousUnitOfWork","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasynchronousunitofwork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"kind":"symbol","title":"SerialTaskQueue","type":"topic","url":"\/documentation\/afluent\/serialtaskqueue","role":"symbol","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SerialTaskQueue"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}]},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"title":"Race(cancelAllOnWin:_:against:)","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Race"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}]},"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","abstract":[],"title":"UnretainedError","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","type":"topic"},"doc://Afluent/documentation/Afluent/Just":{"navigatorTitle":[{"text":"Just","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"title":"Just","abstract":[],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/afluent\/just"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","role":"symbol","title":"RetryStrategy","type":"topic","url":"\/documentation\/afluent\/retrystrategy"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","role":"symbol","type":"topic","url":"\/documentation\/afluent\/clockdurationunit","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"title":"ClockDurationUnit","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","type":"topic","url":"\/documentation\/afluent\/topleveldecoder","title":"TopLevelDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelDecoder"}],"role":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"type":"topic","title":"RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Deferred":{"type":"topic","title":"Deferred","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/deferred"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"url":"\/documentation\/afluent\/subscriptiondemand","type":"topic","title":"SubscriptionDemand","abstract":[],"role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"title":"RetryByBackoffStrategy","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"type":"topic"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"kind":"symbol","title":"ExponentialBackoffStrategy","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"url":"\/documentation\/afluent\/exponentialbackoffstrategy","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"TimeoutError","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"kind":"symbol","type":"topic","role":"symbol","title":"TimeoutError","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","abstract":[{"text":"An error indicating a timeout has occurred.","type":"text"}]},"doc://Afluent/documentation/Afluent/TaskState":{"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/taskstate","title":"TaskState","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskState"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","title":"AsyncSequences"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol","type":"topic","title":"AsynchronousUnitOfWork","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"role":"symbol"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"title":"Afluent","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"url":"\/documentation\/afluent\/auowcache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"role":"symbol","title":"AUOWCache","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"type":"topic"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"role":"symbol","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}]},"doc://Afluent/documentation/Afluent/Workers":{"navigatorTitle":[{"kind":"identifier","text":"Workers"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","kind":"symbol","role":"symbol","title":"Workers","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"url":"\/documentation\/afluent\/workers","type":"topic"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"QueueExecutor"}],"title":"QueueExecutor","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","url":"\/documentation\/afluent\/queueexecutor","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueSubject"}],"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluesubject","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","kind":"symbol","title":"SingleValueSubject"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"kind":"symbol","title":"AsynchronousUnitOfWorkCache","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache","role":"symbol","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"type":"topic","url":"\/documentation\/afluent\/deferredtask","kind":"symbol","title":"DeferredTask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"title":"AsynchronousUnitOfWorkSequence","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"type":"topic","title":"AnyCancellable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyCancellable","kind":"identifier"}],"url":"\/documentation\/afluent\/anycancellable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","type":"topic","url":"\/documentation\/afluent\/_concurrency","title":"_Concurrency","role":"collection","abstract":[]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","url":"\/documentation\/afluent\/toplevelencoder","role":"symbol","abstract":[],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousOperation"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousoperation","title":"AsynchronousOperation","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}]},"doc://Afluent/documentation/Afluent/Foundation":{"kind":"symbol","url":"\/documentation\/afluent\/foundation","title":"Foundation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","abstract":[],"role":"collection","type":"topic"},"doc://Afluent/documentation/Afluent/TimerSequence":{"url":"\/documentation\/afluent\/timersequence","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimerSequence"}],"title":"TimerSequence","type":"topic","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"url":"\/documentation\/afluent\/backoffstrategy","role":"symbol","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"title":"BackoffStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","type":"topic"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","abstract":[],"title":"AnyAsyncSequence","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}],"url":"\/documentation\/afluent\/anyasyncsequence"}}}