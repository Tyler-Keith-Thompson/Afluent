{"hierarchy":{"paths":[[]]},"sections":[],"metadata":{"symbolKind":"module","role":"collection","modules":[{"name":"Afluent"}],"title":"Afluent","externalID":"Afluent","roleHeading":"Framework"},"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes","anchor":"Classes","generated":true},{"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"generated":true,"anchor":"Protocols"},{"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions","generated":true,"anchor":"Functions"},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations","anchor":"Enumerations"},{"title":"Extended Modules","generated":true,"anchor":"Extended-Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"references":{"doc://Afluent/documentation/Afluent/QueueExecutor":{"kind":"symbol","title":"QueueExecutor","abstract":[],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"url":"\/documentation\/afluent\/queueexecutor","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"QueueExecutor","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor"},"doc://Afluent/documentation/Afluent/UnretainedError":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/unretainederror","role":"symbol","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"abstract":[],"title":"UnretainedError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueSubject"}],"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","role":"symbol","title":"SingleValueSubject","kind":"symbol","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"url":"\/documentation\/afluent\/singlevaluesubject"},"doc://Afluent/documentation/Afluent/Deferred":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"type":"topic","title":"Deferred","url":"\/documentation\/afluent\/deferred"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"abstract":[],"url":"\/documentation\/afluent\/topleveldecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","kind":"symbol","role":"symbol","type":"topic","title":"TopLevelDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelDecoder"}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeferredTask"}],"navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"title":"DeferredTask","url":"\/documentation\/afluent\/deferredtask"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"abstract":[],"role":"symbol","title":"SubscriptionDemand","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","url":"\/documentation\/afluent\/subscriptiondemand"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","type":"topic","title":"RetryStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","role":"symbol","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"title":"AnyAsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","type":"topic","role":"symbol","url":"\/documentation\/afluent\/anyasynchronousunitofwork","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","type":"topic","role":"symbol","abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"title":"AsynchronousOperation","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousoperation","kind":"symbol"},"doc://Afluent/documentation/Afluent/Workers":{"kind":"symbol","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","title":"Workers","type":"topic","url":"\/documentation\/afluent\/workers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Workers","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"type":"topic","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy","role":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy"},"doc://Afluent/documentation/Afluent/TimerSequence":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"type":"topic","title":"TimerSequence","url":"\/documentation\/afluent\/timersequence"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","role":"collection","abstract":[],"title":"_Concurrency","kind":"symbol","url":"\/documentation\/afluent\/_concurrency"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}],"kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/anyasyncsequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"title":"AnyAsyncSequence","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"title":"ExponentialBackoffStrategy","role":"symbol","url":"\/documentation\/afluent\/exponentialbackoffstrategy"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"role":"symbol","url":"\/documentation\/afluent\/serialtaskqueue","type":"topic","title":"SerialTaskQueue","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/anycancellable","kind":"symbol","title":"AnyCancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"type":"topic","title":"TopLevelEncoder","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelEncoder"}],"kind":"symbol","url":"\/documentation\/afluent\/toplevelencoder","abstract":[],"navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"kind":"symbol","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"abstract":[],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","title":"ClockDurationUnit","type":"topic","url":"\/documentation\/afluent\/clockdurationunit","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":")...) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"type":"topic","title":"Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","abstract":[{"text":"An error indicating a timeout has occurred.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeoutError","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}],"title":"TimeoutError"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","role":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/Just":{"kind":"symbol","navigatorTitle":[{"text":"Just","kind":"identifier"}],"abstract":[],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","title":"Just","type":"topic","url":"\/documentation\/afluent\/just","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Just","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","title":"AsynchronousUnitOfWork","type":"topic","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/Foundation":{"abstract":[],"title":"Foundation","url":"\/documentation\/afluent\/foundation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","kind":"symbol","role":"collection"},"doc://Afluent/documentation/Afluent":{"role":"collection","title":"Afluent","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","role":"symbol","url":"\/documentation\/afluent\/auowcache"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"type":"topic","title":"AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"kind":"symbol","role":"symbol","title":"AsynchronousUnitOfWorkSequence","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworksequence","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"title":"SingleValueChannel","role":"symbol","url":"\/documentation\/afluent\/singlevaluechannel"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","type":"topic","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"title":"BackoffStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TaskState":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/taskstate","role":"symbol","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"abstract":[],"title":"TaskState","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"kind":"symbol","role":"symbol","title":"RetryByCountStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"url":"\/documentation\/afluent\/retrybycountstrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"text":" that limits the number of retry attempts.","type":"text"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"}}}