{"hierarchy":{"paths":[[]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"kind":"symbol","variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"generated":true,"anchor":"Classes","title":"Classes"},{"title":"Protocols","anchor":"Protocols","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"title":"Structures","anchor":"Structures","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions","anchor":"Functions","generated":true},{"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"generated":true,"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations","anchor":"Enumerations","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules","generated":true,"anchor":"Extended-Modules"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Afluent","role":"collection","modules":[{"name":"Afluent"}],"roleHeading":"Framework","externalID":"Afluent","symbolKind":"module"},"references":{"doc://Afluent/documentation/Afluent/RetryStrategy":{"title":"RetryStrategy","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/retrybycountstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"role":"symbol","title":"RetryByCountStrategy"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","kind":"symbol","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"type":"topic","title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/Deferred":{"abstract":[],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"url":"\/documentation\/afluent\/deferred","title":"Deferred","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[],"kind":"symbol","role":"symbol","title":"AsynchronousUnitOfWorkCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"type":"topic"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","title":"Afluent","abstract":[],"url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/TimerSequence":{"type":"topic","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"TimerSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/timersequence","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"title":"TimerSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsyncSequence"}],"type":"topic","title":"AnyAsyncSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","url":"\/documentation\/afluent\/anyasyncsequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"url":"\/documentation\/afluent\/toplevelencoder","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelEncoder"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","type":"topic","title":"TopLevelEncoder","kind":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask":{"abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"role":"symbol","url":"\/documentation\/afluent\/deferredtask","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"title":"DeferredTask","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","kind":"symbol"},"doc://Afluent/documentation/Afluent/Foundation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","url":"\/documentation\/afluent\/foundation","kind":"symbol","abstract":[],"role":"collection","type":"topic","title":"Foundation"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"title":"AsynchronousOperation","kind":"symbol","url":"\/documentation\/afluent\/asynchronousoperation","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","role":"symbol","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousOperation"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"type":"topic","url":"\/documentation\/afluent\/exponentialbackoffstrategy","title":"ExponentialBackoffStrategy","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SingleValueChannel","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","title":"SingleValueChannel","abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"url":"\/documentation\/afluent\/singlevaluechannel"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","url":"\/documentation\/afluent\/asyncsequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelDecoder"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"type":"topic","title":"TopLevelDecoder","abstract":[],"url":"\/documentation\/afluent\/topleveldecoder"},"doc://Afluent/documentation/Afluent/AUOWCache":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","type":"topic","abstract":[],"title":"AUOWCache","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"url":"\/documentation\/afluent\/auowcache","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AUOWCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Workers":{"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"navigatorTitle":[{"kind":"identifier","text":"Workers"}],"url":"\/documentation\/afluent\/workers","title":"Workers","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","type":"topic"},"doc://Afluent/documentation/Afluent/UnretainedError":{"title":"UnretainedError","role":"symbol","url":"\/documentation\/afluent\/unretainederror","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnretainedError","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol","url":"\/documentation\/afluent\/backoffstrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"type":"topic","title":"BackoffStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"type":"topic","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","title":"Race(cancelAllOnWin:_:against:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"title":"ClockDurationUnit","kind":"symbol","url":"\/documentation\/afluent\/clockdurationunit","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClockDurationUnit"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","type":"topic","abstract":[],"navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyCancellable":{"kind":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"title":"AnyCancellable","abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","role":"symbol","type":"topic","url":"\/documentation\/afluent\/anycancellable"},"doc://Afluent/documentation/Afluent/_Concurrency":{"title":"_Concurrency","type":"topic","role":"collection","kind":"symbol","abstract":[],"url":"\/documentation\/afluent\/_concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueueExecutor"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"type":"topic","title":"QueueExecutor","abstract":[],"url":"\/documentation\/afluent\/queueexecutor"},"doc://Afluent/documentation/Afluent/TaskState":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}],"navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"url":"\/documentation\/afluent\/taskstate","kind":"symbol","role":"symbol","title":"TaskState"},"doc://Afluent/documentation/Afluent/TimeoutError":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimeoutError"}],"navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","abstract":[{"text":"An error indicating a timeout has occurred.","type":"text"}],"url":"\/documentation\/afluent\/timeouterror","title":"TimeoutError"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"url":"\/documentation\/afluent\/subscriptiondemand","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"SubscriptionDemand","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubscriptionDemand"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"title":"AsynchronousUnitOfWorkSequence","url":"\/documentation\/afluent\/asynchronousunitofworksequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Just":{"abstract":[],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Just"}],"navigatorTitle":[{"text":"Just","kind":"identifier"}],"url":"\/documentation\/afluent\/just","title":"Just","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","type":"topic"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"title":"SingleValueSubject","url":"\/documentation\/afluent\/singlevaluesubject","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SingleValueSubject","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","type":"topic","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"kind":"symbol","url":"\/documentation\/afluent\/serialtaskqueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"title":"SerialTaskQueue","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"title":"AnyAsynchronousUnitOfWork","kind":"symbol"}}}