{"kind":"symbol","topicSections":[{"title":"Classes","generated":true,"anchor":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"title":"Protocols","generated":true,"anchor":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","generated":true,"anchor":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"]},{"title":"Extended Modules","generated":true,"anchor":"Extended-Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"modules":[{"name":"Afluent"}],"externalID":"Afluent","symbolKind":"module","title":"Afluent","roleHeading":"Framework","role":"collection"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"hierarchy":{"paths":[[]]},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"kind":"symbol","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncBroadcastSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","url":"\/documentation\/afluent\/asyncbroadcastsequence","title":"AsyncBroadcastSequence","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncBroadcastSequence"}]},"doc://Afluent/documentation/Afluent/AnySendableReference":{"title":"AnySendableReference","navigatorTitle":[{"kind":"identifier","text":"AnySendableReference"}],"url":"\/documentation\/afluent\/anysendablereference","kind":"symbol","type":"topic","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySendableReference"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"type":"topic","title":"BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/share()":{"url":"\/documentation\/afluent\/asynchronousunitofwork\/share()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"share","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"text":"> & ","kind":"text"},{"text":"Actor","kind":"typeIdentifier","preciseIdentifier":"s:ScA"}],"type":"topic","title":"share()","role":"symbol","abstract":[{"text":"Shares the upstream ","type":"text"},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" among multiple downstream subscribers.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()"},"doc://Afluent/documentation/Afluent/Just":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","navigatorTitle":[{"text":"Just","kind":"identifier"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"title":"Just","url":"\/documentation\/afluent\/just","abstract":[],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"type":"topic","abstract":[{"text":"A cache for asynchronous unit of work types.","type":"text"},{"text":" ","type":"text"},{"text":"A stored unit of work should be both ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and a reference type (e.g. a unit of work shared via the ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","isActive":true,"type":"reference"},{"text":" operator).","type":"text"}]},"doc://Afluent/documentation/Afluent/Workers":{"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"title":"Workers","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Workers","kind":"identifier"}],"url":"\/documentation\/afluent\/workers","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","url":"\/documentation\/afluent\/asynchronousunitofwork","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/retrystrategy","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"title":"RetryStrategy","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"doc://Afluent/documentation/Afluent/DeferredTask":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"}],"abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"type":"topic","title":"DeferredTask"},"doc://Afluent/documentation/Afluent/UnretainedError":{"title":"UnretainedError","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"type":"topic","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}],"url":"\/documentation\/afluent\/unretainederror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"kind":"symbol","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"kind":"symbol","abstract":[{"type":"text","text":"A subject that broadcasts its current value and all subsequent values to multiple consumers."},{"type":"text","text":" "},{"type":"text","text":"It can also handle completion events, including normal termination and failure with an error."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s CurrentValueSubject."}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","title":"CurrentValueSubject","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CurrentValueSubject","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"CurrentValueSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/currentvaluesubject"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueChannel"}],"url":"\/documentation\/afluent\/singlevaluechannel","kind":"symbol","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"title":"SingleValueChannel","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/Deferred":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","title":"Deferred","url":"\/documentation\/afluent\/deferred","abstract":[],"type":"topic"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"title":"ClockDurationUnit","url":"\/documentation\/afluent\/clockdurationunit","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"title":"SerialTaskQueue","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SerialTaskQueue"}],"navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"type":"topic","url":"\/documentation\/afluent\/serialtaskqueue","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"title":"ExponentialBackoffStrategy","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/exponentialbackoffstrategy","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"kind":"symbol","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"title":"_Concurrency","type":"topic","url":"\/documentation\/afluent\/_concurrency","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/TimerSequence":{"type":"topic","abstract":[],"role":"symbol","url":"\/documentation\/afluent\/timersequence","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimerSequence"}],"title":"TimerSequence","navigatorTitle":[{"kind":"identifier","text":"TimerSequence"}]},"doc://Afluent/documentation/Afluent/QueueExecutor":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","navigatorTitle":[{"text":"QueueExecutor","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"QueueExecutor","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/queueexecutor","abstract":[],"title":"QueueExecutor"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","url":"\/documentation\/afluent\/anycancellable","title":"AnyCancellable","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","type":"topic","title":"AnyAsynchronousUnitOfWork","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"role":"symbol","abstract":[{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","isActive":true,"type":"reference"},{"text":" represents the available caching strategies for the ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","isActive":true,"type":"reference"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/auowcachestrategy","title":"AUOWCacheStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"title":"TimeoutError","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}],"abstract":[],"url":"\/documentation\/afluent\/anyasyncsequence","type":"topic","kind":"symbol","title":"AnyAsyncSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"type":"topic","title":"TopLevelDecoder","kind":"symbol","url":"\/documentation\/afluent\/topleveldecoder"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"type":"topic","url":"\/documentation\/afluent\/asynchronousoperation","title":"AsynchronousOperation","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","abstract":[],"url":"\/documentation\/afluent\/toplevelencoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelEncoder"}],"type":"topic","title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"title":"Afluent","type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/TaskState":{"type":"topic","title":"TaskState","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","url":"\/documentation\/afluent\/taskstate","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskState","kind":"identifier"}],"navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"abstract":[]},"doc://Afluent/documentation/Afluent/AUOWCache":{"kind":"symbol","type":"topic","abstract":[],"title":"AUOWCache","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"url":"\/documentation\/afluent\/auowcache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","role":"symbol","url":"\/documentation\/afluent\/subscriptiondemand","kind":"symbol","title":"SubscriptionDemand","type":"topic"},"doc://Afluent/documentation/Afluent/Foundation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","title":"Foundation","url":"\/documentation\/afluent\/foundation","kind":"symbol","role":"collection","type":"topic","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequenceCache":{"url":"\/documentation\/afluent\/asyncsequencecache","type":"topic","abstract":[],"role":"symbol","kind":"symbol","title":"AsyncSequenceCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequenceCache","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequenceCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"Race"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cancelAllOnWin"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")...) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","title":"Race(cancelAllOnWin:_:against:)","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByCountStrategy"}],"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"RetryStrategy","type":"codeVoice"},{"text":" that limits the number of retry attempts.","type":"text"}],"role":"symbol","title":"RetryByCountStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"url":"\/documentation\/afluent\/retrybycountstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"title":"SingleValueSubject","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"url":"\/documentation\/afluent\/singlevaluesubject","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueSubject"}],"role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"abstract":[{"type":"text","text":"A subject that broadcasts values to multiple consumers without storing a current value."},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"code":"CurrentValueSubject","type":"codeVoice"},{"type":"text","text":", "},{"code":"PassthroughSubject","type":"codeVoice"},{"type":"text","text":" does not retain the most recent value."},{"type":"text","text":" "},{"type":"text","text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s PassthroughSubject.","type":"text"}],"url":"\/documentation\/afluent\/passthroughsubject","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PassthroughSubject"}],"title":"PassthroughSubject","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PassthroughSubject"}]}}}