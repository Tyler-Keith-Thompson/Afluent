{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Afluent","role":"collection","symbolKind":"module","modules":[{"name":"Afluent"}],"roleHeading":"Framework","externalID":"Afluent"},"kind":"symbol","topicSections":[{"generated":true,"title":"Classes","anchor":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"anchor":"Protocols","generated":true,"title":"Protocols"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"anchor":"Structures","title":"Structures"},{"anchor":"Functions","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions"},{"title":"Type Aliases","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"anchor":"Type-Aliases"},{"anchor":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"generated":true,"title":"Enumerations"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules","anchor":"Extended-Modules"}],"sections":[],"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"references":{"doc://Afluent/documentation/Afluent/Foundation":{"abstract":[],"title":"Foundation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/afluent\/foundation"},"doc://Afluent/documentation/Afluent/_Concurrency":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","url":"\/documentation\/afluent\/_concurrency","abstract":[],"role":"collection","type":"topic","kind":"symbol","title":"_Concurrency"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","title":"BackoffStrategy","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"type":"topic","url":"\/documentation\/afluent\/backoffstrategy"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}],"abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"title":"TimeoutError","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","role":"symbol"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"url":"\/documentation\/afluent\/serialtaskqueue","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","title":"SerialTaskQueue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"text":"A ","type":"text"},{"code":"RetryStrategy","type":"codeVoice"},{"text":" that limits the number of retry attempts.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/retrybycountstrategy","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}],"kind":"symbol","title":"RetryByCountStrategy","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}]},"doc://Afluent/documentation/Afluent/UnretainedError":{"abstract":[],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnretainedError"}],"kind":"symbol","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/unretainederror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","title":"UnretainedError","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","kind":"symbol","title":"AsynchronousOperation","url":"\/documentation\/afluent\/asynchronousoperation","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","type":"topic","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/toplevelencoder","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/DeferredTask":{"kind":"symbol","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"title":"DeferredTask","url":"\/documentation\/afluent\/deferredtask","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"DeferredTask","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"kind":"symbol","title":"AnyAsyncSequence","type":"topic","abstract":[],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","url":"\/documentation\/afluent\/anyasyncsequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","role":"symbol","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/exponentialbackoffstrategy","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"title":"ExponentialBackoffStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ExponentialBackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TaskState":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","kind":"symbol","role":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"url":"\/documentation\/afluent\/taskstate","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}],"title":"TaskState"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"url":"\/documentation\/afluent\/clockdurationunit","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","title":"ClockDurationUnit","abstract":[],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"kind":"symbol","abstract":[],"url":"\/documentation\/afluent","type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/Deferred":{"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"url":"\/documentation\/afluent\/deferred","abstract":[],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"title":"Deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"kind":"symbol","title":"SingleValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","type":"topic","url":"\/documentation\/afluent\/singlevaluesubject","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"url":"\/documentation\/afluent\/subscriptiondemand","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","kind":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SubscriptionDemand","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}],"type":"topic","title":"SubscriptionDemand"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"kind":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"type":"topic","abstract":[],"title":"AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","title":"RetryStrategy","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"url":"\/documentation\/afluent\/asynchronousunitofwork","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/Just":{"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"text":"Just","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","title":"Just","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/just"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","kind":"symbol","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"type":"topic","title":"AnyAsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/TimerSequence":{"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","title":"TimerSequence","url":"\/documentation\/afluent\/timersequence","navigatorTitle":[{"kind":"identifier","text":"TimerSequence"}],"abstract":[]},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"kind":"symbol","title":"Race(cancelAllOnWin:_:against:)","type":"topic","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"against","kind":"externalParam"},{"kind":"text","text":": (() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")...) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent/AnyCancellable":{"abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","url":"\/documentation\/afluent\/anycancellable","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"title":"AnyCancellable"},"doc://Afluent/documentation/Afluent/Workers":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"url":"\/documentation\/afluent\/workers","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"title":"Workers"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","kind":"symbol","title":"SingleValueChannel","abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"url":"\/documentation\/afluent\/queueexecutor","navigatorTitle":[{"text":"QueueExecutor","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"QueueExecutor","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","abstract":[],"role":"symbol","type":"topic","kind":"symbol","title":"QueueExecutor"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}],"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","title":"TopLevelDecoder","url":"\/documentation\/afluent\/topleveldecoder"},"doc://Afluent/documentation/Afluent/AUOWCache":{"url":"\/documentation\/afluent\/auowcache","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"type":"topic","title":"AUOWCache"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"url":"\/documentation\/afluent\/asynchronousunitofworksequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","role":"symbol","title":"AsynchronousUnitOfWorkSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"kind":"symbol"}}}