{"sections":[],"topicSections":[{"title":"Classes","generated":true,"anchor":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"title":"Protocols","generated":true,"anchor":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","generated":true,"anchor":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"]},{"title":"Extended Modules","generated":true,"anchor":"Extended-Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Afluent","symbolKind":"module","modules":[{"name":"Afluent"}],"roleHeading":"Framework","role":"collection","externalID":"Afluent"},"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/SingleValueChannel":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","title":"SingleValueChannel","kind":"symbol","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error."}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/afluent\/anycancellable","title":"AnyCancellable","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyCancellable"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable"},"doc://Afluent/documentation/Afluent/AnySendableReference":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySendableReference"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","kind":"symbol","url":"\/documentation\/afluent\/anysendablereference","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnySendableReference"}],"title":"AnySendableReference","abstract":[]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","role":"symbol","kind":"symbol","title":"TopLevelDecoder","navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/topleveldecoder"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"kind":"symbol","title":"AnyAsyncSequence","url":"\/documentation\/afluent\/anyasyncsequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","abstract":[{"type":"text","text":"A type-erased async sequence."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","url":"\/documentation\/afluent\/_concurrency","role":"collection","kind":"symbol","title":"_Concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[{"text":"A thread-safe cache for storing and sharing asynchronous units of work.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"kind":"symbol","title":"AsynchronousUnitOfWorkCache","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"type":"topic","url":"\/documentation\/afluent\/asynchronousoperation","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"title":"AsynchronousOperation","kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousOperation"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"url":"\/documentation\/afluent\/serialtaskqueue","navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"type":"topic","title":"SerialTaskQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"type":"topic","abstract":[{"text":"A subject that broadcasts values to multiple consumers without storing a current value.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"code":"CurrentValueSubject","type":"codeVoice"},{"text":", ","type":"text"},{"code":"PassthroughSubject","type":"codeVoice"},{"text":" does not retain the most recent value.","type":"text"},{"text":" ","type":"text"},{"text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s PassthroughSubject.","type":"text"}],"kind":"symbol","title":"PassthroughSubject","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PassthroughSubject"}],"role":"symbol","url":"\/documentation\/afluent\/passthroughsubject","navigatorTitle":[{"kind":"identifier","text":"PassthroughSubject"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","type":"topic"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","url":"\/documentation\/afluent\/backoffstrategy","abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies for retry mechanisms."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol","title":"BackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/QueueExecutor":{"type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/queueexecutor","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","title":"QueueExecutor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"QueueExecutor"}]},"doc://Afluent/documentation/Afluent/Just":{"title":"Just","abstract":[],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Just"}],"navigatorTitle":[{"kind":"identifier","text":"Just"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","url":"\/documentation\/afluent\/just","kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCache":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache"},"doc://Afluent/documentation/Afluent/Foundation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","url":"\/documentation\/afluent\/foundation","kind":"symbol","type":"topic","title":"Foundation","abstract":[],"role":"collection"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"kind":"symbol","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","title":"Race(cancelAllOnWin:_:against:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","type":"topic"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"url":"\/documentation\/afluent\/subscriptiondemand","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","type":"topic","abstract":[{"text":"Specifies the number of concurrent inner subscriptions for operators like ","type":"text"},{"code":"AsyncSequence\/flatMap(maxSubscriptions:_:)","type":"codeVoice"},{"text":".","type":"text"}],"title":"SubscriptionDemand","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"type":"topic","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequenceCache":{"abstract":[{"text":"A thread-safe cache for sharing async sequences by integer key.","type":"text"},{"text":" ","type":"text"},{"text":"This cache is commonly used with the ","type":"text"},{"code":"shareFromCache","type":"codeVoice"},{"text":" operator to reuse sequences.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceCache"}],"title":"AsyncSequenceCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceCache"}],"url":"\/documentation\/afluent\/asyncsequencecache","kind":"symbol","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/TimeoutError":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"abstract":[{"text":"An error indicating a timeout has occurred during asynchronous work.","type":"text"}],"title":"TimeoutError","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/timeouterror"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"kind":"symbol","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","type":"topic","url":"\/documentation\/afluent\/toplevelencoder","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/UnretainedError":{"type":"topic","title":"UnretainedError","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"kind":"symbol","url":"\/documentation\/afluent\/unretainederror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"url":"\/documentation\/afluent\/deferredtask","role":"symbol","abstract":[{"text":"A deferred unit of asynchronous work that produces a result of type ","type":"text"},{"type":"codeVoice","code":"Success"},{"text":".","type":"text"}],"title":"DeferredTask","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/Deferred":{"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"url":"\/documentation\/afluent\/deferred","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"title":"Deferred","type":"topic"},"doc://Afluent/documentation/Afluent/TaskState":{"kind":"symbol","url":"\/documentation\/afluent\/taskstate","title":"TaskState","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"title":"RetryStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","url":"\/documentation\/afluent\/retrystrategy"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","url":"\/documentation\/afluent\/anyasynchronousunitofwork","title":"AnyAsynchronousUnitOfWork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"title":"SingleValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A subject for bridging callback-based APIs to async\/await, emitting a single value or error."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueSubject"}],"url":"\/documentation\/afluent\/singlevaluesubject"},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"navigatorTitle":[{"kind":"identifier","text":"CurrentValueSubject"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/afluent\/currentvaluesubject","abstract":[{"type":"text","text":"A subject that broadcasts its current value and all subsequent values to multiple consumers."},{"type":"text","text":" "},{"type":"text","text":"It can also handle completion events, including normal termination and failure with an error."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s CurrentValueSubject."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CurrentValueSubject"}],"title":"CurrentValueSubject"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"abstract":[{"text":"A closure that converts an integer value to a duration for a given clock.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"url":"\/documentation\/afluent\/clockdurationunit","title":"ClockDurationUnit","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TimerSequence":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","url":"\/documentation\/afluent\/timersequence","abstract":[],"title":"TimerSequence","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"type":"topic","url":"\/documentation\/afluent\/exponentialbackoffstrategy","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"role":"symbol","title":"ExponentialBackoffStrategy","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"url":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}]},"doc://Afluent/documentation/Afluent/Workers":{"type":"topic","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","title":"Workers","navigatorTitle":[{"kind":"identifier","text":"Workers"}],"url":"\/documentation\/afluent\/workers"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"title":"AUOWCacheStrategy"}}}