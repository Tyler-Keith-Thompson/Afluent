{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"kind":"symbol","hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"generated":true,"title":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"anchor":"Classes"},{"generated":true,"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"generated":true,"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"anchor":"Structures"},{"generated":true,"anchor":"Functions","title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"generated":true,"title":"Extended Modules","anchor":"Extended-Modules"}],"sections":[],"metadata":{"modules":[{"name":"Afluent"}],"externalID":"Afluent","symbolKind":"module","roleHeading":"Framework","title":"Afluent","role":"collection"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"references":{"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","title":"ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/UnretainedError":{"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}],"title":"UnretainedError","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/unretainederror","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","kind":"symbol","title":"AsynchronousUnitOfWork","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/DeferredTask":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeferredTask"}],"url":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"role":"symbol","title":"AsynchronousUnitOfWorkSequence","kind":"symbol","abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","url":"\/documentation\/afluent\/asynchronousunitofworksequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"role":"symbol","title":"AsynchronousUnitOfWorkCache","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"url":"\/documentation\/afluent\/anycancellable","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","title":"AnyCancellable"},"doc://Afluent/documentation/Afluent/Workers":{"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"type":"topic","title":"Workers","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/workers"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TopLevelDecoder","kind":"identifier"}],"url":"\/documentation\/afluent\/topleveldecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"title":"TopLevelDecoder","abstract":[],"type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"type":"topic","kind":"symbol","title":"Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cancelAllOnWin"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","title":"TopLevelEncoder","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"url":"\/documentation\/afluent\/toplevelencoder","type":"topic","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/TaskState":{"abstract":[],"type":"topic","title":"TaskState","navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TaskState","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/taskstate"},"doc://Afluent/documentation/Afluent/TimeoutError":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeoutError","kind":"identifier"}],"title":"TimeoutError","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"url":"\/documentation\/afluent\/timeouterror","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","role":"symbol"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","title":"SubscriptionDemand","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"url":"\/documentation\/afluent\/subscriptiondemand","type":"topic","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AsynchronousOperation","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/asynchronousoperation","type":"topic","title":"AsynchronousOperation"},"doc://Afluent/documentation/Afluent/AUOWCache":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"url":"\/documentation\/afluent\/auowcache","title":"AUOWCache","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"type":"topic","title":"AsyncSequences","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"abstract":[],"type":"topic","title":"ClockDurationUnit","navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClockDurationUnit"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/clockdurationunit"},"doc://Afluent/documentation/Afluent/TimerSequence":{"abstract":[],"type":"topic","title":"TimerSequence","navigatorTitle":[{"kind":"identifier","text":"TimerSequence"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimerSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/timersequence"},"doc://Afluent/documentation/Afluent/Just":{"type":"topic","kind":"symbol","title":"Just","url":"\/documentation\/afluent\/just","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Just"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Just","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"title":"SerialTaskQueue","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SerialTaskQueue"}],"url":"\/documentation\/afluent\/serialtaskqueue"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"title":"SingleValueChannel","kind":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/backoffstrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"title":"BackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent":{"abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent","title":"Afluent","url":"\/documentation\/afluent","type":"topic","role":"collection"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","kind":"symbol","title":"AnyAsynchronousUnitOfWork","role":"symbol","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasynchronousunitofwork","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"type":"topic"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"abstract":[],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"QueueExecutor","kind":"identifier"}],"navigatorTitle":[{"text":"QueueExecutor","kind":"identifier"}],"url":"\/documentation\/afluent\/queueexecutor","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","kind":"symbol","type":"topic","title":"QueueExecutor"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"type":"topic","title":"AnyAsyncSequence","navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsyncSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/anyasyncsequence"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"kind":"symbol","title":"SingleValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","type":"topic","url":"\/documentation\/afluent\/singlevaluesubject","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Foundation":{"type":"topic","kind":"symbol","title":"Foundation","url":"\/documentation\/afluent\/foundation","abstract":[],"role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","title":"RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/Deferred":{"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"title":"Deferred","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"url":"\/documentation\/afluent\/deferred","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrystrategy","title":"RetryStrategy","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"kind":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","title":"RetryByCountStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"title":"_Concurrency","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/_concurrency","abstract":[]}}}