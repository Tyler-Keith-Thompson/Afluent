{"hierarchy":{"paths":[[]]},"topicSections":[{"generated":true,"anchor":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes"},{"generated":true,"title":"Protocols","anchor":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"generated":true,"anchor":"Structures"},{"generated":true,"title":"Functions","anchor":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"anchor":"Type-Aliases","generated":true,"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"anchor":"Enumerations","title":"Enumerations","generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules","generated":true,"anchor":"Extended-Modules"}],"sections":[],"metadata":{"externalID":"Afluent","role":"collection","title":"Afluent","symbolKind":"module","roleHeading":"Framework","modules":[{"name":"Afluent"}]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"abstract":[{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","isActive":true,"type":"reference"},{"text":" represents the available caching strategies for the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","isActive":true},{"text":".","type":"text"}],"url":"\/documentation\/afluent\/auowcachestrategy","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCacheStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","title":"AUOWCacheStrategy","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"title":"BackoffStrategy","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}],"url":"\/documentation\/afluent\/asynchronousoperation","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"title":"AsynchronousOperation","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousOperation"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"title":"RetryStrategy","kind":"symbol","url":"\/documentation\/afluent\/retrystrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"title":"Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"cancelAllOnWin","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"abstract":[{"text":"A cache for asynchronous unit of work types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A stored unit of work should be both "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and a reference type (e.g. a unit of work shared via the "},{"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","isActive":true},{"text":" operator).","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","title":"AsynchronousUnitOfWorkCache","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/TaskState":{"navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}],"abstract":[],"title":"TaskState","type":"topic","url":"\/documentation\/afluent\/taskstate","role":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask":{"type":"topic","url":"\/documentation\/afluent\/deferredtask","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"role":"symbol","title":"DeferredTask","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"title":"AnyAsynchronousUnitOfWork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","title":"_Concurrency","kind":"symbol","role":"collection","url":"\/documentation\/afluent\/_concurrency"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TimeoutError","kind":"identifier"}],"abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"title":"TimeoutError","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError"},"doc://Afluent/documentation/Afluent/AnySendableReference":{"type":"topic","url":"\/documentation\/afluent\/anysendablereference","navigatorTitle":[{"text":"AnySendableReference","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnySendableReference","kind":"identifier"}],"title":"AnySendableReference","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"url":"\/documentation\/afluent\/toplevelencoder","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","title":"TopLevelEncoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/Foundation":{"role":"collection","type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","url":"\/documentation\/afluent\/foundation","title":"Foundation"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"role":"symbol","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"url":"\/documentation\/afluent\/exponentialbackoffstrategy","type":"topic","title":"ExponentialBackoffStrategy"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","abstract":[],"url":"\/documentation\/afluent","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","title":"Afluent"},"doc://Afluent/documentation/Afluent/Just":{"title":"Just","abstract":[],"url":"\/documentation\/afluent\/just","kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Just"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/share()":{"url":"\/documentation\/afluent\/asynchronousunitofwork\/share()","abstract":[{"text":"Shares the upstream ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"text":" among multiple downstream subscribers.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","title":"share()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"share","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":"> & "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScA","text":"Actor"}],"role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"url":"\/documentation\/afluent\/singlevaluechannel","kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"title":"SingleValueChannel","abstract":[{"type":"text","text":"A channel that emits a single value or an error."}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","role":"symbol","type":"topic","title":"AnyAsyncSequence","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AnyAsyncSequence","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/anyasyncsequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"url":"\/documentation\/afluent\/retrybybackoffstrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"kind":"symbol","role":"symbol","title":"RetryByBackoffStrategy","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"title":"SubscriptionDemand","role":"symbol","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/subscriptiondemand","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubscriptionDemand"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"url":"\/documentation\/afluent\/asyncsequences","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"type":"topic","url":"\/documentation\/afluent\/clockdurationunit","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClockDurationUnit"}],"title":"ClockDurationUnit","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","role":"symbol"},"doc://Afluent/documentation/Afluent/TimerSequence":{"navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"title":"TimerSequence","url":"\/documentation\/afluent\/timersequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","type":"topic","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"title":"AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","kind":"symbol","title":"SingleValueSubject","role":"symbol","url":"\/documentation\/afluent\/singlevaluesubject","type":"topic","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueSubject"}]},"doc://Afluent/documentation/Afluent/AnyCancellable":{"url":"\/documentation\/afluent\/anycancellable","kind":"symbol","title":"AnyCancellable","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyCancellable"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}]},"doc://Afluent/documentation/Afluent/Deferred":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"type":"topic","title":"Deferred","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","url":"\/documentation\/afluent\/deferred","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}]},"doc://Afluent/documentation/Afluent/UnretainedError":{"role":"symbol","type":"topic","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"url":"\/documentation\/afluent\/unretainederror","title":"UnretainedError"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueueExecutor"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","title":"QueueExecutor","abstract":[],"url":"\/documentation\/afluent\/queueexecutor"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"kind":"symbol","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"title":"SerialTaskQueue","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"url":"\/documentation\/afluent\/serialtaskqueue","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue"},"doc://Afluent/documentation/Afluent/Workers":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"title":"Workers","url":"\/documentation\/afluent\/workers","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"navigatorTitle":[{"kind":"identifier","text":"Workers"}]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"title":"TopLevelDecoder","role":"symbol","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/topleveldecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelDecoder"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AUOWCache":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"url":"\/documentation\/afluent\/auowcache","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"type":"topic","abstract":[],"title":"AUOWCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"}}}