{"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Afluent","roleHeading":"Framework","role":"collection","symbolKind":"module","modules":[{"name":"Afluent"}],"externalID":"Afluent"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"topicSections":[{"title":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"anchor":"Classes","generated":true},{"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"anchor":"Protocols","generated":true},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"anchor":"Structures","generated":true},{"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"anchor":"Functions","generated":true},{"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"anchor":"Type-Aliases","generated":true},{"title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"anchor":"Enumerations","generated":true},{"title":"Extended Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"anchor":"Extended-Modules","generated":true}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByCountStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"title":"RetryByCountStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"url":"\/documentation\/afluent\/serialtaskqueue","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"type":"topic","title":"SerialTaskQueue","role":"symbol","navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"url":"\/documentation\/afluent\/toplevelencoder","type":"topic","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelEncoder"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/auowcache","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},"doc://Afluent/documentation/Afluent/Deferred":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","url":"\/documentation\/afluent\/deferred","kind":"symbol","abstract":[],"type":"topic","title":"Deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"title":"AsynchronousOperation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"url":"\/documentation\/afluent\/asynchronousoperation","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","abstract":[],"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"QueueExecutor","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"QueueExecutor","kind":"identifier"}],"url":"\/documentation\/afluent\/queueexecutor","title":"QueueExecutor"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"role":"symbol","abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"url":"\/documentation\/afluent\/exponentialbackoffstrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"title":"ExponentialBackoffStrategy"},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A subject that broadcasts values to multiple consumers without storing a current value."},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"code":"CurrentValueSubject","type":"codeVoice"},{"type":"text","text":", "},{"code":"PassthroughSubject","type":"codeVoice"},{"type":"text","text":" does not retain the most recent value."},{"type":"text","text":" "},{"type":"text","text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s PassthroughSubject."}],"role":"symbol","navigatorTitle":[{"text":"PassthroughSubject","kind":"identifier"}],"title":"PassthroughSubject","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PassthroughSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/passthroughsubject"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/afluent\/_concurrency","title":"_Concurrency","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"title":"CurrentValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CurrentValueSubject"}],"role":"symbol","abstract":[{"type":"text","text":"A subject that broadcasts its current value and all subsequent values to multiple consumers."},{"type":"text","text":" "},{"type":"text","text":"It can also handle completion events, including normal termination and failure with an error."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combine’s CurrentValueSubject."}],"kind":"symbol","url":"\/documentation\/afluent\/currentvaluesubject","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CurrentValueSubject"}]},"doc://Afluent/documentation/Afluent/AnySendableReference":{"title":"AnySendableReference","abstract":[],"type":"topic","url":"\/documentation\/afluent\/anysendablereference","navigatorTitle":[{"kind":"identifier","text":"AnySendableReference"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnySendableReference","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySendableReference"}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"title":"AnyAsyncSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasyncsequence"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"title":"AsyncSequences","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","kind":"symbol","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","title":"TimeoutError","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/anyasynchronousunitofwork","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"title":"AnyAsynchronousUnitOfWork","role":"symbol","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"title":"AsynchronousUnitOfWorkCache","abstract":[{"text":"A cache for asynchronous unit of work types.","type":"text"},{"text":" ","type":"text"},{"text":"A stored unit of work should be both ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and a reference type (e.g. a unit of work shared via the ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","isActive":true,"type":"reference"},{"text":" operator).","type":"text"}],"role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"Race"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cancelAllOnWin"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")...) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","title":"Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","navigatorTitle":[{"kind":"identifier","text":"AUOWCacheStrategy"}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/auowcachestrategy","title":"AUOWCacheStrategy","abstract":[{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","type":"reference","isActive":true},{"type":"text","text":" represents the available caching strategies for the "},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","type":"reference","isActive":true},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCacheStrategy"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"type":"topic","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"kind":"symbol","url":"\/documentation\/afluent\/retrystrategy","role":"symbol","title":"RetryStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueChannel"}],"title":"SingleValueChannel","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/singlevaluesubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"title":"SingleValueSubject"},"doc://Afluent/documentation/Afluent/TimerSequence":{"url":"\/documentation\/afluent\/timersequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","kind":"symbol","abstract":[],"type":"topic","role":"symbol","title":"TimerSequence","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","title":"Afluent","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"url":"\/documentation\/afluent\/asyncbroadcastsequence","type":"topic","title":"AsyncBroadcastSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncBroadcastSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","kind":"symbol","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncBroadcastSequence"}]},"doc://Afluent/documentation/Afluent/Foundation":{"role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","kind":"symbol","type":"topic","abstract":[],"title":"Foundation","url":"\/documentation\/afluent\/foundation"},"doc://Afluent/documentation/Afluent/AsyncSequenceCache":{"title":"AsyncSequenceCache","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsyncSequenceCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","abstract":[],"url":"\/documentation\/afluent\/asyncsequencecache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequenceCache","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/DeferredTask":{"title":"DeferredTask","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"}],"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"url":"\/documentation\/afluent\/deferredtask","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"url":"\/documentation\/afluent\/subscriptiondemand","title":"SubscriptionDemand","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand"},"doc://Afluent/documentation/Afluent/UnretainedError":{"abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/unretainederror","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"title":"UnretainedError"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","title":"RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/share()":{"abstract":[{"text":"Shares the upstream ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"text":" among multiple downstream subscribers.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork\/share()","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"() -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":"> & "},{"kind":"typeIdentifier","text":"Actor","preciseIdentifier":"s:ScA"}],"title":"share()","kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"role":"symbol","url":"\/documentation\/afluent\/anycancellable","type":"topic","abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","title":"AnyCancellable","kind":"symbol"},"doc://Afluent/documentation/Afluent/Just":{"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","navigatorTitle":[{"text":"Just","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[],"title":"Just","url":"\/documentation\/afluent\/just"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"title":"AsynchronousUnitOfWork","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/TaskState":{"role":"symbol","abstract":[],"title":"TaskState","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}],"type":"topic","url":"\/documentation\/afluent\/taskstate","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskState"}]},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClockDurationUnit"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"kind":"symbol","type":"topic","abstract":[],"title":"ClockDurationUnit","url":"\/documentation\/afluent\/clockdurationunit"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"type":"topic","title":"AsynchronousUnitOfWorkSequence"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/backoffstrategy","title":"BackoffStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"url":"\/documentation\/afluent\/topleveldecoder","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","role":"symbol","title":"TopLevelDecoder"},"doc://Afluent/documentation/Afluent/Workers":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Workers"}],"kind":"symbol","url":"\/documentation\/afluent\/workers","title":"Workers"}}}