{"metadata":{"externalID":"s:Sci7Afluents8SendableRzrlE15assertNoFailureAA14AsyncSequencesO06AssertdE0Vy_xGyF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","kind":"typeIdentifier","text":"AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"assertNoFailure()","roleHeading":"Instance Method","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/AssertNoFailureSequence.swift#L55","fileName":"AssertNoFailureSequence.swift"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"role":"symbol","symbolKind":"method","extendedModule":"_Concurrency"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/_concurrency\/asyncsequence\/assertnofailure()"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/assertNoFailure()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","text":"AssertNoFailure","preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Use this to assert that a sequence is infallible, propagating values and terminating with a fatal error if any error occurs.","type":"text"}]},{"type":"heading","text":"Example","anchor":"Example","level":2},{"type":"codeListing","code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(2)","    continuation.finish()","}","for try await value in numbers.assertNoFailure() {","    print(value)","}"],"syntax":"swift"}]}],"sections":[],"abstract":[{"text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence":{"title":"AsyncSequence","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence","role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/afluent\/_concurrency\/asyncsequence","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequence"}]},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence/assertNoFailure()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"AssertNoFailure","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/afluent\/_concurrency\/asyncsequence\/assertnofailure()","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values."}],"kind":"symbol","title":"assertNoFailure()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/assertNoFailure()"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","url":"\/documentation\/afluent\/_concurrency","role":"collection","kind":"symbol","title":"_Concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AssertNoFailure"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AssertNoFailure"}],"title":"AsyncSequences.AssertNoFailure","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure"}}}