{"abstract":[{"text":"Returns a sequence that multicasts elements to multiple concurrent consumers.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","text":"AsyncBroadcastSequence","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncBroadcastSequence"},{"type":"text","text":" that multicasts elements to multiple consumers concurrently."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"text":"This operator enables multicasting of values from the upstream sequence to","type":"text"},{"text":" ","type":"text"},{"text":"multiple consumers that iterate concurrently. Each consumer sees the same","type":"text"},{"text":" ","type":"text"},{"text":"sequence of elements, and elements are only fetched once from the upstream","type":"text"},{"text":" ","type":"text"},{"text":"sequence.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"broadcast"},{"type":"text","text":" creates a new shared sequence that manages buffering and"},{"type":"text","text":" "},{"type":"text","text":"distribution of elements to all active iterators."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"broadcast","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"share","type":"codeVoice"},{"text":" operators are functionally equivalent and","type":"text"},{"text":" ","type":"text"},{"text":"can be used interchangeably.","type":"text"}],"type":"paragraph"},{"anchor":"Example","type":"heading","text":"Example","level":2},{"syntax":"swift","type":"codeListing","code":["\/\/ Create an AsyncStream that emits 3 random values between 1 and 5","let upstream = AsyncStream<Int> { continuation in","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.finish()","}","","let sharedSequence = upstream.broadcast()","","async let firstConsumer = Task {","    for await value in sharedSequence {","        print(\"First consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","async let secondConsumer = Task {","    for await value in sharedSequence {","        print(\"Second consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","\/\/ Both consumers receive the same values produced by the upstream AsyncStream.","await firstConsumer.value","await secondConsumer.value"]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/broadcast()","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"remoteSource":{"fileName":"ShareSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareSequence.swift#L66"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"symbolKind":"method","role":"symbol","extendedModule":"_Concurrency","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}]},"title":"broadcast()","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE9broadcastAA22AsyncBroadcastSequenceVyxGyF"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/_concurrency\/asyncsequence\/broadcast()"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence"]]},"references":{"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","url":"\/documentation\/afluent\/_concurrency","role":"collection","kind":"symbol","title":"_Concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","abstract":[]},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence/broadcast()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"broadcast()","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/broadcast()","url":"\/documentation\/afluent\/_concurrency\/asyncsequence\/broadcast()","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}]},"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence":{"title":"AsyncSequence","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence","role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/afluent\/_concurrency\/asyncsequence","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequence"}]}}}