{"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"extendedModule":"_Concurrency","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardOutput","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncMapSequence","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"remoteSource":{"fileName":"DiscardOutputSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/DiscardOutputSequence.swift#L21"},"title":"discardOutput()","externalID":"s:Sci7Afluents8SendableRzrlE13discardOutput12_Concurrency16AsyncMapSequenceVyxytGyF","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","roleHeading":"Instance Method","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}]},"abstract":[{"text":"Transforms each output value from the upstream sequence into ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence"]]},"variants":[{"paths":["\/documentation\/afluent\/_concurrency\/asyncsequence\/discardoutput()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardOutput","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV","text":"AsyncMapSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this to ignore the payload of each element, but still receive an event for every value."}]},{"type":"heading","text":"Example","anchor":"Example","level":2},{"type":"codeListing","syntax":null,"code":["for await _ in Just(1).discardOutput() {","    \/\/ Loop runs once for each element, but value is always Void","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/discardOutput()","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/_Concurrency":{"abstract":[],"type":"topic","url":"\/documentation\/afluent\/_concurrency","kind":"symbol","role":"collection","title":"_Concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence/discardOutput()":{"url":"\/documentation\/afluent\/_concurrency\/asyncsequence\/discardoutput()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardOutput","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncMapSequence","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"title":"discardOutput()","abstract":[{"type":"text","text":"Transforms each output value from the upstream sequence into "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."}],"kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence\/discardOutput()","type":"topic"},"doc://Afluent/documentation/Afluent/_Concurrency/AsyncSequence":{"title":"AsyncSequence","navigatorTitle":[{"kind":"identifier","text":"AsyncSequence"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency\/AsyncSequence","url":"\/documentation\/afluent\/_concurrency\/asyncsequence","abstract":[],"fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"kind":"symbol","type":"topic"}}}