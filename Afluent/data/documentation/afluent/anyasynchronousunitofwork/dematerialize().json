{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/dematerialize()","interfaceLanguage":"swift"},"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dematerialize","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">\n"}],"remoteSource":{"fileName":"Dematerialize.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/Dematerialize.swift#L30"},"externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE13dematerializeQrys8SendableRd__s6ResultOyqd__s5Error_pG7SuccessRtzlF::SYNTHESIZED::s:7Afluent25AnyAsynchronousUnitOfWorkV","extendedModule":"Afluent","roleHeading":"Instance Method","modules":[{"name":"Afluent"}],"role":"symbol","title":"dematerialize()"},"variants":[{"paths":["\/documentation\/afluent\/anyasynchronousunitofwork\/dematerialize()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations"]]},"kind":"symbol","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" value emitted by the current "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"type":"text","text":" into its underlying success or failure."}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dematerialize","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","text":"AsynchronousUnitOfWork","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", any "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"text":">\n","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" that emits the success value or throws the error contained within the "},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This operator is the inverse of "},{"type":"codeVoice","code":"materialize"},{"text":". It expects the ","type":"text"},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"type":"text","text":" to emit a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" value and will either"},{"text":" ","type":"text"},{"type":"text","text":"propagate the success value or throw the error contained within the "},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let task = DeferredTask<Result<String, Error>> { ... }","let dematerializedTask = task.dematerialize()","do {","    let value: String = try await dematerializedTask.execute()","    \/\/ Handle success value","} catch {","    \/\/ Handle error","}"]},{"style":"note","type":"aside","name":"Throws","content":[{"inlineContent":[{"type":"text","text":"The error contained within the "},{"type":"codeVoice","code":"Result"},{"text":" if itâ€™s a failure.","type":"text"}],"type":"paragraph"}]}]}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"role":"symbol","required":true,"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","abstract":[{"type":"text","text":"The type of data the unit of work will produce if it succeeds."}],"title":"Success","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Success"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"}],"url":"\/documentation\/afluent\/asynchronousunitofwork\/success"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"title":"AnyAsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","role":"collection","type":"topic","url":"\/documentation\/afluent","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/dematerialize()":{"type":"topic","abstract":[{"type":"text","text":"Transforms a "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" value emitted by the current "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" into its underlying success or failure.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/dematerialize()","title":"dematerialize()","kind":"symbol","url":"\/documentation\/afluent\/anyasynchronousunitofwork\/dematerialize()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dematerialize","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">\n"}]},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/AsynchronousUnitOfWork-Implementations":{"abstract":[],"type":"topic","title":"AsynchronousUnitOfWork Implementations","url":"\/documentation\/afluent\/anyasynchronousunitofwork\/asynchronousunitofwork-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations","kind":"article","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/asynchronousunitofwork","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"title":"AsynchronousUnitOfWork"}}}