{"variants":[{"paths":["\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/toAsyncSequence()","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toAsyncSequence","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","text":"AsynchronousUnitOfWorkSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/ToAsyncSequence.swift#L75","fileName":"ToAsyncSequence.swift"},"extendedModule":"Afluent","title":"toAsyncSequence()","modules":[{"name":"Afluent"}],"role":"symbol","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE15toAsyncSequenceAA0bcdeH0VyxGyF::SYNTHESIZED::s:7Afluent25AnyAsynchronousUnitOfWorkV","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncSequence"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" that emits the operationâ€™s result and then completes.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"Use this operator to integrate single-value asynchronous operations into sequence-based workflows, or to use sequence algorithms and idioms with a single result."}],"type":"paragraph"},{"type":"heading","text":"Example","anchor":"Example","level":2},{"code":["for try await value in DeferredTask { 42 }.toAsyncSequence() {","    print(value) \/\/ prints 42","}"],"type":"codeListing","syntax":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence emits one value if the operation succeeds or fails if the operation throws."}]}],"type":"aside","style":"note","name":"Note"}],"kind":"content"}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Converts this asynchronous unit of work into an "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that emits a single value and then completes."}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"type":"topic","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","url":"\/documentation\/afluent\/asynchronousunitofworksequence"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/toAsyncSequence()":{"title":"toAsyncSequence()","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/toAsyncSequence()","abstract":[{"type":"text","text":"Converts this asynchronous unit of work into an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that emits a single value and then completes."}],"url":"\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncSequence"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","text":"AsynchronousUnitOfWorkSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/AsynchronousUnitOfWork-Implementations":{"kind":"article","abstract":[],"type":"topic","title":"AsynchronousUnitOfWork Implementations","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations","url":"\/documentation\/afluent\/anyasynchronousunitofwork\/asynchronousunitofwork-implementations"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"navigatorTitle":[{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"kind":"symbol","type":"topic","title":"AnyAsynchronousUnitOfWork","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"url":"\/documentation\/afluent\/anyasynchronousunitofwork"}}}