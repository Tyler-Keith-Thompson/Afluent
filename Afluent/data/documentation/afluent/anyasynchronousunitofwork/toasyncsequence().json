{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/toAsyncSequence()","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"symbolKind":"method","role":"symbol","title":"toAsyncSequence()","extendedModule":"Afluent","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE15toAsyncSequenceAA0bcdeH0VyxGyF::SYNTHESIZED::s:7Afluent25AnyAsynchronousUnitOfWorkV","roleHeading":"Instance Method","modules":[{"name":"Afluent"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"toAsyncSequence","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"remoteSource":{"fileName":"ToAsyncSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/ToAsyncSequence.swift#L69"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()"]}],"abstract":[{"type":"text","text":"Converts the asynchronous unit of work into an "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":"."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations"]]},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"toAsyncSequence"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","text":"AsynchronousUnitOfWorkSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsynchronousUnitOfWorkSequence"},{"text":" that represents the operation of the ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method transforms the result of an "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" into an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":". Itâ€™s useful for integrating the single-value asynchronous operation into APIs that work with sequences, or for using async\/await in a more sequential, iterative manner.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting sequence emits a single value if the operation succeeds, or throws an error if the operation fails. After emitting its single value or error, the sequence completes."}]}]}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"title":"AsynchronousUnitOfWorkSequence","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworksequence"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"type":"topic","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/AsynchronousUnitOfWork-Implementations":{"role":"collectionGroup","url":"\/documentation\/afluent\/anyasynchronousunitofwork\/asynchronousunitofwork-implementations","kind":"article","abstract":[],"title":"AsynchronousUnitOfWork Implementations","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/AsynchronousUnitOfWork-Implementations"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","title":"AnyAsynchronousUnitOfWork","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/anyasynchronousunitofwork","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork/toAsyncSequence()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork\/toAsyncSequence()","kind":"symbol","title":"toAsyncSequence()","url":"\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()","abstract":[{"type":"text","text":"Converts the asynchronous unit of work into an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"toAsyncSequence"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]}}}