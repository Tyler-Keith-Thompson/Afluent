{"abstract":[{"type":"text","text":"Transforms any error produced by the sequence using the provided closure."}],"metadata":{"remoteSource":{"fileName":"MapErrorSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/MapErrorSequence.swift#L58"},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapError"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") -> any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8MapErrorV","text":"MapError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"title":"mapError(_:)","roleHeading":"Instance Method","symbolKind":"method","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"extendedModule":"_Concurrency","externalID":"s:Sci7Afluents8SendableRzrlE8mapErroryAA14AsyncSequencesO03MapD0Vy_xGs0D0_psAI_pYbcF::SYNTHESIZED::s:7Afluent22AsyncBroadcastSequenceV"},"kind":"symbol","variants":[{"paths":["\/documentation\/afluent\/asyncbroadcastsequence\/maperror(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/mapError(_:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" (any "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"text":") -> any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"MapError","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/MapError","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8MapErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is useful for converting between error types or adding additional context to errors."}]},{"anchor":"Example","text":"Example","type":"heading","level":2},{"code":["enum NetworkError: Error { case timeout }","enum UserError: Error { case displayMessage(String) }","let throwing = Just(1).map { _ in throw NetworkError.timeout }","for try await _ in throwing.mapError { error in","    if let netErr = error as? NetworkError, netErr == .timeout {","        return UserError.displayMessage(\"Request timed out\")","    }","    return error","} {","    \/\/ Will throw UserError.displayMessage(\"Request timed out\")","}"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/AsyncSequence-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"kind":"symbol","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncbroadcastsequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"title":"AsyncBroadcastSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncbroadcastsequence\/asyncsequence-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","role":"collectionGroup","abstract":[],"type":"topic","kind":"article"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence/mapError(_:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/mapError(_:)","abstract":[{"type":"text","text":"Transforms any error produced by the sequence using the provided closure."}],"type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapError","kind":"identifier"},{"text":"((any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"MapError","preciseIdentifier":"s:7Afluent14AsyncSequencesO8MapErrorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"mapError(_:)","kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence\/maperror(_:)"},"doc://Afluent/documentation/Afluent/AsyncSequences/MapError":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MapError"}],"title":"AsyncSequences.MapError","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MapError"}],"url":"\/documentation\/afluent\/asyncsequences\/maperror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/MapError","role":"symbol","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"code":"AsyncSequence\/mapError(_:)","type":"codeVoice"},{"type":"text","text":" operator."}]}}}