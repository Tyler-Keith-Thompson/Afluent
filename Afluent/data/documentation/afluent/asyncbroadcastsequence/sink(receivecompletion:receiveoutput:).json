{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/sink(receiveCompletion:receiveOutput:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sink"},{"kind":"text","text":"("},{"kind":"externalParam","text":"receiveCompletion"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Completion","preciseIdentifier":"s:7Afluent14AsyncSequencesO10CompletionO","text":"Completion"},{"kind":"text","text":"<any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")? = nil, "},{"kind":"externalParam","text":"receiveOutput"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:Sci7ElementQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")? = nil) -> ","kind":"text"},{"text":"AnyCancellable","preciseIdentifier":"s:7Afluent14AnyCancellableC","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable"}]}]},{"kind":"parameters","parameters":[{"name":"receiveCompletion","content":[{"inlineContent":[{"type":"text","text":"An optional async closure invoked when the sequence completes, either normally with "},{"type":"codeVoice","code":".finished"},{"type":"text","text":" "},{"type":"text","text":"or with an error "},{"type":"codeVoice","code":".failure"},{"type":"text","text":". Called exactly once."}],"type":"paragraph"}]},{"name":"receiveOutput","content":[{"inlineContent":[{"type":"text","text":"An optional async throwing closure invoked for each element produced by the sequence."},{"type":"text","text":" "},{"type":"text","text":"If this closure throws an error, the sequence is terminated and completion closure is called with "},{"type":"codeVoice","code":".failure"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AnyCancellable"},{"text":" token that can be stored and used to cancel the ongoing subscription.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This method allows you to asynchronously receive each element emitted by the sequence and respond","type":"text"},{"text":" ","type":"text"},{"text":"to completion or failure. The stream runs until all elements are consumed, an error occurs,","type":"text"},{"text":" ","type":"text"},{"text":"or cancellation is triggered via the returned token.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usage example:"}]},{"type":"codeListing","syntax":"swift","code":["let publisher: AsyncStream<Int> = AsyncStream { continuation in","    Task {","        for i in 1...5 {","            continuation.yield(i)","            try await Task.sleep(nanoseconds: 500_000_000)","        }","        continuation.finish()","    }","}","","let cancellable = publisher.sink(","    receiveCompletion: { completion in","        switch completion {","        case .finished:","            print(\"Stream completed successfully\")","        case .failure(let error):","            print(\"Stream failed with error: \\(error)\")","        }","    },","    receiveOutput: { value in","        print(\"Received value: \\(value)\")","    }",")","","\/\/ To cancel early:","\/\/ cancellable.cancel()"]}]}],"kind":"symbol","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/AsyncSequence-Implementations"]]},"abstract":[{"type":"text","text":"Starts processing the elements of this async sequence, handling output and completion events,"},{"type":"text","text":" "},{"type":"text","text":"and returns an "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token that can be used to cancel the subscription."}],"variants":[{"paths":["\/documentation\/afluent\/asyncbroadcastsequence\/sink(receivecompletion:receiveoutput:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"extendedModule":"_Concurrency","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sink","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveCompletion","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO10CompletionO","text":"Completion","kind":"typeIdentifier"},{"text":"<any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sci7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AnyCancellableC","text":"AnyCancellable","kind":"typeIdentifier"}],"externalID":"s:Sci7Afluents8SendableRzrlE4sink17receiveCompletion0D6OutputAA14AnyCancellableCyAA14AsyncSequencesO0E0Oy_s5Error_pGYaYbcSg_y7ElementQzYaYbKcSgtF::SYNTHESIZED::s:7Afluent22AsyncBroadcastSequenceV","title":"sink(receiveCompletion:receiveOutput:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"remoteSource":{"fileName":"AnyCancellable.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Subscription\/AnyCancellable.swift#L163"},"roleHeading":"Instance Method","role":"symbol","symbolKind":"method"},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence/sink(receiveCompletion:receiveOutput:)":{"abstract":[{"type":"text","text":"Starts processing the elements of this async sequence, handling output and completion events,"},{"type":"text","text":" "},{"type":"text","text":"and returns an "},{"code":"AnyCancellable","type":"codeVoice"},{"type":"text","text":" token that can be used to cancel the subscription."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/sink(receiveCompletion:receiveOutput:)","type":"topic","title":"sink(receiveCompletion:receiveOutput:)","url":"\/documentation\/afluent\/asyncbroadcastsequence\/sink(receivecompletion:receiveoutput:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sink"},{"kind":"text","text":"("},{"kind":"externalParam","text":"receiveCompletion"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Completion","preciseIdentifier":"s:7Afluent14AsyncSequencesO10CompletionO"},{"kind":"text","text":"<any "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"receiveOutput"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:Sci7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?) -> "},{"kind":"typeIdentifier","text":"AnyCancellable","preciseIdentifier":"s:7Afluent14AnyCancellableC"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence/AsyncSequence-Implementations":{"title":"AsyncSequence Implementations","type":"topic","abstract":[],"url":"\/documentation\/afluent\/asyncbroadcastsequence\/asyncsequence-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence\/AsyncSequence-Implementations","role":"collectionGroup","kind":"article"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyCancellable"}],"navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","url":"\/documentation\/afluent\/anycancellable","abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it.","type":"text"}],"kind":"symbol","title":"AnyCancellable","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","abstract":[{"text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence"},"doc://Afluent/documentation/Afluent/AsyncSequences/Completion":{"title":"AsyncSequences.Completion","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Completion"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Completion","url":"\/documentation\/afluent\/asyncsequences\/completion","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Completion"}],"abstract":[{"text":"A type that represents the completion of a sequence, either due to a normal completion or an error.","type":"text"}]}}}