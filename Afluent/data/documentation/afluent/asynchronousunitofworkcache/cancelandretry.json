{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","interfaceLanguage":"swift"},"abstract":[{"text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one.","type":"text"}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy"]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelAndRetry"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"This strategy is useful when you want to ensure only the latest requested unit of work for a given key is running, and any prior work is cancelled.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The cached entry is cleared on:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"successful completion (output received)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"error thrown","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"cancellation","type":"text"}]}]}]},{"text":"Example","type":"heading","anchor":"Example","level":2},{"type":"codeListing","code":["let cache = AUOWCache()","let clock = TestClock()","","\/\/ A unit of work that produces a String after a delay","@Sendable func unitOfWork() -> some AsynchronousUnitOfWork<String> {","    DeferredTask {","        UUID().uuidString","    }","    .delay(for: .milliseconds(10), clock: clock)","    .shareFromCache(cache, strategy: .cancelAndRestart)","}","","\/\/ First execution starts the work","async let r1 = Result { try await unitOfWork().execute() }","\/\/ Second execution before the first completes cancels the previous one","async let r2 = Result { try await unitOfWork().execute() }","","await clock.advance(by: .milliseconds(11))","let result1 = await r1","let result2 = await r2","","\/\/ result1 should throw CancellationError, result2 completes successfully"],"syntax":"swift"},{"inlineContent":[{"text":"See also: ","type":"text"},{"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","isActive":true}],"type":"paragraph"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"]]},"sections":[],"metadata":{"roleHeading":"Structure","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCache+CancelAndRetry.swift#L48","fileName":"AUOWCache+CancelAndRetry.swift"},"role":"symbol","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"symbolKind":"struct","extendedModule":"Afluent","modules":[{"name":"Afluent"}],"navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"externalID":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV"},"topicSections":[{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)"],"generated":true},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations"],"generated":true}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"abstract":[{"text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelAndRetry"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","navigatorTitle":[{"kind":"identifier","text":"CancelAndRetry"}],"title":"AsynchronousUnitOfWorkCache.CancelAndRetry","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","type":"topic"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"AsynchronousUnitOfWorkCache.CancelAndRetry","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","text":"AsynchronousUnitOfWorkCache"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","text":"CancelAndRetry"}],"type":"topic","abstract":[{"text":"Returns the ","type":"text"},{"code":".cancelAndRestart","type":"codeVoice"},{"text":" strategy.","type":"text"}],"url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","title":"cancelAndRestart"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/AUOWCacheStrategy-Implementations":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/auowcachestrategy-implementations","abstract":[],"title":"AUOWCacheStrategy Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/handle(unitOfWork:keyedBy:storedIn:)":{"title":"handle(unitOfWork:keyedBy:storedIn:)","abstract":[{"type":"text","text":"Handles the unit of work for this strategy, cancelling any in-flight work with the same key and starting the new one."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/handle(unitofwork:keyedby:storedin:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"unitOfWork"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keyedBy"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"storedIn"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent9AUOWCachea","kind":"typeIdentifier","text":"AUOWCache"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent25AnyAsynchronousUnitOfWorkV","kind":"typeIdentifier","text":"AnyAsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[{"text":"A thread-safe cache for storing and sharing asynchronous units of work.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"kind":"symbol","title":"AsynchronousUnitOfWorkCache","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"role":"symbol"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"title":"AUOWCacheStrategy"},"doc://Afluent/documentation/Afluent/AUOWCache":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache"}}}