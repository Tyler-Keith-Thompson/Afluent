{"variants":[{"paths":["\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy is useful when you want to ensure only the latest requested unit of work for a given key is running, and any prior work is cancelled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The cached entry is cleared on:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"successful completion (output received)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"error thrown"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"cancellation","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Example","level":2,"text":"Example","type":"heading"},{"code":["let cache = AUOWCache()","let clock = TestClock()","","\/\/ A unit of work that produces a String after a delay","@Sendable func unitOfWork() -> some AsynchronousUnitOfWork<String> {","    DeferredTask {","        UUID().uuidString","    }","    .delay(for: .milliseconds(10), clock: clock)","    .shareFromCache(cache, strategy: .cancelAndRestart)","}","","\/\/ First execution starts the work","async let r1 = Result { try await unitOfWork().execute() }","\/\/ Second execution before the first completes cancels the previous one","async let r2 = Result { try await unitOfWork().execute() }","","await clock.advance(by: .milliseconds(11))","let result1 = await r1","let result2 = await r2","","\/\/ result1 should throw CancellationError, result2 completes successfully"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See also: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart"}]}],"kind":"content"}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)"],"title":"Instance Methods","anchor":"Instance-Methods"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"]]},"metadata":{"roleHeading":"Structure","externalID":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","role":"symbol","extendedModule":"Afluent","symbolKind":"struct","remoteSource":{"fileName":"AUOWCache+CancelAndRetry.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCache+CancelAndRetry.swift#L48"},"modules":[{"name":"Afluent"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}]},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"},"sections":[],"abstract":[{"text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"kind":"symbol","type":"topic","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[{"type":"text","text":"A thread-safe cache for storing and sharing asynchronous units of work."}],"title":"AsynchronousUnitOfWorkCache","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/handle(unitOfWork:keyedBy:storedIn:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"unitOfWork"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keyedBy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"storedIn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AUOWCache","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyAsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent25AnyAsynchronousUnitOfWorkV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Handles the unit of work for this strategy, cancelling any in-flight work with the same key and starting the new one."}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)","title":"handle(unitOfWork:keyedBy:storedIn:)","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/handle(unitofwork:keyedby:storedin:)"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"type":"text","text":"."}],"url":"\/documentation\/afluent\/auowcachestrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"type":"topic","role":"symbol","title":"AUOWCacheStrategy"},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"role":"symbol","title":"AUOWCache","kind":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"abstract":[{"text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"CancelAndRetry"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelAndRetry"}],"role":"symbol","title":"AsynchronousUnitOfWorkCache.CancelAndRetry"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWorkCache","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CancelAndRetry","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CancelAndRetry"},{"text":".","type":"text"}]},"type":"topic","title":"cancelAndRestart","kind":"symbol","abstract":[{"text":"Returns the ","type":"text"},{"type":"codeVoice","code":".cancelAndRestart"},{"type":"text","text":" strategy."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","role":"symbol","url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/AUOWCacheStrategy-Implementations":{"kind":"article","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/auowcachestrategy-implementations","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations","title":"AUOWCacheStrategy Implementations","role":"collectionGroup","type":"topic"}}}