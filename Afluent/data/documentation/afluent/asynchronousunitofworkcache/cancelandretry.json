{"abstract":[{"type":"text","text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one."}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelAndRetry"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This strategy is useful when you want to ensure only the latest requested unit of work for a given key is running, and any prior work is cancelled.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The cached entry is cleared on:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"successful completion (output received)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"error thrown"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"cancellation","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"syntax":"swift","type":"codeListing","code":["let cache = AUOWCache()","let clock = TestClock()","","\/\/ A unit of work that produces a String after a delay","@Sendable func unitOfWork() -> some AsynchronousUnitOfWork<String> {","    DeferredTask {","        UUID().uuidString","    }","    .delay(for: .milliseconds(10), clock: clock)","    .shareFromCache(cache, strategy: .cancelAndRestart)","}","","\/\/ First execution starts the work","async let r1 = Result { try await unitOfWork().execute() }","\/\/ Second execution before the first completes cancels the previous one","async let r2 = Result { try await unitOfWork().execute() }","","await clock.advance(by: .milliseconds(11))","let result1 = await r1","let result2 = await r2","","\/\/ result1 should throw CancellationError, result2 completes successfully"]},{"type":"paragraph","inlineContent":[{"text":"See also: ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","type":"reference","isActive":true}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry"]}],"metadata":{"role":"symbol","externalID":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"symbolKind":"struct","extendedModule":"Afluent","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"remoteSource":{"fileName":"AUOWCache+CancelAndRetry.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCache+CancelAndRetry.swift#L48"},"modules":[{"name":"Afluent"}],"roleHeading":"Structure"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"]]},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/handle(unitOfWork:keyedBy:storedIn:)":{"type":"topic","role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/handle(unitofwork:keyedby:storedin:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/handle(unitOfWork:keyedBy:storedIn:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"unitOfWork","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"keyedBy","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"storedIn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AUOWCache","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyAsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent25AnyAsynchronousUnitOfWorkV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">"}],"title":"handle(unitOfWork:keyedBy:storedIn:)","kind":"symbol","abstract":[{"type":"text","text":"Handles the unit of work for this strategy, cancelling any in-flight work with the same key and starting the new one."}]},"doc://Afluent/documentation/Afluent/AUOWCache":{"navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"title":"AUOWCache","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache","role":"symbol","abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","kind":"symbol","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","abstract":[{"type":"text","text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one."}]},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkCache"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","kind":"typeIdentifier","text":"CancelAndRetry"}],"title":"cancelAndRestart","abstract":[{"type":"text","text":"Returns the "},{"code":".cancelAndRestart","type":"codeVoice"},{"type":"text","text":" strategy."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CancelAndRetry"},{"type":"text","text":"."}]},"type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","title":"AsynchronousUnitOfWorkCache","abstract":[{"type":"text","text":"A thread-safe cache for storing and sharing asynchronous units of work."}],"role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","type":"topic","url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"abstract":[{"text":"Represents a cache strategy for use with ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","type":"reference","isActive":true},{"text":".","type":"text"}],"title":"AUOWCacheStrategy","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/AUOWCacheStrategy-Implementations":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations","kind":"article","abstract":[],"title":"AUOWCacheStrategy Implementations","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/auowcachestrategy-implementations","role":"collectionGroup"}}}