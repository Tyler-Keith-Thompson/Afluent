{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/AUOWCacheStrategy-Implementations","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"]]},"sections":[],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/cancelAndRestart"],"title":"Type Properties","anchor":"Type-Properties"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/auowcachestrategy-implementations"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"API Collection","title":"AUOWCacheStrategy Implementations","modules":[{"name":"Afluent"}],"role":"collectionGroup"},"references":{"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"type":"topic","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","abstract":[],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache.CancelAndRetry"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/share()":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","abstract":[{"text":"Shares the upstream ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" among multiple downstream subscribers."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"share"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success","kind":"typeIdentifier"},{"text":"> & ","kind":"text"},{"text":"Actor","preciseIdentifier":"s:ScA","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork\/share()","kind":"symbol","title":"share()"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","abstract":[{"type":"text","text":"A cache for asynchronous unit of work types."},{"type":"text","text":" "},{"text":"A stored unit of work should be both ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and a reference type (e.g. a unit of work shared via the "},{"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","isActive":true},{"type":"text","text":" operator)."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"title":"AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry/cancelAndRestart":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry\/cancelAndRestart","abstract":[{"text":"This strategy indicates that any existing work should be cancelled before restarting the upstream work again.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"cancelAndRestart"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","text":"AsynchronousUnitOfWorkCache"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"CancelAndRetry","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV"}],"type":"topic","title":"cancelAndRestart","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/cancelandrestart","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"code":"AsynchronousUnitOfWorkCache.CancelAndRetry","type":"codeVoice"},{"type":"text","text":"."}]}}}}