{"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Retries the upstream "},{"code":"AsyncSequence","type":"codeVoice"},{"text":" up to a specified number of times.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"retries","kind":"internalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":" = 1) -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"text":".","kind":"text"},{"text":"Retry","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","text":"RetryByCountStrategy"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"name":"retries","content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to retry the upstream, defaulting to 1."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that emits the same output as the upstream but retries on failure up to the specified number of times."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"content":[{"inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations."}],"type":"paragraph"}],"type":"aside","name":"Important","style":"important"},{"content":[{"inlineContent":[{"type":"text","text":""},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" and "},{"code":"AsyncThrowingStream","type":"codeVoice"},{"type":"text","text":" are notable sequences which cannot be retried on their own."}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"}]}],"sections":[],"metadata":{"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retryyAA14AsyncSequencesO5RetryCy_xAA0G15ByCountStrategyCGSuF::SYNTHESIZED::s:7Afluent30AsynchronousUnitOfWorkSequenceV","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Retry","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","remoteSource":{"fileName":"RetrySequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L173"},"roleHeading":"Instance Method","symbolKind":"method","extendedModule":"_Concurrency","title":"retry(_:)","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence\/retry(_:)"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)"]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence\/AsyncSequence-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Retry":{"abstract":[],"role":"symbol","title":"AsyncSequences.Retry","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Retry"}],"navigatorTitle":[{"kind":"identifier","text":"Retry"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry","url":"\/documentation\/afluent\/asyncsequences\/retry","type":"topic"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","title":"RetryByCountStrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence/retry(_:)":{"url":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"text":"Retry","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" up to a specified number of times.","type":"text"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","title":"retry(_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence\/retry(_:)"},"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","kind":"symbol","type":"topic","title":"Afluent","role":"collection","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","type":"topic","abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence/AsyncSequence-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/afluent\/asynchronousunitofworksequence\/asyncsequence-implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence\/AsyncSequence-Implementations","title":"AsyncSequence Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","title":"AsyncSequences","role":"symbol","type":"topic","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}]}}}