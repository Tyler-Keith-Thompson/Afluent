{"abstract":[{"type":"text","text":"This operator enables sharing and caching of results from an async sequence"},{"type":"text","text":" "},{"type":"text","text":"based on a specified caching strategy and three hashable cache keys."},{"type":"text","text":" "},{"type":"text","text":"The combined hashable keys uniquely identify the shared sequence in the cache."}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence\/shareFromCache(_:strategy:keys:_:_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/sharefromcache(_:strategy:keys:_:_:)"]}],"kind":"symbol","sections":[],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareFromCacheSequence.swift#L179","fileName":"ShareFromCacheSequence.swift"},"title":"shareFromCache(_:strategy:keys:_:_:)","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H1","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H2","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","text":"AsyncSequenceCache","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","text":"AsyncSequenceCache","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO","text":"Strategy","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"H2","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"extendedModule":"_Concurrency","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE14shareFromCache_8strategy4keys__AA22AsyncBroadcastSequenceVyAA0I9SequencesO12HandleEventsVy_xGGAA0ikF0C_AQ8StrategyOqd__qd_0_qd_1_tSHRd__SHRd_0_SHRd_1_r1_lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO03AnyB8SequenceV","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence\/AsyncSequence-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shareFromCache"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"H0"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"H1"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"H2"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"cache","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"AsyncSequenceCache","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AsyncSequenceCache","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC"},{"text":".","kind":"text"},{"text":"Strategy","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache\/Strategy","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k0","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k1","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k2","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H2","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"text":"<","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"HandleEvents","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":", ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":", ","kind":"text"},{"text":"H2","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"cache","content":[{"inlineContent":[{"text":"The cache from which to share data.","type":"text"}],"type":"paragraph"}]},{"name":"strategy","content":[{"inlineContent":[{"type":"text","text":"The caching strategy to use."}],"type":"paragraph"}]},{"name":"k0","content":[{"type":"paragraph","inlineContent":[{"text":"The first hashable key.","type":"text"}]}]},{"name":"k1","content":[{"inlineContent":[{"type":"text","text":"The second hashable key."}],"type":"paragraph"}]},{"name":"k2","content":[{"type":"paragraph","inlineContent":[{"text":"The third hashable key.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An asynchronous broadcast sequence that shares the underlying sequenceâ€™s values according to the cache and strategy."}]}],"kind":"content"},{"content":[{"type":"heading","text":"Example","anchor":"Example","level":2},{"type":"codeListing","syntax":"swift","code":["let cache = AsyncSequenceCache()","let sequence = fetchData(category: \"books\", page: 2, filter: \"bestsellers\")","let sharedSequence = sequence.shareFromCache(cache, strategy: .cacheUntilCompletionOrCancellation, keys: \"books\", 2, \"bestsellers\")","","Task {","    for await data in sharedSequence {","        print(\"Fetched data: \\(data)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The combination of keys ","type":"text"},{"code":"\"books\"","type":"codeVoice"},{"text":", ","type":"text"},{"code":"2","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"\"bestsellers\"","type":"codeVoice"},{"text":" uniquely identifies the cache entry.","type":"text"}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator should generally be placed at the end of an operator chain. Any operators applied after "},{"type":"codeVoice","code":"shareFromCache"},{"type":"text","text":" will not be shared and may result in duplicated work or side effects."}]}],"name":"Important"}],"kind":"content"}],"references":{"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/AnyAsyncSequence/shareFromCache(_:strategy:keys:_:_:)":{"abstract":[{"type":"text","text":"This operator enables sharing and caching of results from an async sequence"},{"type":"text","text":" "},{"type":"text","text":"based on a specified caching strategy and three hashable cache keys."},{"type":"text","text":" "},{"type":"text","text":"The combined hashable keys uniquely identify the shared sequence in the cache."}],"title":"shareFromCache(_:strategy:keys:_:_:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence\/shareFromCache(_:strategy:keys:_:_:)","url":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/sharefromcache(_:strategy:keys:_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H1","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H2","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AsyncSequenceCache","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"strategy"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","kind":"typeIdentifier","text":"AsyncSequenceCache"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO","kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keys"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"H0"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"H1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"H2"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier","text":"AsyncBroadcastSequence"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","kind":"typeIdentifier","text":"HandleEvents"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">>"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"kind":"symbol","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncbroadcastsequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"title":"AsyncBroadcastSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequenceCache":{"navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceCache"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","title":"AsyncSequenceCache","abstract":[{"text":"A thread-safe cache for sharing async sequences by integer key.","type":"text"},{"text":" ","type":"text"},{"text":"This cache is commonly used with the ","type":"text"},{"code":"shareFromCache","type":"codeVoice"},{"text":" operator to reuse sequences.","type":"text"}],"role":"symbol","url":"\/documentation\/afluent\/asyncsequencecache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceCache"}],"type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/AnyAsyncSequence":{"url":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence","abstract":[{"type":"text","text":"A type-erased async sequence."}],"type":"topic","role":"symbol","kind":"symbol","title":"AsyncSequences.AnyAsyncSequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequenceCache/Strategy":{"abstract":[{"type":"codeVoice","code":"Strategy"},{"type":"text","text":" represents the available caching strategies for the "},{"type":"codeVoice","code":"AsyncSequenceCache"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These strategies determine how long the cache retains the async sequences."}],"title":"AsyncSequenceCache.Strategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache\/Strategy","url":"\/documentation\/afluent\/asyncsequencecache\/strategy","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strategy"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Strategy"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/HandleEvents":{"url":"\/documentation\/afluent\/asyncsequences\/handleevents","type":"topic","title":"AsyncSequences.HandleEvents","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","role":"symbol","abstract":[{"text":"Used as the implementation detail for the ","type":"text"},{"code":"AsyncSequence\/handleEvents(receiveMakeIterator:receiveNext:receiveOutput:receiveError:receiveComplete:receiveCancel:)","type":"codeVoice"},{"text":" operator.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HandleEvents","kind":"identifier"}],"navigatorTitle":[{"text":"HandleEvents","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AnyAsyncSequence/AsyncSequence-Implementations":{"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AnyAsyncSequence\/AsyncSequence-Implementations","kind":"article","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]}}}