{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dematerialize"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"text":"Dematerialize","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Event","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Event","preciseIdentifier":"s:7Afluent14AsyncSequencesO5EventO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AsyncSequences.Dematerialize"},{"type":"text","text":" instance that represents the original "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" with its elements and errors."}]}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is the inverse of "},{"code":"materialize","type":"codeVoice"},{"text":". It takes an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Event"},{"text":" values and transforms it back into an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" of the original elements, propagating errors as thrown exceptions.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence must be of type "},{"code":"AsyncSequences.Event<T>","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"dematerialize","type":"codeVoice"},{"text":" method will extract the original elements and errors from these events.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"name":"Throws","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Re-throws any errors that were encapsulated in the "},{"code":"Event.failure","type":"codeVoice"},{"text":" cases.","type":"text"}]}]}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/dematerialize()","interfaceLanguage":"swift"},"sections":[],"metadata":{"externalID":"s:Sci7Afluents8SendableRzrlE13dematerializeAA14AsyncSequencesO13DematerializeVy_xqd__GysABRd__AE5EventOy_qd__G7ElementRtzlF::SYNTHESIZED::s:7Afluent14AsyncSequencesO15AssertNoFailureV","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"extendedModule":"_Concurrency","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"remoteSource":{"fileName":"DematerializeSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/DematerializeSequence.swift#L48"},"title":"dematerialize()","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dematerialize"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Dematerialize","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"abstract":[{"type":"text","text":"Transforms a sequence of "},{"code":"Event","type":"codeVoice"},{"text":" values back into their original form in an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":"."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()"]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Event":{"abstract":[{"type":"text","text":"Represents the different kinds of events that can be emitted by "},{"type":"codeVoice","code":"Materialize"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Event","kind":"identifier"}],"title":"AsyncSequences.Event","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Event","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/event","navigatorTitle":[{"kind":"identifier","text":"Event"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dematerialize","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","navigatorTitle":[{"kind":"identifier","text":"Dematerialize"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/dematerialize","title":"AsyncSequences.Dematerialize","kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asyncsequence-implementations","title":"AsyncSequence Implementations","role":"collectionGroup","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","navigatorTitle":[{"kind":"identifier","text":"AssertNoFailure"}],"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AssertNoFailure","kind":"identifier"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","title":"AsyncSequences.AssertNoFailure"},"doc://Afluent/documentation/Afluent":{"type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","kind":"symbol","abstract":[],"title":"Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/dematerialize()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dematerialize","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV","text":"Dematerialize"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()","title":"dematerialize()","role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/dematerialize()","type":"topic","abstract":[{"type":"text","text":"Transforms a sequence of "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" values back into their original form in an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"title":"AsyncSequences"}}}