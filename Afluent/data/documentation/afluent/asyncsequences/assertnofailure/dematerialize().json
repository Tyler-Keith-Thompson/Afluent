{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/dematerialize()","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations"]]},"metadata":{"externalID":"s:Sci7Afluents8SendableRzrlE13dematerializeAA14AsyncSequencesO13DematerializeVy_xqd__GysABRd__AE5EventOy_qd__G7ElementRtzlF::SYNTHESIZED::s:7Afluent14AsyncSequencesO15AssertNoFailureV","role":"symbol","symbolKind":"method","roleHeading":"Instance Method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dematerialize","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">() -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Dematerialize","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"extendedModule":"_Concurrency","title":"dematerialize()","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"remoteSource":{"fileName":"DematerializeSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/DematerializeSequence.swift#L48"}},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dematerialize"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">() -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"text":"Dematerialize","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sci7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Event","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Event","preciseIdentifier":"s:7Afluent14AsyncSequencesO5EventO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncSequences.Dematerialize"},{"text":" instance that represents the original ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" with its elements and errors."}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is the inverse of "},{"type":"codeVoice","code":"materialize"},{"text":". It takes an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" of ","type":"text"},{"code":"Event","type":"codeVoice"},{"text":" values and transforms it back into an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" of the original elements, propagating errors as thrown exceptions.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The sequence must be of type ","type":"text"},{"type":"codeVoice","code":"AsyncSequences.Event<T>"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"dematerialize"},{"text":" method will extract the original elements and errors from these events.","type":"text"}]}]},{"name":"Throws","content":[{"type":"paragraph","inlineContent":[{"text":"Re-throws any errors that were encapsulated in the ","type":"text"},{"code":"Event.failure","type":"codeVoice"},{"text":" cases.","type":"text"}]}],"style":"note","type":"aside"}]}],"abstract":[{"text":"Transforms a sequence of ","type":"text"},{"type":"codeVoice","code":"Event"},{"type":"text","text":" values back into their original form in an "},{"code":"AsyncSequence","type":"codeVoice"},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asyncsequence-implementations","kind":"article","type":"topic","role":"collectionGroup","title":"AsyncSequence Implementations","abstract":[]},"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","kind":"symbol","type":"topic","title":"Afluent","role":"collection","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","title":"AsyncSequences","role":"symbol","type":"topic","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/dematerialize()":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/dematerialize()","title":"dematerialize()","abstract":[{"type":"text","text":"Transforms a sequence of "},{"code":"Event","type":"codeVoice"},{"text":" values back into their original form in an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dematerialize","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO13DematerializeV","text":"Dematerialize"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize":{"url":"\/documentation\/afluent\/asyncsequences\/dematerialize","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dematerialize","kind":"identifier"}],"type":"topic","title":"AsyncSequences.Dematerialize","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"Dematerialize","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Event":{"url":"\/documentation\/afluent\/asyncsequences\/event","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Event","title":"AsyncSequences.Event","abstract":[{"type":"text","text":"Represents the different kinds of events that can be emitted by "},{"code":"Materialize","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Event"}],"navigatorTitle":[{"text":"Event","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"navigatorTitle":[{"kind":"identifier","text":"AssertNoFailure"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AssertNoFailure","kind":"identifier"}],"abstract":[],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","title":"AsyncSequences.AssertNoFailure"}}}