{"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-405cl"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"retries"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":" = 1, ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RetryOn","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOn","preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"RetryByCountStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to retry the upstream, defaulting to 1."}],"type":"paragraph"}],"name":"retries"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The specific error that should trigger a retry."}]}],"name":"error"}],"kind":"parameters"},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that emits the same output as the upstream but retries on the specified error up to the specified number of times."}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This method returns an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that retries the upstream only when the specified error occurs, up to the given number of retries."}],"type":"paragraph"},{"inlineContent":[{"text":"Not all ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":"s can be retried. For example, ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" cannot be retried on their own.","type":"text"}],"type":"paragraph"},{"anchor":"Example","text":"Example","type":"heading","level":2},{"type":"codeListing","syntax":"swift","code":["actor CallCounter {","    private(set) var count = 0","    func increment() -> Int {","        count += 1","        return count","    }","}","","enum CustomError: Error, Equatable {","    case temporaryFailure","}","","let counter = CallCounter()","","let sequence = DeferredTask {","    let attempt = await counter.increment()","    if attempt < 2 {","        throw CustomError.temporaryFailure","    } else if attempt == 2 {","        throw NSError(domain: \"OtherError\", code: 1, userInfo: nil)","    }","    return 7","}",".toAsyncSequence()",".retry(3, on: CustomError.temporaryFailure)","","for try await value in sequence {","    print(value) \/\/ prints 7 after retry","}"]},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations."}]}],"style":"important"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" are notable sequences which cannot be retried on their own."}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"role":"symbol","symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RetryOn","preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"_Concurrency","title":"retry(_:on:)","roleHeading":"Instance Method","remoteSource":{"fileName":"RetrySequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L362"},"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retry_2onAA14AsyncSequencesO7RetryOnCy_xqd__AA0H15ByCountStrategyCGSu_qd__tSQRd__s5ErrorRd__lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO15AssertNoFailureV"},"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times only when a specific error occurs."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/retry(_:on:)-405cl"},"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOn":{"url":"\/documentation\/afluent\/asyncsequences\/retryon","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryOn","kind":"identifier"}],"title":"AsyncSequences.RetryOn","navigatorTitle":[{"text":"RetryOn","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOn"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AssertNoFailure"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AssertNoFailure"}],"title":"AsyncSequences.AssertNoFailure","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/retry(_:on:)-405cl":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"RetryOn","preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-405cl","abstract":[{"text":"Retries the upstream ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" up to a specified number of times only when a specific error occurs.","type":"text"}],"title":"retry(_:on:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/retry(_:on:)-405cl","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}}}}