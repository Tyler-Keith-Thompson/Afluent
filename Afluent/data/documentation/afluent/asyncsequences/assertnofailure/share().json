{"sections":[],"metadata":{"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","title":"share()","extendedModule":"_Concurrency","remoteSource":{"fileName":"ShareSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareSequence.swift#L110"},"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5shareAA22AsyncBroadcastSequenceVyxGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO15AssertNoFailureV","symbolKind":"method"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations"]]},"kind":"symbol","identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/share()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"share","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncBroadcastSequence"},{"type":"text","text":" that multicasts elements to multiple consumers concurrently."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"This operator is an alias for ","type":"text"},{"code":"broadcast()","type":"codeVoice"},{"text":", providing identical behavior.","type":"text"},{"text":" ","type":"text"},{"text":"It enables multicasting of values from the upstream sequence to multiple","type":"text"},{"text":" ","type":"text"},{"text":"concurrent consumers, so each consumer receives the same elements without","type":"text"},{"text":" ","type":"text"},{"text":"duplicating upstream work.","type":"text"}],"type":"paragraph"},{"text":"Example","level":2,"type":"heading","anchor":"Example"},{"code":["\/\/ Create an AsyncStream that emits 3 random values between 1 and 5","let upstream = AsyncStream<Int> { continuation in","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.finish()","}","","let sharedSequence = upstream.share()","","async let firstConsumer = Task {","    for await value in sharedSequence {","        print(\"First consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","async let secondConsumer = Task {","    for await value in sharedSequence {","        print(\"Second consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","\/\/ Both consumers receive the same values produced by the upstream AsyncStream.","await firstConsumer.value","await secondConsumer.value"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/assertnofailure\/share()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/share()":{"abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/share()","title":"share()","kind":"symbol","role":"symbol","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/share()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"share"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","title":"AsyncSequences.AssertNoFailure","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"AssertNoFailure","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AssertNoFailure","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"kind":"symbol","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncbroadcastsequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"title":"AsyncBroadcastSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/AsyncSequence-Implementations":{"title":"AsyncSequence Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asyncsequence-implementations","role":"collectionGroup"}}}