{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:)"]}],"sections":[],"kind":"symbol","metadata":{"extendedModule":"_Concurrency","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Strategy","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"HandleEvents","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"roleHeading":"Instance Method","title":"shareFromCache(_:strategy:keys:)","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE14shareFromCache_8strategy4keysAA22AsyncBroadcastSequenceVyAA0I9SequencesO12HandleEventsVy_xGGAA0ikF0C_AQ8StrategyOqd__tSHRd__lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO15AssertNoFailureV","role":"symbol","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"remoteSource":{"fileName":"ShareFromCacheSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareFromCacheSequence.swift#L108"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/shareFromCache(_:strategy:keys:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"cache","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","text":"AsyncSequenceCache","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","text":"AsyncSequenceCache","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO","text":"Strategy","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache\/Strategy"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k0","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The cache from which to share data."}],"type":"paragraph"}],"name":"cache"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The caching strategy to use."}]}],"name":"strategy"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An asynchronous broadcast sequence that shares the underlying sequenceâ€™s values according to the cache and strategy."}]}]},{"kind":"content","content":[{"anchor":"Example","text":"Example","level":2,"type":"heading"},{"syntax":"swift","code":["struct UserID: Hashable { let id: Int }","","let cache = AsyncSequenceCache()","let userSequence = fetchUserData(userId: 42) \/\/ Async sequence fetching user data","let sharedUserSequence = userSequence.shareFromCache(cache, strategy: .cacheUntilCompletionOrCancellation, keys: UserID(id: 42))","","Task {","    for await user in sharedUserSequence {","        print(\"User data: \\(user)\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here, the cache key "},{"type":"codeVoice","code":"UserID(id: 42)"},{"type":"text","text":" uniquely identifies the cached shared sequence,"},{"type":"text","text":" "},{"type":"text","text":"ensuring that requests for the same user share the underlying async sequence."}],"type":"paragraph"},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"This operator should generally be placed at the end of an operator chain. Any operators applied after ","type":"text"},{"code":"shareFromCache","type":"codeVoice"},{"text":" will not be shared and may result in duplicated work or side effects.","type":"text"}]}],"type":"aside"}]}],"abstract":[{"text":"This operator enables sharing and caching of results from an async sequence","type":"text"},{"text":" ","type":"text"},{"text":"based on a specified caching strategy and a single hashable cache key.","type":"text"},{"text":" ","type":"text"},{"text":"The hashable key uniquely identifies the shared sequence in the cache.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure"]]},"references":{"doc://Afluent/documentation/Afluent/AsyncSequenceCache":{"abstract":[{"text":"A thread-safe cache for sharing async sequences by integer key.","type":"text"},{"text":" ","type":"text"},{"text":"This cache is commonly used with the ","type":"text"},{"code":"shareFromCache","type":"codeVoice"},{"text":" operator to reuse sequences.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceCache"}],"title":"AsyncSequenceCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequenceCache"}],"url":"\/documentation\/afluent\/asyncsequencecache","kind":"symbol","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AssertNoFailure"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AssertNoFailure"}],"title":"AsyncSequences.AssertNoFailure","url":"\/documentation\/afluent\/asyncsequences\/assertnofailure"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure/shareFromCache(_:strategy:keys:)":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure\/shareFromCache(_:strategy:keys:)","kind":"symbol","role":"symbol","title":"shareFromCache(_:strategy:keys:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AsyncSequenceCache","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Strategy","preciseIdentifier":"s:7Afluent18AsyncSequenceCacheC8StrategyO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"HandleEvents","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"This operator enables sharing and caching of results from an async sequence","type":"text"},{"text":" ","type":"text"},{"text":"based on a specified caching strategy and a single hashable cache key.","type":"text"},{"text":" ","type":"text"},{"text":"The hashable key uniquely identifies the shared sequence in the cache.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/HandleEvents":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HandleEvents"}],"kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/handleevents","title":"AsyncSequences.HandleEvents","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"type":"codeVoice","code":"AsyncSequence\/handleEvents(receiveMakeIterator:receiveNext:receiveOutput:receiveError:receiveComplete:receiveCancel:)"},{"type":"text","text":" operator."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HandleEvents"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequenceCache/Strategy":{"type":"topic","url":"\/documentation\/afluent\/asyncsequencecache\/strategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequenceCache\/Strategy","abstract":[{"type":"codeVoice","code":"Strategy"},{"type":"text","text":" represents the available caching strategies for the "},{"type":"codeVoice","code":"AsyncSequenceCache"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These strategies determine how long the cache retains the async sequences."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Strategy","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"AsyncSequenceCache.Strategy","navigatorTitle":[{"text":"Strategy","kind":"identifier"}]}}}