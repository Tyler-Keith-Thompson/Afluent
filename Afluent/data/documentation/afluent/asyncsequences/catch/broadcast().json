{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/broadcast()"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/AsyncSequence-Implementations"]]},"metadata":{"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","text":"AsyncBroadcastSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE9broadcastAA22AsyncBroadcastSequenceVyxGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO5CatchV","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareSequence.swift#L66","fileName":"ShareSequence.swift"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"roleHeading":"Instance Method","extendedModule":"_Concurrency","title":"broadcast()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier","text":"AsyncBroadcastSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"AsyncBroadcastSequence","type":"codeVoice"},{"text":" that multicasts elements to multiple consumers concurrently.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This operator enables multicasting of values from the upstream sequence to","type":"text"},{"text":" ","type":"text"},{"text":"multiple consumers that iterate concurrently. Each consumer sees the same","type":"text"},{"text":" ","type":"text"},{"text":"sequence of elements, and elements are only fetched once from the upstream","type":"text"},{"text":" ","type":"text"},{"text":"sequence.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"broadcast"},{"type":"text","text":" creates a new shared sequence that manages buffering and"},{"type":"text","text":" "},{"type":"text","text":"distribution of elements to all active iterators."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"broadcast"},{"type":"text","text":" and "},{"type":"codeVoice","code":"share"},{"type":"text","text":" operators are functionally equivalent and"},{"type":"text","text":" "},{"type":"text","text":"can be used interchangeably."}],"type":"paragraph"},{"level":2,"text":"Example","anchor":"Example","type":"heading"},{"syntax":"swift","code":["\/\/ Create an AsyncStream that emits 3 random values between 1 and 5","let upstream = AsyncStream<Int> { continuation in","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.finish()","}","","let sharedSequence = upstream.broadcast()","","async let firstConsumer = Task {","    for await value in sharedSequence {","        print(\"First consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","async let secondConsumer = Task {","    for await value in sharedSequence {","        print(\"Second consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","\/\/ Both consumers receive the same values produced by the upstream AsyncStream.","await firstConsumer.value","await secondConsumer.value"],"type":"codeListing"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/catch\/broadcast()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"kind":"symbol","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncbroadcastsequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"title":"AsyncBroadcastSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Catch/AsyncSequence-Implementations":{"kind":"article","url":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/AsyncSequence-Implementations","abstract":[],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Catch/broadcast()":{"title":"broadcast()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/broadcast()","abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"url":"\/documentation\/afluent\/asyncsequences\/catch\/broadcast()","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]}},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Catch":{"title":"AsyncSequences.Catch","abstract":[{"type":"text","text":"Used as the implementation detail for the catch\/tryCatch sequence operators."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch","url":"\/documentation\/afluent\/asyncsequences\/catch","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Catch"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Catch"}]}}}