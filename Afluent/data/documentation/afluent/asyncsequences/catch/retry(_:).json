{"abstract":[{"text":"Retries the upstream ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" up to a specified number of times."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/AsyncSequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"retries","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":" = 1) -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"text":".","kind":"text"},{"text":"Retry","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"retries","content":[{"inlineContent":[{"text":"The maximum number of times to retry the upstream, defaulting to 1.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" that emits the same output as the upstream but retries on failure up to the specified number of times.","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method returns an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" which retries the upstream sequence on any failure, up to the specified number of retries."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not all "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"s can be retried. For example, "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" cannot be retried on their own."}]},{"text":"Example","anchor":"Example","type":"heading","level":2},{"type":"codeListing","code":["actor CallCounter {","    private(set) var count = 0","    func increment() -> Int {","        count += 1","        return count","    }","}","","struct ExampleError: Error {}","","let counter = CallCounter()","","let sequence = DeferredTask {","    let attempt = await counter.increment()","    if attempt < 2 {","        throw ExampleError()","    }","    return 100","}",".toAsyncSequence()",".retry(3)","","for try await value in sequence {","    print(value) \/\/ prints 100 after retries","}"],"syntax":"swift"},{"name":"Important","style":"important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations."}],"type":"paragraph"}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"AsyncStream","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" are notable sequences which cannot be retried on their own.","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/retry(_:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retryyAA14AsyncSequencesO5RetryCy_xAA0G15ByCountStrategyCGSuF::SYNTHESIZED::s:7Afluent14AsyncSequencesO5CatchV","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"extendedModule":"_Concurrency","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"Retry","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"text":">","kind":"text"}],"title":"retry(_:)","role":"symbol","remoteSource":{"fileName":"RetrySequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L312"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"kind":"symbol","sections":[],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Catch/retry(_:)":{"title":"retry(_:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/retry(_:)","url":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Retry","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times."}],"kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Retry":{"kind":"symbol","navigatorTitle":[{"text":"Retry","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry","role":"symbol","abstract":[],"title":"AsyncSequences.Retry","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Retry","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/retry"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Catch/AsyncSequence-Implementations":{"kind":"article","url":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch\/AsyncSequence-Implementations","abstract":[],"type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Catch":{"title":"AsyncSequences.Catch","abstract":[{"type":"text","text":"Used as the implementation detail for the catch\/tryCatch sequence operators."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Catch","url":"\/documentation\/afluent\/asyncsequences\/catch","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Catch"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Catch"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"title":"RetryByCountStrategy","type":"topic","url":"\/documentation\/afluent\/retrybycountstrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"role":"symbol","kind":"symbol"}}}