{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"text":", ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" immediately execute their passed closure to start yielding and buffering values."},{"type":"text","text":" "},{"type":"text","text":"By wrapping either of these in a "},{"type":"codeVoice","code":"Deferred"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}]},{"type":"codeListing","syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"anchor":"Structures","generated":true,"title":"Structures"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"anchor":"Initializers","generated":true,"title":"Initializers"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"anchor":"Instance-Methods","generated":true,"title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"anchor":"Type-Aliases","generated":true,"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"metadata":{"externalID":"s:7Afluent14AsyncSequencesO8DeferredV","symbolKind":"struct","roleHeading":"Structure","extendedModule":"Afluent","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"role":"symbol","title":"AsyncSequences.Deferred","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35","fileName":"Deferred.swift"},"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"modules":[{"name":"Afluent"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"type":"topic","role":"symbol","title":"makeAsyncIterator()","abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","kind":"typeIdentifier","text":"Deferred"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":">."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","kind":"typeIdentifier","text":"AsyncIterator"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"},"doc://Afluent/Sci":{"identifier":"doc:\/\/Afluent\/Sci","type":"unresolvable","title":"_Concurrency.AsyncSequence"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AsyncSequences.Deferred","url":"\/documentation\/afluent\/asyncsequences\/deferred","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncIterator","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"abstract":[],"title":"AsyncSequences.Deferred.AsyncIterator","role":"symbol"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","title":"AsyncSequences.Deferred.Element","abstract":[],"navigatorTitle":[{"text":"Element","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","kind":"symbol","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"type":"topic","title":"init(upstream:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"upstream","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"title":"AsyncSequence Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","abstract":[],"type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations"}}}