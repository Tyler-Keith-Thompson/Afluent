{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"topicSections":[{"anchor":"Structures","title":"Structures","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"anchor":"Initializers","title":"Initializers"},{"generated":true,"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"anchor":"Type-Aliases","title":"Type Aliases"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"},{"text":", ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","preciseIdentifier":"s:Sci","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"text":" ","type":"text"},{"text":"Notably, ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"text":"By wrapping either of these in a ","type":"text"},{"type":"codeVoice","code":"Deferred"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"type":"paragraph","inlineContent":[{"text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence.","type":"text"},{"text":" ","type":"text"},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"metadata":{"title":"AsyncSequences.Deferred","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","modules":[{"name":"Afluent"}],"extendedModule":"Afluent","roleHeading":"Structure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}]},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"kind":"symbol","title":"AsyncSequences.Deferred.AsyncIterator","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AsyncIterator","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","navigatorTitle":[{"kind":"identifier","text":"AsyncIterator"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"title":"AsyncSequence Implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","kind":"article","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations"},"doc://Afluent/documentation/Afluent":{"abstract":[],"title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/afluent"},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"title":"AsyncSequences.Deferred.Element","abstract":[],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","navigatorTitle":[{"kind":"identifier","text":"Element"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"title":"makeAsyncIterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","kind":"symbol","role":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":">.","kind":"text"},{"text":"AsyncIterator","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","title":"AsyncSequences","type":"topic","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"upstream"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"title":"init(upstream:)"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"type":"topic","title":"AsyncSequences.Deferred","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","url":"\/documentation\/afluent\/asyncsequences\/deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}]},"doc://Afluent/Sci":{"title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci","type":"unresolvable"}}}