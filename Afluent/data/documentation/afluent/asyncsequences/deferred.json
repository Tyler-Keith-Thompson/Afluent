{"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"text":" ","type":"text"},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"text":"By wrapping either of these in a ","type":"text"},{"type":"codeVoice","code":"Deferred"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}],"type":"paragraph"},{"type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"syntax":"swift"}],"kind":"content"}],"metadata":{"role":"symbol","modules":[{"name":"Afluent"}],"symbolKind":"struct","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"externalID":"s:7Afluent14AsyncSequencesO8DeferredV","extendedModule":"Afluent","title":"AsyncSequences.Deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"roleHeading":"Structure"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"kind":"symbol","abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"topicSections":[{"generated":true,"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"anchor":"Structures"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"generated":true,"anchor":"Initializers","title":"Initializers"},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"generated":true,"anchor":"Type-Aliases","title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"anchor":"Default-Implementations"}],"sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","interfaceLanguage":"swift"},"references":{"doc://Afluent/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","type":"topic","kind":"article","role":"collectionGroup","title":"AsyncSequence Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"title":"init(upstream:)","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","abstract":[{"text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence","type":"text"},{"text":" ","type":"text"},{"text":"that will later be called at the time of iteration.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"upstream","kind":"externalParam"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"url":"\/documentation\/afluent\/asyncsequences\/deferred","kind":"symbol","title":"AsyncSequences.Deferred","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"title":"AsyncSequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"title":"Afluent","role":"collection","type":"topic","url":"\/documentation\/afluent","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","abstract":[],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Deferred","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"AsyncIterator","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV"}],"type":"topic","title":"makeAsyncIterator()"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"kind":"symbol","title":"AsyncSequences.Deferred.Element"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncIterator"}],"title":"AsyncSequences.Deferred.AsyncIterator","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}]},"doc://Afluent/Sci":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/Sci","title":"_Concurrency.AsyncSequence"}}}