{"metadata":{"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"extendedModule":"Afluent","title":"AsyncSequences.Deferred","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35","fileName":"Deferred.swift"},"role":"symbol","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","symbolKind":"struct","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"modules":[{"name":"Afluent"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Upstream"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"},{"text":", ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"text":" ","type":"text"},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By wrapping either of these in a "},{"type":"codeVoice","code":"Deferred"},{"text":", you can define the creation of an asynchronous sequence without executing it immediately.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}]},{"type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"syntax":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"sections":[],"kind":"symbol","topicSections":[{"anchor":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"generated":true,"title":"Structures"},{"anchor":"Initializers","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"anchor":"Instance-Methods","generated":true,"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"generated":true,"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"anchor":"Type-Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Element"}],"kind":"symbol","title":"AsyncSequences.Deferred.Element","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","abstract":[],"title":"makeAsyncIterator()","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeAsyncIterator","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator","kind":"typeIdentifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"text":": (() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":"))","kind":"text"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"text":" ","type":"text"},{"text":"that will later be called at the time of iteration.","type":"text"}],"role":"symbol","kind":"symbol","title":"init(upstream:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","kind":"article","title":"AsyncSequence Implementations","type":"topic","abstract":[],"role":"collectionGroup"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent":{"type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","kind":"symbol","abstract":[],"title":"Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncIterator","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","abstract":[],"role":"symbol","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"kind":"symbol","title":"AsyncSequences.Deferred.AsyncIterator","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"},"doc://Afluent/Sci":{"identifier":"doc:\/\/Afluent\/Sci","title":"_Concurrency.AsyncSequence","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"title":"AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"type":"topic"}}}