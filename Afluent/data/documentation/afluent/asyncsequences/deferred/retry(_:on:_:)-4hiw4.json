{"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times only when an error can be cast to a specific type."}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-4hiw4"]}],"metadata":{"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetryAfterFlatMappingSequence.swift#L440","fileName":"RetryAfterFlatMappingSequence.swift"},"title":"retry(_:on:_:)","externalID":"s:Sci7Afluents8SendableRzrlE5retry_2on_AA14AsyncSequencesO27RetryOnCastAfterFlatMappingCy_xqd_0_qd__AA0G15ByCountStrategyCGSu_qd_0_mqd__qd_0_YaYbKctsABRd__SciRd__s5ErrorRd_0_sAB7ElementRpzAMQyd__ANRSr0_lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO8DeferredV","symbolKind":"method","extendedModule":"_Concurrency","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"D"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO27RetryOnCastAfterFlatMappingC","text":"RetryOnCastAfterFlatMapping"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"D"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"retries"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":" = 1, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO27RetryOnCastAfterFlatMappingC","kind":"typeIdentifier","text":"RetryOnCastAfterFlatMapping","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnCastAfterFlatMapping"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier","text":"RetryByCountStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sci","kind":"typeIdentifier","text":"AsyncSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The maximum retry attempts."}],"type":"paragraph"}],"name":"retries"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The error type to match for retry and transformation."}]}],"name":"error"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The transformation executed before retrying when the cast succeeds, fully consuming its sequence.","type":"text"}]}],"name":"transform"}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that retries on errors castable to the specified type.","type":"text"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The transformation closure executes "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" each retry if the error is of the specified type, allowing side effects such as refreshing tokens."},{"type":"text","text":" "},{"type":"text","text":"The returned sequence is always fully consumed before retrying and its elements are ignored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows retrying only on errors castable to a given type, performing asynchronous side effects beforehand."}]},{"level":2,"type":"heading","text":"Example: Retry on error cast with side effect","anchor":"Example-Retry-on-error-cast-with-side-effect"},{"syntax":"swift","type":"codeListing","code":["let retried = myAsyncSequence.retry(3, on: MyError.self) { error in","    DeferredTask {","        try await refreshAuthToken()","    }","    .toAsyncSequence() \/\/ Fully consumed before retry","}"]}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/retry(_:on:_:)-4hiw4","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AsyncSequences.Deferred","url":"\/documentation\/afluent\/asyncsequences\/deferred","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOnCastAfterFlatMapping":{"role":"symbol","navigatorTitle":[{"text":"RetryOnCastAfterFlatMapping","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnCastAfterFlatMapping","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping","title":"AsyncSequences.RetryOnCastAfterFlatMapping","type":"topic","abstract":[],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryOnCastAfterFlatMapping","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/retry(_:on:_:)-4hiw4":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/retry(_:on:_:)-4hiw4","abstract":[{"text":"Retries the upstream ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" up to a specified number of times only when an error can be cast to a specific type.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":".Type, (","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RetryOnCastAfterFlatMapping","preciseIdentifier":"s:7Afluent14AsyncSequencesO27RetryOnCastAfterFlatMappingC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-4hiw4","title":"retry(_:on:_:)"}}}