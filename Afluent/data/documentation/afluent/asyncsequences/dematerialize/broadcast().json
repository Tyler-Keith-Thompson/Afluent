{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize"]]},"abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncBroadcastSequence"},{"type":"text","text":" that multicasts elements to multiple consumers concurrently."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"This operator enables multicasting of values from the upstream sequence to","type":"text"},{"text":" ","type":"text"},{"text":"multiple consumers that iterate concurrently. Each consumer sees the same","type":"text"},{"text":" ","type":"text"},{"text":"sequence of elements, and elements are only fetched once from the upstream","type":"text"},{"text":" ","type":"text"},{"text":"sequence.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"broadcast","type":"codeVoice"},{"text":" creates a new shared sequence that manages buffering and","type":"text"},{"text":" ","type":"text"},{"text":"distribution of elements to all active iterators.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"broadcast"},{"type":"text","text":" and "},{"type":"codeVoice","code":"share"},{"type":"text","text":" operators are functionally equivalent and"},{"type":"text","text":" "},{"type":"text","text":"can be used interchangeably."}],"type":"paragraph"},{"level":2,"anchor":"Example","type":"heading","text":"Example"},{"syntax":"swift","code":["\/\/ Create an AsyncStream that emits 3 random values between 1 and 5","let upstream = AsyncStream<Int> { continuation in","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.finish()","}","","let sharedSequence = upstream.broadcast()","","async let firstConsumer = Task {","    for await value in sharedSequence {","        print(\"First consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","async let secondConsumer = Task {","    for await value in sharedSequence {","        print(\"Second consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","\/\/ Both consumers receive the same values produced by the upstream AsyncStream.","await firstConsumer.value","await secondConsumer.value"],"type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/broadcast()"},"kind":"symbol","sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"extendedModule":"_Concurrency","role":"symbol","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE9broadcastAA22AsyncBroadcastSequenceVyxGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO13DematerializeV","title":"broadcast()","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"remoteSource":{"fileName":"ShareSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareSequence.swift#L66"},"roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/dematerialize\/broadcast()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize/broadcast()":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/broadcast()","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/dematerialize\/broadcast()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"text":"Returns a sequence that multicasts elements to multiple concurrent consumers.","type":"text"}],"title":"broadcast()"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence","abstract":[{"type":"text","text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize":{"navigatorTitle":[{"text":"Dematerialize","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/dematerialize","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dematerialize","kind":"identifier"}],"title":"AsyncSequences.Dematerialize","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","abstract":[{"text":"Used as the implementation detail for the ","type":"text"},{"code":"AsyncSequence\/dematerialize()","type":"codeVoice"},{"type":"text","text":" operator."}],"role":"symbol"}}}