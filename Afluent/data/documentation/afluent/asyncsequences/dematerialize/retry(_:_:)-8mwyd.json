{"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-8mwyd"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/AsyncSequence-Implementations"]]},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/retry(_:_:)-8mwyd"},"abstract":[{"text":"Retries the upstream ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" using the provided retry strategy.","type":"text"}],"metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"roleHeading":"Instance Method","role":"symbol","externalID":"s:Sci7Afluents8SendableRzrlE5retryyAA14AsyncSequencesO21RetryAfterFlatMappingCy_xqd__qd_0_Gqd_0__qd__s5Error_pYaYbKctsABRd__SciRd__AA0F8StrategyRd_0_sAB7ElementRpzAKQyd__ALRSr0_lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO13DematerializeV","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"symbolKind":"method","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetryAfterFlatMappingSequence.swift#L315","fileName":"RetryAfterFlatMappingSequence.swift"},"extendedModule":"_Concurrency","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"retry"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"D"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", (any "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"RetryAfterFlatMapping","preciseIdentifier":"s:7Afluent14AsyncSequencesO21RetryAfterFlatMappingC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":">"}],"title":"retry(_:_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"strategy","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryAfterFlatMapping","text":"RetryAfterFlatMapping","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO21RetryAfterFlatMappingC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","text":"RetryStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent13RetryStrategyP"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":" == ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"}]}]},{"parameters":[{"name":"strategy","content":[{"type":"paragraph","inlineContent":[{"text":"The retry strategy to use.","type":"text"}]}]},{"name":"transform","content":[{"inlineContent":[{"type":"text","text":"An async closure that takes the error from the upstream and returns a new "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" to be fully consumed for side effects before retrying."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" that emits the same elements as the upstream but retries on failure using the given strategy,","type":"text"},{"text":" ","type":"text"},{"text":"performing the transformation before each retry.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The provided transformation closure is executed ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"text":" each retry, allowing for side effects such as refreshing tokens or resetting state.","type":"text"},{"text":" ","type":"text"},{"text":"The closure’s returned ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" is always fully consumed before the retry occurs, but its elements are ignored.","type":"text"},{"text":" ","type":"text"},{"text":"The element type of the returned sequence does not need to match the upstream’s element type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is useful for performing asynchronous side effects like credential refresh before retrying the main sequence."}]},{"text":"Example: Refreshing an access token on a 401 HTTP error before retrying the main request","type":"heading","level":2,"anchor":"Example-Refreshing-an-access-token-on-a-401-HTTP-error-before-retrying-the-main-request"},{"code":["let mainRequest = URLSession.shared.dataTaskAsyncSequence(for: URLRequest(url: URL(string: \"https:\/\/api.example.com\/data\")!))","","let retriedSequence = mainRequest.retry(.byCount(3)) { error in","    \/\/ If error is 401 Unauthorized, refresh token before retrying","    DeferredTask {","        if let urlError = error as? URLError, urlError.code == .userAuthenticationRequired {","            try await refreshAccessToken()","        }","    }","    .toAsyncSequence() \/\/ This sequence is fully consumed before retrying, ignoring its elements","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","role":"symbol","title":"RetryStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrystrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize":{"abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"code":"AsyncSequence\/dematerialize()","type":"codeVoice"},{"type":"text","text":" operator."}],"navigatorTitle":[{"kind":"identifier","text":"Dematerialize"}],"url":"\/documentation\/afluent\/asyncsequences\/dematerialize","title":"AsyncSequences.Dematerialize","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dematerialize"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize/AsyncSequence-Implementations":{"abstract":[],"url":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asyncsequence-implementations","title":"AsyncSequence Implementations","kind":"article","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/AsyncSequence-Implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryAfterFlatMapping":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryAfterFlatMapping","role":"symbol","title":"AsyncSequences.RetryAfterFlatMapping","abstract":[],"navigatorTitle":[{"text":"RetryAfterFlatMapping","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryAfterFlatMapping","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping"},"doc://Afluent/documentation/Afluent/AsyncSequences/Dematerialize/retry(_:_:)-8mwyd":{"abstract":[{"text":"Retries the upstream ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" using the provided retry strategy.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RetryAfterFlatMapping","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO21RetryAfterFlatMappingC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Dematerialize\/retry(_:_:)-8mwyd","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"retry(_:_:)","url":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-8mwyd","type":"topic","role":"symbol","kind":"symbol"}}}