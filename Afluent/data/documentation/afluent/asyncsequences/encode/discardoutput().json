{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode\/discardOutput()"},"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/encode\/discardoutput()"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"discardOutput()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardOutput"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV","text":"AsyncMapSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"externalID":"s:Sci7Afluents8SendableRzrlE13discardOutput12_Concurrency16AsyncMapSequenceVyxytGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO6EncodeV","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"symbolKind":"method","extendedModule":"_Concurrency","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/DiscardOutputSequence.swift#L21","fileName":"DiscardOutputSequence.swift"}},"sections":[],"abstract":[{"text":"Transforms each output value from the upstream sequence into ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode\/AsyncSequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardOutput"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncMapSequence","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this to ignore the payload of each element, but still receive an event for every value.","type":"text"}]},{"level":2,"type":"heading","anchor":"Example","text":"Example"},{"type":"codeListing","syntax":null,"code":["for await _ in Just(1).discardOutput() {","    \/\/ Loop runs once for each element, but value is always Void","}"]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Encode/discardOutput()":{"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode\/discardOutput()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardOutput"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV","kind":"typeIdentifier","text":"AsyncMapSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/asyncsequences\/encode\/discardoutput()","title":"discardOutput()","abstract":[{"type":"text","text":"Transforms each output value from the upstream sequence into "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Encode/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode\/AsyncSequence-Implementations","kind":"article","title":"AsyncSequence Implementations","role":"collectionGroup","abstract":[],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/encode\/asyncsequence-implementations"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Encode":{"navigatorTitle":[{"kind":"identifier","text":"Encode"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Encode"}],"role":"symbol","kind":"symbol","title":"AsyncSequences.Encode","url":"\/documentation\/afluent\/asyncsequences\/encode","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Encode","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"code":"AsyncSequence\/encode(encoder:)","type":"codeVoice"},{"type":"text","text":" operator."}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]}}}