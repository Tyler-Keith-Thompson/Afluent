{"kind":"symbol","sections":[],"abstract":[{"text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/just\/assertnofailure()"]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just\/AsyncSequence-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just\/assertNoFailure()"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"extendedModule":"_Concurrency","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","text":"AssertNoFailure","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"assertNoFailure()","symbolKind":"method","externalID":"s:Sci7Afluents8SendableRzrlE15assertNoFailureAA14AsyncSequencesO06AssertdE0Vy_xGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO4JustV","remoteSource":{"fileName":"AssertNoFailureSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/AssertNoFailureSequence.swift#L55"},"role":"symbol","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"roleHeading":"Instance Method"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","kind":"typeIdentifier","text":"AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this to assert that a sequence is infallible, propagating values and terminating with a fatal error if any error occurs.","type":"text"}]},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(2)","    continuation.finish()","}","for try await value in numbers.assertNoFailure() {","    print(value)","}"]}],"kind":"content"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","title":"AsyncSequences.AssertNoFailure","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"AssertNoFailure","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AssertNoFailure","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Just/assertNoFailure()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","text":"AssertNoFailure","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values."}],"url":"\/documentation\/afluent\/asyncsequences\/just\/assertnofailure()","title":"assertNoFailure()","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just\/assertNoFailure()"},"doc://Afluent/documentation/Afluent/AsyncSequences/Just/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just\/AsyncSequence-Implementations","role":"collectionGroup","abstract":[],"title":"AsyncSequence Implementations","kind":"article","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/just\/asyncsequence-implementations"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Just":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Just","role":"symbol","abstract":[{"text":"An async sequence that emits a single specified element and then completes.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"title":"AsyncSequences.Just","kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/just","navigatorTitle":[{"text":"Just","kind":"identifier"}]}}}