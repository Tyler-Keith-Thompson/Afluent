{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn\/assertNoFailure()"},"metadata":{"roleHeading":"Instance Method","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"extendedModule":"_Concurrency","externalID":"s:Sci7Afluents8SendableRzrlE15assertNoFailureAA14AsyncSequencesO06AssertdE0Vy_xGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO8OutputInV","symbolKind":"method","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","kind":"typeIdentifier","text":"AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"remoteSource":{"fileName":"AssertNoFailureSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/AssertNoFailureSequence.swift#L55"},"title":"assertNoFailure()"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","kind":"typeIdentifier","text":"AssertNoFailure","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this to assert that a sequence is infallible, propagating values and terminating with a fatal error if any error occurs."}]},{"level":2,"text":"Example","anchor":"Example","type":"heading"},{"syntax":null,"type":"codeListing","code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(2)","    continuation.finish()","}","for try await value in numbers.assertNoFailure() {","    print(value)","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn\/AsyncSequence-Implementations"]]},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/outputin\/assertnofailure()"]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/OutputIn/assertNoFailure()":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","text":"AssertNoFailure","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/outputin\/assertnofailure()","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn\/assertNoFailure()","kind":"symbol","title":"assertNoFailure()","abstract":[{"type":"text","text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values."}]},"doc://Afluent/documentation/Afluent/AsyncSequences/OutputIn":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OutputIn","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/outputin","title":"AsyncSequences.OutputIn","role":"symbol","abstract":[],"navigatorTitle":[{"text":"OutputIn","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]},"doc://Afluent/documentation/Afluent/AsyncSequences/OutputIn/AsyncSequence-Implementations":{"kind":"article","type":"topic","title":"AsyncSequence Implementations","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/OutputIn\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/outputin\/asyncsequence-implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AssertNoFailure","kind":"identifier"}],"title":"AsyncSequences.AssertNoFailure","role":"symbol","navigatorTitle":[{"text":"AssertNoFailure","kind":"identifier"}],"abstract":[{"text":"An async sequence that raises a fatal error if its upstream sequence throws.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","type":"topic","kind":"symbol"}}}