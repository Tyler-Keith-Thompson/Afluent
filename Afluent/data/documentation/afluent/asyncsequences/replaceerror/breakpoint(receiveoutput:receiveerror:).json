{"metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")?) -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"HandleEvents","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"_Concurrency","title":"breakpoint(receiveOutput:receiveError:)","symbolKind":"method","role":"symbol","roleHeading":"Instance Method","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"externalID":"s:Sci7Afluents8SendableRzrlE10breakpoint13receiveOutput0D5ErrorAA14AsyncSequencesO12HandleEventsVy_xGSb7ElementQzYaYbKcSg_Sbs0F0_pYaYbKcSgtF::SYNTHESIZED::s:7Afluent14AsyncSequencesO12ReplaceErrorV","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/BreakpointSequence.swift#L31","fileName":"BreakpointSequence.swift"}},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/breakpoint(receiveOutput:receiveError:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/replaceerror\/breakpoint(receiveoutput:receiveerror:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")? = nil, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")? = nil) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"Closure called with each output. Return ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" to trigger a breakpoint. Default is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"receiveOutput"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Closure called with each error. Return ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" to trigger a breakpoint. Default is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"receiveError"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"Use this to pause execution in a debugger when a specified output or error condition is met.","type":"text"},{"text":" ","type":"text"},{"text":"If the provided closure returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", a ","type":"text"},{"code":"SIGTRAP","type":"codeVoice"},{"text":" signal is raised.","type":"text"}],"type":"paragraph"},{"anchor":"Example","text":"Example","type":"heading","level":2},{"code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(42)","    continuation.finish()","}","for try await value in numbers.breakpoint(receiveOutput: { $0 == 42 }) {","    print(value)","}"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/AsyncSequence-Implementations"]]},"sections":[],"kind":"symbol","abstract":[{"text":"Introduces a conditional breakpoint into the async sequence.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError":{"type":"topic","title":"AsyncSequences.ReplaceError","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"type":"codeVoice","code":"AsyncSequence\/replaceError(with:)"},{"type":"text","text":" operator."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError","navigatorTitle":[{"text":"ReplaceError","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/replaceerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReplaceError","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError/breakpoint(receiveOutput:receiveError:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/breakpoint(receiveOutput:receiveError:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")?) -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"HandleEvents","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"breakpoint(receiveOutput:receiveError:)","url":"\/documentation\/afluent\/asyncsequences\/replaceerror\/breakpoint(receiveoutput:receiveerror:)","abstract":[{"type":"text","text":"Introduces a conditional breakpoint into the async sequence."}],"type":"topic","kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError/AsyncSequence-Implementations":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asyncsequence-implementations","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/HandleEvents":{"url":"\/documentation\/afluent\/asyncsequences\/handleevents","type":"topic","title":"AsyncSequences.HandleEvents","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","role":"symbol","abstract":[{"text":"Used as the implementation detail for the ","type":"text"},{"code":"AsyncSequence\/handleEvents(receiveMakeIterator:receiveNext:receiveOutput:receiveError:receiveComplete:receiveCancel:)","type":"codeVoice"},{"text":" operator.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HandleEvents","kind":"identifier"}],"navigatorTitle":[{"text":"HandleEvents","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"}}}