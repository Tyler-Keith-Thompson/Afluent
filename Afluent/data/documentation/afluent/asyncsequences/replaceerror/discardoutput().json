{"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"discardOutput","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncMapSequence","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this to ignore the payload of each element, but still receive an event for every value."}]},{"type":"heading","text":"Example","anchor":"Example","level":2},{"type":"codeListing","syntax":"swift","code":["for await _ in Just(1).discardOutput() {","    \/\/ Loop runs once for each element, but value is always Void","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/discardOutput()","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Transforms each output value from the upstream sequence into "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."}],"metadata":{"role":"symbol","remoteSource":{"fileName":"DiscardOutputSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/DiscardOutputSequence.swift#L21"},"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"externalID":"s:Sci7Afluents8SendableRzrlE13discardOutput12_Concurrency16AsyncMapSequenceVyxytGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO12ReplaceErrorV","symbolKind":"method","roleHeading":"Instance Method","title":"discardOutput()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardOutput"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV","text":"AsyncMapSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"extendedModule":"_Concurrency","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/AsyncSequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/replaceerror\/discardoutput()"]}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError/AsyncSequence-Implementations":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asyncsequence-implementations","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError":{"type":"topic","title":"AsyncSequences.ReplaceError","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"type":"codeVoice","code":"AsyncSequence\/replaceError(with:)"},{"type":"text","text":" operator."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError","navigatorTitle":[{"text":"ReplaceError","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/replaceerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReplaceError","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceError/discardOutput()":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceError\/discardOutput()","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/afluent\/asyncsequences\/replaceerror\/discardoutput()","kind":"symbol","abstract":[{"text":"Transforms each output value from the upstream sequence into ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"title":"discardOutput()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"discardOutput"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncMapSequence","preciseIdentifier":"s:12_Concurrency16AsyncMapSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]}}}