{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil\/breakpoint(receiveOutput:receiveError:)"},"metadata":{"remoteSource":{"fileName":"BreakpointSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/BreakpointSequence.swift#L31"},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sci7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","extendedModule":"_Concurrency","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"breakpoint(receiveOutput:receiveError:)","roleHeading":"Instance Method","externalID":"s:Sci7Afluents8SendableRzrlE10breakpoint13receiveOutput0D5ErrorAA14AsyncSequencesO12HandleEventsVy_xGSb7ElementQzYaYbKcSg_Sbs0F0_pYaYbKcSgtF::SYNTHESIZED::s:7Afluent14AsyncSequencesO10ReplaceNilV","role":"symbol"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil\/AsyncSequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/replacenil\/breakpoint(receiveoutput:receiveerror:)"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")? = nil, "},{"kind":"externalParam","text":"receiveError"},{"kind":"text","text":": ((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")? = nil) -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"HandleEvents","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"Closure called with each output. Return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" to trigger a breakpoint. Default is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"receiveOutput"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Closure called with each error. Return ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" to trigger a breakpoint. Default is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"receiveError"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this to pause execution in a debugger when a specified output or error condition is met.","type":"text"},{"text":" ","type":"text"},{"text":"If the provided closure returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", a ","type":"text"},{"type":"codeVoice","code":"SIGTRAP"},{"text":" signal is raised.","type":"text"}]},{"level":2,"text":"Example","type":"heading","anchor":"Example"},{"syntax":"swift","code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(42)","    continuation.finish()","}","for try await value in numbers.breakpoint(receiveOutput: { $0 == 42 }) {","    print(value)","}"],"type":"codeListing"}]}],"kind":"symbol","abstract":[{"text":"Introduces a conditional breakpoint into the async sequence.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceNil/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil\/AsyncSequence-Implementations","role":"collectionGroup","title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/replacenil\/asyncsequence-implementations","abstract":[],"kind":"article","type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/HandleEvents":{"url":"\/documentation\/afluent\/asyncsequences\/handleevents","type":"topic","title":"AsyncSequences.HandleEvents","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","role":"symbol","abstract":[{"text":"Used as the implementation detail for the ","type":"text"},{"code":"AsyncSequence\/handleEvents(receiveMakeIterator:receiveNext:receiveOutput:receiveError:receiveComplete:receiveCancel:)","type":"codeVoice"},{"text":" operator.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HandleEvents","kind":"identifier"}],"navigatorTitle":[{"text":"HandleEvents","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceNil":{"navigatorTitle":[{"kind":"identifier","text":"ReplaceNil"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReplaceNil"}],"role":"symbol","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"code":"AsyncSequence\/replaceNil(with:)","type":"codeVoice"},{"type":"text","text":" operator."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/replacenil","title":"AsyncSequences.ReplaceNil","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/ReplaceNil/breakpoint(receiveOutput:receiveError:)":{"role":"symbol","abstract":[{"text":"Introduces a conditional breakpoint into the async sequence.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sci7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/ReplaceNil\/breakpoint(receiveOutput:receiveError:)","title":"breakpoint(receiveOutput:receiveError:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/afluent\/asyncsequences\/replacenil\/breakpoint(receiveoutput:receiveerror:)"}}}