{"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/retry\/scan(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry\/scan(_:_:)"},"kind":"symbol","sections":[],"abstract":[{"text":"Accumulates state over the elements of an asynchronous sequence, emitting each intermediate accumulated value.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initialResult"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"nextPartialResult"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV","text":"Scan","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The initial accumulated value to start with.","type":"text"}],"type":"paragraph"}],"name":"initialResult"},{"content":[{"inlineContent":[{"text":"A closure that takes the current accumulated value and the next element from the upstream sequence,","type":"text"},{"text":" ","type":"text"},{"text":"and returns a new accumulated value asynchronously.","type":"text"}],"type":"paragraph"}],"name":"nextPartialResult"}],"kind":"parameters"},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"An asynchronous sequence that produces each intermediate accumulated result."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"This operator works similarly to Combineâ€™s ","type":"text"},{"code":"scan","type":"codeVoice"},{"text":" operator. It produces a sequence of values by repeatedly combining a running","type":"text"},{"text":" ","type":"text"},{"text":"accumulated value with each new element from the upstream async sequence using the provided closure.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This is useful for computing running totals, aggregating state, or applying stateful transformations over time.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Example","type":"heading","text":"Example"},{"inlineContent":[{"text":"The following example demonstrates accumulating a running sum over an asynchronous sequence of integers:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ An async sequence producing the numbers 1 through 5","let numbers = AsyncStream<Int> { continuation in","    for i in 1...5 {","        continuation.yield(i)","    }","    continuation.finish()","}","","\/\/ Use scan to accumulate a running sum","let runningSum = numbers.scan(0) { partialSum, nextNumber in","    return partialSum + nextNumber","}","","\/\/ Consume the running sums","Task {","    for try await sum in runningSum {","        print(sum) \/\/ Prints: 1, 3, 6, 10, 15","    }","}"],"type":"codeListing"}],"kind":"content"}],"metadata":{"externalID":"s:Sci7Afluents8SendableRzrlE4scanyAA14AsyncSequencesO4ScanVy_xqd__Gqd___qd__qd___7ElementQztYaYbKctsABRd__sAbJRQlF::SYNTHESIZED::s:7Afluent14AsyncSequencesO5RetryC","title":"scan(_:_:)","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scan","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:Sci7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Scan","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ScanSequence.swift#L81","fileName":"ScanSequence.swift"},"symbolKind":"method","extendedModule":"_Concurrency","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","roleHeading":"Instance Method"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"kind":"symbol","title":"AsyncSequences","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/scan","type":"topic","navigatorTitle":[{"text":"Scan","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","title":"AsyncSequences.Scan","abstract":[],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Retry/scan(_:_:)":{"url":"\/documentation\/afluent\/asyncsequences\/retry\/scan(_:_:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","abstract":[{"type":"text","text":"Accumulates state over the elements of an asynchronous sequence, emitting each intermediate accumulated value."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scan","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"Scan","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry\/scan(_:_:)","type":"topic","role":"symbol","title":"scan(_:_:)"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/Retry":{"abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry","title":"AsyncSequences.Retry","role":"symbol","navigatorTitle":[{"text":"Retry","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Retry","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/retry"}}}