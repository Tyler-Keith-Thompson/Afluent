{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping\/retry(_:on:)-66yvr"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping\/AsyncSequence-Implementations"]]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"retries","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":" = 1, ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnCast","text":"RetryOnCast","preciseIdentifier":"s:7Afluent14AsyncSequencesO11RetryOnCastC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"}]}]},{"parameters":[{"name":"retries","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to retry the upstream, defaulting to 1."}]}]},{"name":"error","content":[{"type":"paragraph","inlineContent":[{"text":"The specific error type that should trigger a retry if a cast succeeds.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that emits the same output as the upstream but retries on the specified error up to the specified number of times."}]}],"kind":"content"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method returns an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that retries the upstream only when an error can be cast to the specified error type, up to the given number of retries.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not all "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":"s can be retried. For example, "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" and "},{"code":"AsyncThrowingStream","type":"codeVoice"},{"type":"text","text":" cannot be retried on their own."}]},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["actor CallCounter {","    private(set) var count = 0","    func increment() -> Int {","        count += 1","        return count","    }","}","","enum NetworkError: Error {","    case timeout","    case unknown","}","","let counter = CallCounter()","","let sequence = DeferredTask {","    let attempt = await counter.increment()","    if attempt < 2 {","        throw NetworkError.timeout","    }","    return 55","}",".toAsyncSequence()",".retry(3, on: NetworkError.self)","","for try await value in sequence {","    print(value) \/\/ prints 55 after retry on NetworkError.timeout","}"]},{"style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations."}]}],"name":"Important"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" are notable sequences which cannot be retried on their own."}]}],"name":"Note"}],"kind":"content"}],"metadata":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},"symbolKind":"method","remoteSource":{"fileName":"RetrySequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L413"},"roleHeading":"Instance Method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"RetryOnCast","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO11RetryOnCastC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"text":">","kind":"text"}],"extendedModule":"_Concurrency","title":"retry(_:on:)","role":"symbol","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retry_2onAA14AsyncSequencesO11RetryOnCastCy_xqd__AA0H15ByCountStrategyCGSu_qd__mts5ErrorRd__lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO23RetryOnAfterFlatMappingC"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-66yvr"]}],"sections":[],"abstract":[{"text":"Retries the upstream ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" up to a specified number of times only when a specific error type is encountered.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOnAfterFlatMapping/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping\/AsyncSequence-Implementations","role":"collectionGroup","title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asyncsequence-implementations","abstract":[],"kind":"article","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOnCast":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryOnCast","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/retryoncast","title":"AsyncSequences.RetryOnCast","navigatorTitle":[{"text":"RetryOnCast","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnCast","abstract":[],"role":"symbol","type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"title":"RetryByCountStrategy","type":"topic","url":"\/documentation\/afluent\/retrybycountstrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOnAfterFlatMapping":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryOnAfterFlatMapping"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping","title":"AsyncSequences.RetryOnAfterFlatMapping","navigatorTitle":[{"kind":"identifier","text":"RetryOnAfterFlatMapping"}],"abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOnAfterFlatMapping/retry(_:on:)-66yvr":{"type":"topic","kind":"symbol","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times only when a specific error type is encountered."}],"title":"retry(_:on:)","url":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-66yvr","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOnAfterFlatMapping\/retry(_:on:)-66yvr","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"RetryOnCast","preciseIdentifier":"s:7Afluent14AsyncSequencesO11RetryOnCastC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"kind":"text","text":">"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"}}}