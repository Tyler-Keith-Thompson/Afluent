{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE9broadcastAA22AsyncBroadcastSequenceVyxGyF::SYNTHESIZED::s:7Afluent14AsyncSequencesO4ScanV","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ShareSequence.swift#L66","fileName":"ShareSequence.swift"},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"extendedModule":"_Concurrency","roleHeading":"Instance Method","title":"broadcast()","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"symbolKind":"method","role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"broadcast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncBroadcastSequence"},{"type":"text","text":" that multicasts elements to multiple consumers concurrently."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This operator enables multicasting of values from the upstream sequence to","type":"text"},{"text":" ","type":"text"},{"text":"multiple consumers that iterate concurrently. Each consumer sees the same","type":"text"},{"text":" ","type":"text"},{"text":"sequence of elements, and elements are only fetched once from the upstream","type":"text"},{"text":" ","type":"text"},{"text":"sequence.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"broadcast"},{"type":"text","text":" creates a new shared sequence that manages buffering and"},{"type":"text","text":" "},{"type":"text","text":"distribution of elements to all active iterators."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"broadcast","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"share","type":"codeVoice"},{"text":" operators are functionally equivalent and","type":"text"},{"text":" ","type":"text"},{"text":"can be used interchangeably.","type":"text"}]},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"type":"codeListing","code":["\/\/ Create an AsyncStream that emits 3 random values between 1 and 5","let upstream = AsyncStream<Int> { continuation in","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.yield(Int.random(in: 1...5))","    continuation.finish()","}","","let sharedSequence = upstream.broadcast()","","async let firstConsumer = Task {","    for await value in sharedSequence {","        print(\"First consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","async let secondConsumer = Task {","    for await value in sharedSequence {","        print(\"Second consumer received \\(value)\")","    }","    \/\/ prints 4, 3, 5 (or whatever random values were generated)","}","","\/\/ Both consumers receive the same values produced by the upstream AsyncStream.","await firstConsumer.value","await secondConsumer.value"],"syntax":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/broadcast()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/scan\/broadcast()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/AsyncSequence-Implementations"]]},"abstract":[{"type":"text","text":"Returns a sequence that multicasts elements to multiple concurrent consumers."}],"kind":"symbol","sections":[],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Scan":{"type":"topic","navigatorTitle":[{"text":"Scan","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","url":"\/documentation\/afluent\/asyncsequences\/scan","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"abstract":[],"kind":"symbol","role":"symbol","title":"AsyncSequences.Scan"},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan/AsyncSequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/scan\/asyncsequence-implementations","title":"AsyncSequence Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/AsyncSequence-Implementations","kind":"article"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan/broadcast()":{"title":"broadcast()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"broadcast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncBroadcastSequence","preciseIdentifier":"s:7Afluent22AsyncBroadcastSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/afluent\/asyncsequences\/scan\/broadcast()","abstract":[{"text":"Returns a sequence that multicasts elements to multiple concurrent consumers.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/broadcast()","type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncBroadcastSequence":{"title":"AsyncBroadcastSequence","abstract":[{"text":"An async sequence that multicasts elements from an upstream sequence to multiple concurrent consumers.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncBroadcastSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncBroadcastSequence","navigatorTitle":[{"text":"AsyncBroadcastSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asyncbroadcastsequence"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"}}}