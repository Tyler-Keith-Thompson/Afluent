{"abstract":[{"type":"text","text":"Allows only one element to pass through during each specified interval, emitting either the first or the latest element seen in that period."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/AsyncSequence-Implementations"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ThrottleSequence.swift#L266","fileName":"ThrottleSequence.swift"},"roleHeading":"Instance Method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"title":"throttle(for:clock:latest:)","platforms":[{"unavailable":false,"name":"iOS","introducedAt":"16.0","deprecated":false,"beta":false},{"unavailable":false,"name":"macOS","introducedAt":"13.0","deprecated":false,"beta":false},{"unavailable":false,"name":"tvOS","introducedAt":"16.0","deprecated":false,"beta":false},{"unavailable":false,"name":"visionOS","introducedAt":"1.0","deprecated":false,"beta":false},{"unavailable":false,"name":"watchOS","introducedAt":"9.0","deprecated":false,"beta":false}],"extendedModule":"_Concurrency","symbolKind":"method","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE8throttle3for5clock6latestAA14AsyncSequencesO8ThrottleVy_xqd__G8DurationQyd___qd__Sbt12_Concurrency5ClockRd__lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO4ScanV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throttle","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa"},{"text":", ","kind":"text"},{"text":"clock","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"latest","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"Throttle","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"throttle"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":" "},{"kind":"internalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa","text":"Duration"},{"kind":"text","text":", "},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"externalParam","text":"latest"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle","preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV","text":"Throttle","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:12_Concurrency5ClockP","kind":"typeIdentifier","text":"Clock"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"interval","content":[{"inlineContent":[{"type":"text","text":"The length of time to wait between emissions."}],"type":"paragraph"}]},{"name":"clock","content":[{"type":"paragraph","inlineContent":[{"text":"The clock used to measure time intervals and perform sleeps.","type":"text"}]}]},{"name":"latest","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean flag determining which element to emit during each interval:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"false"},{"type":"text","text":" emits the first element seen in the interval."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"true"},{"text":" emits the latest element seen during the interval.","type":"text"}]}]}]}]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An async sequence that emits throttled elements from the upstream sequence."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This operator suppresses elements from the upstream async sequence during each interval, emitting only one element per interval:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"latest","type":"codeVoice"},{"type":"text","text":" is "},{"code":"false","type":"codeVoice"},{"type":"text","text":", it emits the first element received immediately and then ignores subsequent elements until the interval completes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"latest"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", it emits the first element immediately, then during the interval it tracks element updates, emitting only the most recent one at the intervalâ€™s end.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Elements arriving during an interval beyond the emitted one are suppressed, allowing controlled pacing of element emission."}],"type":"paragraph"},{"anchor":"Example","level":2,"text":"Example","type":"heading"},{"inlineContent":[{"type":"text","text":"The following example creates an "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" that emits the current date every second,"},{"type":"text","text":" "},{"type":"text","text":"then applies a throttle with a 3-second interval, showing both "},{"type":"codeVoice","code":"latest: false"},{"type":"text","text":" and "},{"type":"codeVoice","code":"latest: true"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["import Foundation","import _Concurrency","","let stream = AsyncStream<Date> { continuation in","    Task {","        while true {","            continuation.yield(Date())","            try await Task.sleep(nanoseconds: 1_000_000_000) \/\/ 1 second","        }","    }","}","","\/\/ Throttle with latest: false (emit the first element immediately, then suppress others during the interval)","Task {","    print(\"Throttle with latest: false\")","    for await date in stream.throttle(for: .seconds(3), clock: ContinuousClock(), latest: false) {","        print(\"Emitted (first): \\(date)\")","    }","}","","\/\/ Throttle with latest: true (emit the first element immediately, then emit the latest element at interval end)","Task {","    print(\"Throttle with latest: true\")","    for await date in stream.throttle(for: .seconds(3), clock: ContinuousClock(), latest: true) {","        print(\"Emitted (latest): \\(date)\")","    }","}","","\/*","Sample output for latest: false:","Throttle with latest: false","Emitted (first): 2025-07-04 12:00:00 +0000","Emitted (first): 2025-07-04 12:00:03 +0000","Emitted (first): 2025-07-04 12:00:06 +0000","","Sample output for latest: true:","Throttle with latest: true","Emitted (latest): 2025-07-04 12:00:00 +0000","Emitted (latest): 2025-07-04 12:00:02 +0000","Emitted (latest): 2025-07-04 12:00:05 +0000","*\/"],"syntax":"swift","type":"codeListing"}]}],"kind":"symbol","sections":[],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/scan\/throttle(for:clock:latest:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/throttle(for:clock:latest:)","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Throttle":{"title":"AsyncSequences.Throttle","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Throttle"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Throttle"}],"url":"\/documentation\/afluent\/asyncsequences\/throttle","abstract":[],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan":{"type":"topic","navigatorTitle":[{"text":"Scan","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","url":"\/documentation\/afluent\/asyncsequences\/scan","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"abstract":[],"kind":"symbol","role":"symbol","title":"AsyncSequences.Scan"},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan/AsyncSequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/scan\/asyncsequence-implementations","title":"AsyncSequence Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/AsyncSequence-Implementations","kind":"article"},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan/throttle(for:clock:latest:)":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"throttle"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"externalParam","text":"latest"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Throttle","preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Allows only one element to pass through during each specified interval, emitting either the first or the latest element seen in that period.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan\/throttle(for:clock:latest:)","title":"throttle(for:clock:latest:)","url":"\/documentation\/afluent\/asyncsequences\/scan\/throttle(for:clock:latest:)"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]}}}