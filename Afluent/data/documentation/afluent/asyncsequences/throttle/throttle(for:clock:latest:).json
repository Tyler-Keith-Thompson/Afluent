{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throttle","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"interval","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa"},{"text":", ","kind":"text"},{"text":"clock","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"latest","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"Throttle","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle","preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Clock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency5ClockP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The length of time to wait between emissions.","type":"text"}],"type":"paragraph"}],"name":"interval"},{"content":[{"inlineContent":[{"type":"text","text":"The clock used to measure time intervals and perform sleeps."}],"type":"paragraph"}],"name":"clock"},{"content":[{"inlineContent":[{"text":"A Boolean flag determining which element to emit during each interval:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"false","type":"codeVoice"},{"type":"text","text":" emits the first element seen in the interval."}]}]},{"content":[{"inlineContent":[{"code":"true","type":"codeVoice"},{"text":" emits the latest element seen during the interval.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"name":"latest"}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"An async sequence that emits throttled elements from the upstream sequence.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This operator suppresses elements from the upstream async sequence during each interval, emitting only one element per interval:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"latest"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":", it emits the first element received immediately and then ignores subsequent elements until the interval completes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"latest"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"},{"type":"text","text":", it emits the first element immediately, then during the interval it tracks element updates, emitting only the most recent one at the intervalâ€™s end."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Elements arriving during an interval beyond the emitted one are suppressed, allowing controlled pacing of element emission."}],"type":"paragraph"},{"text":"Example","anchor":"Example","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The following example creates an "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" that emits the current date every second,"},{"type":"text","text":" "},{"type":"text","text":"then applies a throttle with a 3-second interval, showing both "},{"code":"latest: false","type":"codeVoice"},{"type":"text","text":" and "},{"code":"latest: true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["import Foundation","import _Concurrency","","let stream = AsyncStream<Date> { continuation in","    Task {","        while true {","            continuation.yield(Date())","            try await Task.sleep(nanoseconds: 1_000_000_000) \/\/ 1 second","        }","    }","}","","\/\/ Throttle with latest: false (emit the first element immediately, then suppress others during the interval)","Task {","    print(\"Throttle with latest: false\")","    for await date in stream.throttle(for: .seconds(3), clock: ContinuousClock(), latest: false) {","        print(\"Emitted (first): \\(date)\")","    }","}","","\/\/ Throttle with latest: true (emit the first element immediately, then emit the latest element at interval end)","Task {","    print(\"Throttle with latest: true\")","    for await date in stream.throttle(for: .seconds(3), clock: ContinuousClock(), latest: true) {","        print(\"Emitted (latest): \\(date)\")","    }","}","","\/*","Sample output for latest: false:","Throttle with latest: false","Emitted (first): 2025-07-04 12:00:00 +0000","Emitted (first): 2025-07-04 12:00:03 +0000","Emitted (first): 2025-07-04 12:00:06 +0000","","Sample output for latest: true:","Throttle with latest: true","Emitted (latest): 2025-07-04 12:00:00 +0000","Emitted (latest): 2025-07-04 12:00:02 +0000","Emitted (latest): 2025-07-04 12:00:05 +0000","*\/"],"type":"codeListing"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"throttle(for:clock:latest:)","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"extendedModule":"_Concurrency","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throttle","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa"},{"text":", ","kind":"text"},{"text":"clock","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"latest","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"Throttle","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","roleHeading":"Instance Method","platforms":[{"beta":false,"deprecated":false,"introducedAt":"16.0","unavailable":false,"name":"iOS"},{"beta":false,"deprecated":false,"introducedAt":"13.0","unavailable":false,"name":"macOS"},{"beta":false,"deprecated":false,"introducedAt":"16.0","unavailable":false,"name":"tvOS"},{"beta":false,"deprecated":false,"introducedAt":"1.0","unavailable":false,"name":"visionOS"},{"beta":false,"deprecated":false,"introducedAt":"9.0","unavailable":false,"name":"watchOS"}],"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE8throttle3for5clock6latestAA14AsyncSequencesO8ThrottleVy_xqd__G8DurationQyd___qd__Sbt12_Concurrency5ClockRd__lF::SYNTHESIZED::s:7Afluent14AsyncSequencesO8ThrottleV","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ThrottleSequence.swift#L266","fileName":"ThrottleSequence.swift"}},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle\/throttle(for:clock:latest:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle\/AsyncSequence-Implementations"]]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/throttle\/throttle(for:clock:latest:)"]}],"sections":[],"abstract":[{"text":"Allows only one element to pass through during each specified interval, emitting either the first or the latest element seen in that period.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Throttle":{"kind":"symbol","abstract":[],"title":"AsyncSequences.Throttle","navigatorTitle":[{"kind":"identifier","text":"Throttle"}],"url":"\/documentation\/afluent\/asyncsequences\/throttle","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Throttle"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Throttle/AsyncSequence-Implementations":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/throttle\/asyncsequence-implementations","kind":"article","title":"AsyncSequence Implementations","abstract":[]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Throttle/throttle(for:clock:latest:)":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throttle","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa","text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"externalParam","text":"latest"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8ThrottleV","kind":"typeIdentifier","text":"Throttle"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/asyncsequences\/throttle\/throttle(for:clock:latest:)","abstract":[{"type":"text","text":"Allows only one element to pass through during each specified interval, emitting either the first or the latest element seen in that period."}],"title":"throttle(for:clock:latest:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Throttle\/throttle(for:clock:latest:)"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]}}}