{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Conforming types determine how units of work are stored, reused, or cancelled within the cache.","type":"text"}]},{"type":"aside","style":"tip","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use or extend built-in strategies like "},{"code":"AUOWCache.CancelAndRetry","type":"codeVoice"},{"type":"text","text":" or "},{"code":"AUOWCache.CacheUntilCompletionOrCancellation","type":"codeVoice"},{"type":"text","text":" for common needs, or create a custom strategy for specialized scenarios."}]}]},{"type":"heading","text":"Example","anchor":"Example","level":2},{"type":"codeListing","syntax":"swift","code":["struct NeverCacheStrategy: AUOWCacheStrategy {","    func handle<A: AsynchronousUnitOfWork>(unitOfWork: A, keyedBy key: Int, storedIn cache: AUOWCache) -> AnyAsynchronousUnitOfWork<A.Success> {","        unitOfWork.eraseToAnyUnitOfWork()","    }","}","","let cache = AUOWCache()","let myStrategy = NeverCacheStrategy()","let task = DeferredTask { \"value\" }","    .shareFromCache(cache, strategy: myStrategy)","","\/\/ Alternatively, use built-in strategies like:","\/\/ .shareFromCache(cache, strategy: .cancelAndRestart)"]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CacheUntilCompletionOrCancellation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"],"title":"Conforming Types","type":"conformingTypes","kind":"relationships"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"abstract":[{"text":"Represents a cache strategy for use with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"text":".","type":"text"}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","interfaceLanguage":"swift"},"metadata":{"symbolKind":"protocol","externalID":"s:7Afluent17AUOWCacheStrategyP","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCacheStrategy.swift#L33","fileName":"AUOWCacheStrategy.swift"},"title":"AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"roleHeading":"Protocol","role":"symbol","modules":[{"name":"Afluent"}]},"topicSections":[{"anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/handle(unitOfWork:keyedBy:storedIn:)"],"title":"Instance Methods","generated":true},{"anchor":"Type-Properties","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cacheUntilCompletionOrCancellation","doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart"],"title":"Type Properties","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/auowcachestrategy"]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/handle(unitOfWork:keyedBy:storedIn:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/handle(unitOfWork:keyedBy:storedIn:)","abstract":[{"type":"text","text":"Performs strategy-specific logic to store or retrieve an asynchronous unit of work in the cache."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"unitOfWork"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keyedBy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"storedIn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AUOWCache","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyAsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent25AnyAsynchronousUnitOfWorkV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/auowcachestrategy\/handle(unitofwork:keyedby:storedin:)","required":true,"role":"symbol","type":"topic","title":"handle(unitOfWork:keyedBy:storedIn:)","kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cacheUntilCompletionOrCancellation":{"kind":"symbol","abstract":[{"text":"Returns the ","type":"text"},{"type":"codeVoice","code":".cacheUntilCompletionOrCancellation"},{"text":" strategy.","type":"text"}],"title":"cacheUntilCompletionOrCancellation","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/afluent\/auowcachestrategy\/cacheuntilcompletionorcancellation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cacheUntilCompletionOrCancellation","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cacheUntilCompletionOrCancellation","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","text":"AsynchronousUnitOfWorkCache","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC0F29UntilCompletionOrCancellationV","text":"CacheUntilCompletionOrCancellation","kind":"typeIdentifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CacheUntilCompletionOrCancellation":{"navigatorTitle":[{"kind":"identifier","text":"CacheUntilCompletionOrCancellation"}],"title":"AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CacheUntilCompletionOrCancellation"}],"type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation","abstract":[{"text":"A caching strategy that retains a unit of work in the cache until it completes, fails, or is cancelled.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CacheUntilCompletionOrCancellation"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkCache"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","kind":"typeIdentifier","text":"CancelAndRetry"}],"title":"cancelAndRestart","abstract":[{"type":"text","text":"Returns the "},{"code":".cancelAndRestart","type":"codeVoice"},{"type":"text","text":" strategy."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CancelAndRetry"},{"type":"text","text":"."}]},"type":"topic"},"doc://Afluent/documentation/Afluent/AUOWCache":{"navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"title":"AUOWCache","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache","role":"symbol","abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","type":"topic","url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"abstract":[{"text":"Represents a cache strategy for use with ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","type":"reference","isActive":true},{"text":".","type":"text"}],"title":"AUOWCacheStrategy","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","kind":"symbol","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","abstract":[{"type":"text","text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one."}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"}}}