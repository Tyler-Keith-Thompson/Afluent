{"kind":"symbol","topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/handle(unitOfWork:keyedBy:storedIn:)"],"generated":true,"anchor":"Instance-Methods"},{"title":"Type Properties","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cacheUntilCompletionOrCancellation","doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart"],"generated":true,"anchor":"Type-Properties"}],"relationshipsSections":[{"title":"Conforming Types","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CacheUntilCompletionOrCancellation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"],"type":"conformingTypes","kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/auowcachestrategy"]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCacheStrategy"}],"symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"AUOWCacheStrategy"}],"role":"symbol","externalID":"s:7Afluent17AUOWCacheStrategyP","title":"AUOWCacheStrategy","roleHeading":"Protocol","modules":[{"name":"Afluent"}],"remoteSource":{"fileName":"AUOWCacheStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCacheStrategy.swift#L33"}},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCacheStrategy"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Conforming types determine how units of work are stored, reused, or cancelled within the cache.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use or extend built-in strategies like "},{"type":"codeVoice","code":"AUOWCache.CancelAndRetry"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AUOWCache.CacheUntilCompletionOrCancellation"},{"type":"text","text":" for common needs, or create a custom strategy for specialized scenarios."}]}],"style":"tip","name":"Tip"},{"type":"heading","text":"Example","level":2,"anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["struct NeverCacheStrategy: AUOWCacheStrategy {","    func handle<A: AsynchronousUnitOfWork>(unitOfWork: A, keyedBy key: Int, storedIn cache: AUOWCache) -> AnyAsynchronousUnitOfWork<A.Success> {","        unitOfWork.eraseToAnyUnitOfWork()","    }","}","","let cache = AUOWCache()","let myStrategy = NeverCacheStrategy()","let task = DeferredTask { \"value\" }","    .shareFromCache(cache, strategy: myStrategy)","","\/\/ Alternatively, use built-in strategies like:","\/\/ .shareFromCache(cache, strategy: .cancelAndRestart)"]}],"kind":"content"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"type":"reference","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","isActive":true},{"type":"text","text":"."}],"references":{"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"title":"AUOWCacheStrategy"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"abstract":[{"text":"A caching strategy that cancels any existing in-flight unit of work for a key, then starts the new one.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelAndRetry"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","navigatorTitle":[{"kind":"identifier","text":"CancelAndRetry"}],"title":"AsynchronousUnitOfWorkCache.CancelAndRetry","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","type":"topic"},"doc://Afluent/documentation/Afluent/AUOWCache":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"AsynchronousUnitOfWorkCache.CancelAndRetry","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","text":"AsynchronousUnitOfWorkCache"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","text":"CancelAndRetry"}],"type":"topic","abstract":[{"text":"Returns the ","type":"text"},{"code":".cancelAndRestart","type":"codeVoice"},{"text":" strategy.","type":"text"}],"url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","title":"cancelAndRestart"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/handle(unitOfWork:keyedBy:storedIn:)":{"abstract":[{"type":"text","text":"Performs strategy-specific logic to store or retrieve an asynchronous unit of work in the cache."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/handle(unitOfWork:keyedBy:storedIn:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"unitOfWork"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keyedBy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"storedIn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent9AUOWCachea","text":"AUOWCache"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent25AnyAsynchronousUnitOfWorkV","text":"AnyAsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success"},{"kind":"text","text":">"}],"kind":"symbol","title":"handle(unitOfWork:keyedBy:storedIn:)","url":"\/documentation\/afluent\/auowcachestrategy\/handle(unitofwork:keyedby:storedin:)","type":"topic","required":true},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cacheUntilCompletionOrCancellation":{"abstract":[{"text":"Returns the ","type":"text"},{"code":".cacheUntilCompletionOrCancellation","type":"codeVoice"},{"text":" strategy.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cacheUntilCompletionOrCancellation","url":"\/documentation\/afluent\/auowcachestrategy\/cacheuntilcompletionorcancellation","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cacheUntilCompletionOrCancellation","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","text":"AsynchronousUnitOfWorkCache","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC0F29UntilCompletionOrCancellationV","text":"CacheUntilCompletionOrCancellation","kind":"typeIdentifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation"},{"text":".","type":"text"}]},"kind":"symbol","type":"topic","title":"cacheUntilCompletionOrCancellation","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CacheUntilCompletionOrCancellation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CacheUntilCompletionOrCancellation","type":"topic","navigatorTitle":[{"text":"CacheUntilCompletionOrCancellation","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation","role":"symbol","kind":"symbol","abstract":[{"text":"A caching strategy that retains a unit of work in the cache until it completes, fails, or is cancelled.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CacheUntilCompletionOrCancellation","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation"}}}