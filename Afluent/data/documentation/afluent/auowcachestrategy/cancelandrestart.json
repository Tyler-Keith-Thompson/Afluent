{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/auowcachestrategy\/cancelandrestart"]}],"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancelAndRestart"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWorkCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CancelAndRetry","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}],"kind":"declarations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart"},"abstract":[{"text":"This strategy indicates that any existing work should be cancelled before restarting the upstream work again.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"symbolKind":"property","roleHeading":"Type Property","extendedModule":"Afluent","modules":[{"name":"Afluent"}],"title":"cancelAndRestart","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CancelAndRetry"},{"type":"text","text":"."}]},"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancelAndRestart","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CancelAndRetry","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","kind":"typeIdentifier"}],"remoteSource":{"fileName":"AUOWCache+CancelAndRetry.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/AUOWCacheStrategies\/AUOWCache+CancelAndRetry.swift#L38"},"role":"symbol","externalID":"s:7Afluent17AUOWCacheStrategyPA2A27AsynchronousUnitOfWorkCacheC14CancelAndRetryVRszrlE06cancelJ7RestartAGvpZ"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy"]]},"references":{"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"role":"symbol","abstract":[{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","isActive":true,"type":"reference"},{"text":" represents the available caching strategies for the ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","isActive":true,"type":"reference"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/auowcachestrategy","title":"AUOWCacheStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCache":{"kind":"symbol","type":"topic","abstract":[],"title":"AUOWCache","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"url":"\/documentation\/afluent\/auowcache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol"},"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"title":"Afluent","type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy/cancelAndRestart":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"This strategy indicates that any existing work should be cancelled before restarting the upstream work again.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy\/cancelAndRestart","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancelAndRestart","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CancelAndRetry","preciseIdentifier":"s:7Afluent27AsynchronousUnitOfWorkCacheC14CancelAndRetryV","kind":"typeIdentifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"AsynchronousUnitOfWorkCache.CancelAndRetry"},{"type":"text","text":"."}]},"url":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","title":"cancelAndRestart"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache/CancelAndRetry":{"navigatorTitle":[{"text":"CancelAndRetry","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancelAndRetry","kind":"identifier"}],"kind":"symbol","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","abstract":[],"type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache\/CancelAndRetry"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"type":"topic","abstract":[{"text":"A cache for asynchronous unit of work types.","type":"text"},{"text":" ","type":"text"},{"text":"A stored unit of work should be both ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and a reference type (e.g. a unit of work shared via the ","type":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()","isActive":true,"type":"reference"},{"text":" operator).","type":"text"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/share()":{"url":"\/documentation\/afluent\/asynchronousunitofwork\/share()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"share","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"text":"> & ","kind":"text"},{"text":"Actor","kind":"typeIdentifier","preciseIdentifier":"s:ScA"}],"type":"topic","title":"share()","role":"symbol","abstract":[{"text":"Shares the upstream ","type":"text"},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" among multiple downstream subscribers.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/share()"}}}