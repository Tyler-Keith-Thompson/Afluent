{"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies for retry mechanisms."}],"variants":[{"paths":["\/documentation\/afluent\/backoffstrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Associated-Types","title":"Associated Types","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/Clock"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/backoff(clock:durationUnit:)"],"generated":true},{"anchor":"Type-Methods","title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/binaryExponential(maxCount:maxDelay:)","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/exponential(base:maxCount:maxDelay:)"],"generated":true}],"sections":[],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Afluent\/s8SendableP"],"type":"inheritsFrom"},{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"],"type":"conformingTypes"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"platforms":[{"introducedAt":"16.0","deprecated":false,"unavailable":false,"beta":false,"name":"iOS"},{"introducedAt":"13.0","deprecated":false,"unavailable":false,"beta":false,"name":"macOS"},{"introducedAt":"16.0","deprecated":false,"unavailable":false,"beta":false,"name":"tvOS"},{"introducedAt":"9.0","deprecated":false,"unavailable":false,"beta":false,"name":"watchOS"}],"role":"symbol","title":"BackoffStrategy","externalID":"s:7Afluent15BackoffStrategyP","roleHeading":"Protocol","remoteSource":{"fileName":"RetryByBackoffStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L86"},"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"modules":[{"name":"Afluent"}],"symbolKind":"protocol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/Clock","text":"Clock"},{"kind":"text","text":"> : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"Conforming types provide logic to determine the delay between retry attempts using a clock and a duration unit.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Example","type":"heading","text":"Example"},{"syntax":"swift","type":"codeListing","code":["struct MyStrategy: BackoffStrategy {","    func backoff<T: BinaryInteger>(clock: ContinuousClock, durationUnit: @escaping ClockDurationUnit<ContinuousClock, T>) async throws -> Bool {","        try await clock.sleep(for: durationUnit(1))","        return true","    }","}"]}]}],"references":{"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/BackoffStrategy/Clock":{"abstract":[],"required":true,"title":"Clock","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/Clock","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Clock","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Clock","preciseIdentifier":"s:12_Concurrency5ClockP","kind":"typeIdentifier"}],"url":"\/documentation\/afluent\/backoffstrategy\/clock","kind":"symbol","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/BackoffStrategy/exponential(base:maxCount:maxDelay:)":{"type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" is "},{"code":"ExponentialBackoffStrategy<ContinuousClock>","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"exponential"},{"kind":"text","text":"("},{"kind":"externalParam","text":"base"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxDelay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:12_Concurrency15ContinuousClockV8Durationa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ExponentialBackoffStrategy","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Clock","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates an exponential backoff strategy with a configurable base and maximum retry count."}],"title":"exponential(base:maxCount:maxDelay:)","url":"\/documentation\/afluent\/backoffstrategy\/exponential(base:maxcount:maxdelay:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/exponential(base:maxCount:maxDelay:)"},"doc://Afluent/documentation/Afluent/BackoffStrategy/binaryExponential(maxCount:maxDelay:)":{"title":"binaryExponential(maxCount:maxDelay:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/binaryExponential(maxCount:maxDelay:)","role":"symbol","abstract":[{"type":"text","text":"Creates a binary exponential backoff strategy with a maximum retry count."}],"url":"\/documentation\/afluent\/backoffstrategy\/binaryexponential(maxcount:maxdelay:)","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ExponentialBackoffStrategy<ContinuousClock>"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binaryExponential"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxDelay"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","text":"ContinuousClock"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV8Durationa","text":"Duration"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","text":"Clock"},{"kind":"text","text":">"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","url":"\/documentation\/afluent\/backoffstrategy","abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies for retry mechanisms."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol","title":"BackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy/backoff(clock:durationUnit:)":{"url":"\/documentation\/afluent\/backoffstrategy\/backoff(clock:durationunit:)","title":"backoff(clock:durationUnit:)","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy\/backoff(clock:durationUnit:)","abstract":[{"type":"text","text":"Calculates the delay between retries using a clock and a duration unit."}],"type":"topic","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"backoff"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Clock","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"durationUnit"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Clock","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:12_Concurrency5ClockP8DurationQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"type":"topic","url":"\/documentation\/afluent\/exponentialbackoffstrategy","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"role":"symbol","title":"ExponentialBackoffStrategy","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}]},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"}}}