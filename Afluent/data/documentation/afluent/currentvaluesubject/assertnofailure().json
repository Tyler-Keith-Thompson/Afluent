{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","kind":"typeIdentifier","text":"AssertNoFailure","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"inlineContent":[{"text":"Use this to assert that a sequence is infallible, propagating values and terminating with a fatal error if any error occurs.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Example","level":2,"anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["let numbers = AsyncStream<Int> { continuation in","    continuation.yield(1)","    continuation.yield(2)","    continuation.finish()","}","for try await value in numbers.assertNoFailure() {","    print(value)","}"]}]}],"metadata":{"roleHeading":"Instance Method","extendedModule":"_Concurrency","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"title":"assertNoFailure()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"AssertNoFailure","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"remoteSource":{"fileName":"AssertNoFailureSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/AssertNoFailureSequence.swift#L55"},"symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"externalID":"s:Sci7Afluents8SendableRzrlE15assertNoFailureAA14AsyncSequencesO06AssertdE0Vy_xGyF::SYNTHESIZED::s:7Afluent19CurrentValueSubjectC","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/AsyncSequence-Implementations"]]},"abstract":[{"text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/assertNoFailure()"},"variants":[{"paths":["\/documentation\/afluent\/currentvaluesubject\/assertnofailure()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/CurrentValueSubject/AsyncSequence-Implementations":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/currentvaluesubject\/asyncsequence-implementations","title":"AsyncSequence Implementations","kind":"article","abstract":[]},"doc://Afluent/documentation/Afluent/CurrentValueSubject/assertNoFailure()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/assertNoFailure()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO15AssertNoFailureV","text":"AssertNoFailure"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"url":"\/documentation\/afluent\/currentvaluesubject\/assertnofailure()","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","type":"topic","abstract":[{"text":"Raises a fatal error if the upstream async sequence throws (other than cancellation), otherwise republishes all received values.","type":"text"}],"title":"assertNoFailure()","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CurrentValueSubject","kind":"identifier"}],"navigatorTitle":[{"text":"CurrentValueSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","url":"\/documentation\/afluent\/currentvaluesubject","type":"topic","kind":"symbol","title":"CurrentValueSubject","abstract":[{"text":"A subject that broadcasts its current value and all subsequent values to multiple consumers.","type":"text"},{"text":" ","type":"text"},{"text":"It can also handle completion events, including normal termination and failure with an error.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s CurrentValueSubject.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/AssertNoFailure":{"url":"\/documentation\/afluent\/asyncsequences\/assertnofailure","title":"AsyncSequences.AssertNoFailure","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"AssertNoFailure","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AssertNoFailure","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/AssertNoFailure","abstract":[{"type":"text","text":"An async sequence that raises a fatal error if its upstream sequence throws."}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"}}}