{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/currentvaluesubject\/collect()"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/AsyncSequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"collect"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","kind":"typeIdentifier","text":"AsyncSequences"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO7CollectV","text":"Collect","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Collect","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"content":[{"text":"Discussion:","type":"heading","level":3,"anchor":"Discussion"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"collect()"},{"type":"text","text":" to gather elements into an array that the operator emits after the upstream sequence finishes."},{"type":"text","text":" "},{"text":"If the upstream sequence fails with an error, this sequence forwards the error to the downstream receiver instead of sending its output.","type":"text"}],"type":"paragraph"},{"type":"aside","style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Be cautious when using "},{"type":"codeVoice","code":"collect"},{"text":" on sequences that can emit a large number of elements or do not complete, as it can lead to high memory usage or even memory exhaustion.","type":"text"}]}]}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","extendedModule":"_Concurrency","title":"collect()","remoteSource":{"fileName":"CollectSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/CollectSequence.swift#L44"},"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"externalID":"s:Sci7Afluents8SendableRzrlE7collectAA14AsyncSequencesO7CollectVy_xGyF::SYNTHESIZED::s:7Afluent19CurrentValueSubjectC","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"collect","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"text":"Collect","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO7CollectV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/collect()"},"kind":"symbol","abstract":[{"type":"text","text":"Collects all received elements, and emits a single array of the collection when the upstream sequence finishes."}],"references":{"doc://Afluent/documentation/Afluent/CurrentValueSubject/collect()":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"collect","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"text":".","kind":"text"},{"text":"Collect","preciseIdentifier":"s:7Afluent14AsyncSequencesO7CollectV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Collects all received elements, and emits a single array of the collection when the upstream sequence finishes."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/collect()","title":"collect()","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/currentvaluesubject\/collect()"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","role":"collection","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Collect":{"navigatorTitle":[{"text":"Collect","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Collect","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Collect","kind":"identifier"}],"title":"AsyncSequences.Collect","url":"\/documentation\/afluent\/asyncsequences\/collect","type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","role":"symbol","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"url":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","type":"topic","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/CurrentValueSubject/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","role":"collectionGroup","abstract":[],"type":"topic","kind":"article","url":"\/documentation\/afluent\/currentvaluesubject\/asyncsequence-implementations"},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","navigatorTitle":[{"kind":"identifier","text":"CurrentValueSubject"}],"title":"CurrentValueSubject","role":"symbol","abstract":[{"text":"A subject that broadcasts its current value and all subsequent values to multiple consumers.","type":"text"},{"text":" ","type":"text"},{"text":"It can also handle completion events, including normal termination and failure with an error.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s CurrentValueSubject.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CurrentValueSubject"}],"url":"\/documentation\/afluent\/currentvaluesubject"}}}