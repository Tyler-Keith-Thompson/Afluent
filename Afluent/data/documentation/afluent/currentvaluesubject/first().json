{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject"]]},"kind":"symbol","sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"first","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sci7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method is a convenience overload for async sequences, returning the first element encountered, or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if none is produced."}],"type":"paragraph"},{"inlineContent":[{"text":"If the sequence throws before yielding a value, the error is rethrown.","type":"text"}],"type":"paragraph"},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"code":["let stream = AsyncStream<Int> { continuation in","    continuation.yield(42)","    continuation.yield(100)","    continuation.finish()","}","","if let first = try await stream.first() {","    print(\"First: \\(first)\") \/\/ Prints: First: 42","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/currentvaluesubject\/first()"]}],"abstract":[{"type":"text","text":"Returns the first element of the sequence, or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the sequence is empty."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/first()"},"metadata":{"externalID":"s:Sci7Afluents8Sendable7ElementRpzrlE5firstADSgyYaKF::SYNTHESIZED::s:7Afluent19CurrentValueSubjectC","title":"first()","roleHeading":"Instance Method","symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"remoteSource":{"fileName":"AsyncSequenceExtensions.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Extensions\/AsyncSequenceExtensions.swift#L30"},"role":"symbol","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"extendedModule":"_Concurrency"},"references":{"doc://Afluent/documentation/Afluent/CurrentValueSubject/first()":{"title":"first()","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/afluent\/currentvaluesubject\/first()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject\/first()","abstract":[{"text":"Returns the first element of the sequence, or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the sequence is empty.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"type":"topic"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/CurrentValueSubject":{"navigatorTitle":[{"kind":"identifier","text":"CurrentValueSubject"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/CurrentValueSubject","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/afluent\/currentvaluesubject","abstract":[{"type":"text","text":"A subject that broadcasts its current value and all subsequent values to multiple consumers."},{"type":"text","text":" "},{"type":"text","text":"It can also handle completion events, including normal termination and failure with an error."},{"type":"text","text":" "},{"type":"text","text":"This is an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s CurrentValueSubject."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CurrentValueSubject"}],"title":"CurrentValueSubject"}}}