{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DeferredTask"},{"type":"text","text":" represents an asynchronous operation that is defined but does not start executing until it is explicitly started."},{"type":"text","text":" "},{"type":"text","text":"This allows precise control over when the asynchronous work begins, supporting scenarios where you want to set up an async operation ahead of time and"},{"type":"text","text":" "},{"type":"text","text":"trigger its execution at a chosen moment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type conforms to the "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" protocol and is useful for wrapping async computations, network requests, or any other asynchronous operation"},{"type":"text","text":" "},{"type":"text","text":"that may throw an error and returns a value."}]},{"type":"heading","text":"Example","level":2,"anchor":"Example"},{"type":"paragraph","inlineContent":[{"text":"Basic usage with ","type":"text"},{"code":"execute()","type":"codeVoice"},{"text":" to start and await the operation:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let deferred = DeferredTask<Int> {","    try await Task.sleep(nanoseconds: 1_000_000_000)","    return 42","}","let result = try await deferred.execute()","print(\"Result is \\(result)\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Accessing the result via the "},{"type":"codeVoice","code":"result"},{"type":"text","text":" property (an async property that awaits completion):"}]},{"type":"codeListing","syntax":"swift","code":["let deferred = DeferredTask<Int> {","    10 * 5","}","let value = await deferred.result","print(\"Value is \\(value)\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Running the operation without awaiting its result immediately, via "},{"code":"run()","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let deferred = DeferredTask<Int> {","    7 + 3","}","deferred.run()","\/\/ Later, you may await the result property or handle completion otherwise"]},{"type":"paragraph","inlineContent":[{"text":"Subscribing to the taskâ€™s events using ","type":"text"},{"code":"subscribe()","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let deferred = DeferredTask<String> {","    \"Hello, World!\"","}","let cancellable = deferred.subscribe { event in","    switch event {","    case .success(let value):","        print(\"Completed with value: \\(value)\")","    case .failure(let error):","        print(\"Failed with error: \\(error)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Storing the subscription in a collection for lifecycle management:"}]},{"type":"codeListing","syntax":"swift","code":["var cancellables = Set<AnyCancellable>()","let deferred = DeferredTask<Void> {","    print(\"Task executed\")","}","deferred.subscribe().store(in: &cancellables)"]},{"type":"paragraph","inlineContent":[{"text":"Chaining with operators:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let result = try await DeferredTask { 21 }","    .map { $0 * 2 }","    .execute() \/\/ result is 42"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"abstract":[{"text":"A deferred unit of asynchronous work that produces a result of type ","type":"text"},{"code":"Success","type":"codeVoice"},{"text":".","type":"text"}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/deferredtask"]}],"topicSections":[{"title":"Initializers","anchor":"Initializers","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)"]},{"title":"Instance Properties","anchor":"Instance-Properties","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state"]},{"title":"Default Implementations","anchor":"Default-Implementations","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"]}],"sections":[],"metadata":{"title":"DeferredTask","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent12DeferredTaskC","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"role":"symbol","symbolKind":"class","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/DeferredTask.swift#L79","fileName":"DeferredTask.swift"},"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"}],"roleHeading":"Class"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Afluent/ScA":{"identifier":"doc:\/\/Afluent\/ScA","type":"unresolvable","title":"_Concurrency.Actor"},"doc://Afluent/documentation/Afluent/DeferredTask/init(operation:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":")"}],"abstract":[{"text":"Initializes a new ","type":"text"},{"code":"DeferredTask","type":"codeVoice"},{"text":" with the provided asynchronous operation.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)","url":"\/documentation\/afluent\/deferredtask\/init(operation:)","role":"symbol","title":"init(operation:)"},"doc://Afluent/documentation/Afluent/DeferredTask":{"url":"\/documentation\/afluent\/deferredtask","role":"symbol","abstract":[{"text":"A deferred unit of asynchronous work that produces a result of type ","type":"text"},{"type":"codeVoice","code":"Success"},{"text":".","type":"text"}],"title":"DeferredTask","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/DeferredTask/state":{"title":"state","kind":"symbol","url":"\/documentation\/afluent\/deferredtask\/state","type":"topic","role":"symbol","abstract":[{"type":"text","text":"The internal state of the task, tracking its lifecycle and result."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent9TaskStateC","kind":"typeIdentifier","text":"TaskState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">"}]},"doc://Afluent/documentation/Afluent/DeferredTask/AsynchronousUnitOfWork-Implementations":{"url":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"},"doc://Afluent/documentation/Afluent/DeferredTask/Actor-Implementations":{"title":"Actor Implementations","url":"\/documentation\/afluent\/deferredtask\/actor-implementations","type":"topic","role":"collectionGroup","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","type":"topic"}}}