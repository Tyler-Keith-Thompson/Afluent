{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"code":"DeferredTask","type":"codeVoice"},{"type":"text","text":" represents an asynchronous operation that is defined but does not start executing until it is explicitly started."},{"type":"text","text":" "},{"type":"text","text":"This allows precise control over when the asynchronous work begins, supporting scenarios where you want to set up an async operation ahead of time and"},{"type":"text","text":" "},{"type":"text","text":"trigger its execution at a chosen moment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type conforms to the "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" protocol and is useful for wrapping async computations, network requests, or any other asynchronous operation"},{"type":"text","text":" "},{"type":"text","text":"that may throw an error and returns a value."}]},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"type":"paragraph","inlineContent":[{"text":"Basic usage with ","type":"text"},{"code":"execute()","type":"codeVoice"},{"text":" to start and await the operation:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let deferred = DeferredTask<Int> {","    try await Task.sleep(nanoseconds: 1_000_000_000)","    return 42","}","let result = try await deferred.execute()","print(\"Result is \\(result)\")"]},{"type":"paragraph","inlineContent":[{"text":"Accessing the result via the ","type":"text"},{"code":"result","type":"codeVoice"},{"text":" property (an async property that awaits completion):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let deferred = DeferredTask<Int> {","    10 * 5","}","let value = await deferred.result","print(\"Value is \\(value)\")"]},{"type":"paragraph","inlineContent":[{"text":"Running the operation without awaiting its result immediately, via ","type":"text"},{"code":"run()","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let deferred = DeferredTask<Int> {","    7 + 3","}","deferred.run()","\/\/ Later, you may await the result property or handle completion otherwise"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscribing to the taskâ€™s events using "},{"type":"codeVoice","code":"subscribe()"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let deferred = DeferredTask<String> {","    \"Hello, World!\"","}","let cancellable = deferred.subscribe { event in","    switch event {","    case .success(let value):","        print(\"Completed with value: \\(value)\")","    case .failure(let error):","        print(\"Failed with error: \\(error)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Storing the subscription in a collection for lifecycle management:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var cancellables = Set<AnyCancellable>()","let deferred = DeferredTask<Void> {","    print(\"Task executed\")","}","deferred.subscribe().store(in: &cancellables)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Chaining with operators:"}]},{"syntax":"swift","type":"codeListing","code":["let result = try await DeferredTask { 21 }","    .map { $0 * 2 }","    .execute() \/\/ result is 42"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)"],"title":"Initializers","generated":true,"anchor":"Initializers"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"metadata":{"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/DeferredTask.swift#L79","fileName":"DeferredTask.swift"},"roleHeading":"Class","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"modules":[{"name":"Afluent"}],"symbolKind":"class","role":"symbol","externalID":"s:7Afluent12DeferredTaskC","title":"DeferredTask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/deferredtask"]}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"abstract":[{"text":"A deferred unit of asynchronous work that produces a result of type ","type":"text"},{"code":"Success","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/DeferredTask":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","url":"\/documentation\/afluent\/deferredtask","type":"topic","role":"symbol","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"type":"text","text":"A deferred unit of asynchronous work that produces a result of type "},{"type":"codeVoice","code":"Success"},{"type":"text","text":"."}],"title":"DeferredTask","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/DeferredTask/init(operation:)":{"abstract":[{"type":"text","text":"Initializes a new "},{"code":"DeferredTask","type":"codeVoice"},{"type":"text","text":" with the provided asynchronous operation."}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/afluent\/deferredtask\/init(operation:)","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)","title":"init(operation:)"},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Afluent/documentation/Afluent/DeferredTask/AsynchronousUnitOfWork-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations","url":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","abstract":[],"type":"topic","kind":"article","title":"AsynchronousUnitOfWork Implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/DeferredTask/state":{"title":"state","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent9TaskStateC","kind":"typeIdentifier","text":"TaskState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">"}],"abstract":[{"text":"The internal state of the task, tracking its lifecycle and result.","type":"text"}],"url":"\/documentation\/afluent\/deferredtask\/state","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/Afluent\/ScA","type":"unresolvable"},"doc://Afluent/documentation/Afluent/DeferredTask/Actor-Implementations":{"role":"collectionGroup","title":"Actor Implementations","url":"\/documentation\/afluent\/deferredtask\/actor-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","type":"topic","abstract":[],"kind":"article"}}}