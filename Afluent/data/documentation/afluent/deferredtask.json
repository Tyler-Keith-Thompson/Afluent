{"metadata":{"remoteSource":{"fileName":"DeferredTask.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/DeferredTask.swift#L79"},"roleHeading":"Class","title":"DeferredTask","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"role":"symbol","modules":[{"name":"Afluent"}],"symbolKind":"class","externalID":"s:7Afluent12DeferredTaskC"},"abstract":[{"type":"text","text":"A deferred unit of asynchronous work that produces a result of type "},{"code":"Success","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/deferredtask"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeferredTask"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"codeVoice","code":"DeferredTask"},{"text":" represents an asynchronous operation that is defined but does not start executing until it is explicitly started.","type":"text"},{"text":" ","type":"text"},{"text":"This allows precise control over when the asynchronous work begins, supporting scenarios where you want to set up an async operation ahead of time and","type":"text"},{"text":" ","type":"text"},{"text":"trigger its execution at a chosen moment.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This type conforms to the "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" protocol and is useful for wrapping async computations, network requests, or any other asynchronous operation"},{"type":"text","text":" "},{"type":"text","text":"that may throw an error and returns a value."}],"type":"paragraph"},{"anchor":"Example","type":"heading","level":2,"text":"Example"},{"inlineContent":[{"text":"Basic usage with ","type":"text"},{"type":"codeVoice","code":"execute()"},{"text":" to start and await the operation:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let deferred = DeferredTask<Int> {","    try await Task.sleep(nanoseconds: 1_000_000_000)","    return 42","}","let result = try await deferred.execute()","print(\"Result is \\(result)\")"],"syntax":null},{"inlineContent":[{"text":"Accessing the result via the ","type":"text"},{"code":"result","type":"codeVoice"},{"text":" property (an async property that awaits completion):","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let deferred = DeferredTask<Int> {","    10 * 5","}","let value = await deferred.result","print(\"Value is \\(value)\")"],"syntax":null},{"inlineContent":[{"type":"text","text":"Running the operation without awaiting its result immediately, via "},{"type":"codeVoice","code":"run()"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["let deferred = DeferredTask<Int> {","    7 + 3","}","deferred.run()","\/\/ Later, you may await the result property or handle completion otherwise"],"syntax":null},{"inlineContent":[{"text":"Subscribing to the taskâ€™s events using ","type":"text"},{"type":"codeVoice","code":"subscribe()"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let deferred = DeferredTask<String> {","    \"Hello, World!\"","}","let cancellable = deferred.subscribe { event in","    switch event {","    case .success(let value):","        print(\"Completed with value: \\(value)\")","    case .failure(let error):","        print(\"Failed with error: \\(error)\")","    }","}"],"syntax":null},{"inlineContent":[{"type":"text","text":"Storing the subscription in a collection for lifecycle management:"}],"type":"paragraph"},{"type":"codeListing","code":["var cancellables = Set<AnyCancellable>()","let deferred = DeferredTask<Void> {","    print(\"Task executed\")","}","deferred.subscribe().store(in: &cancellables)"],"syntax":null},{"inlineContent":[{"type":"text","text":"Chaining with operators:"}],"type":"paragraph"},{"type":"codeListing","code":["let result = try await DeferredTask { 21 }","    .map { $0 * 2 }","    .execute() \/\/ result is 42"],"syntax":null}],"kind":"content"}],"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)"]},{"generated":true,"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state"]},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"]}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"],"kind":"relationships"}],"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/ScA":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/ScA","title":"_Concurrency.Actor"},"doc://Afluent/documentation/Afluent/DeferredTask/state":{"abstract":[{"text":"The internal state of the task, tracking its lifecycle and result.","type":"text"}],"title":"state","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/state","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"TaskState","preciseIdentifier":"s:7Afluent9TaskStateC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask\/state","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask/init(operation:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/init(operation:)","title":"init(operation:)","abstract":[{"type":"text","text":"Initializes a new "},{"type":"codeVoice","code":"DeferredTask"},{"type":"text","text":" with the provided asynchronous operation."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Success","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask\/init(operation:)","type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask/AsynchronousUnitOfWork-Implementations":{"url":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","kind":"article","type":"topic","abstract":[],"role":"collectionGroup","title":"AsynchronousUnitOfWork Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"},"doc://Afluent/documentation/Afluent/DeferredTask/Actor-Implementations":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/Actor-Implementations","title":"Actor Implementations","kind":"article","url":"\/documentation\/afluent\/deferredtask\/actor-implementations","type":"topic","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","title":"AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","url":"\/documentation\/afluent\/asynchronousunitofwork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"type":"topic"},"doc://Afluent/documentation/Afluent/DeferredTask":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","type":"topic","url":"\/documentation\/afluent\/deferredtask","role":"symbol","title":"DeferredTask","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A deferred unit of asynchronous work that produces a result of type "},{"type":"codeVoice","code":"Success"},{"type":"text","text":"."}]},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"}}}