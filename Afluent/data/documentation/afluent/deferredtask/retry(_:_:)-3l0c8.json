{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"retry"},{"text":"<","kind":"text"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"strategy"},{"kind":"text","text":": some "},{"text":"RetryStrategy","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","preciseIdentifier":"s:7Afluent13RetryStrategyP"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" (any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","kind":"typeIdentifier"},{"kind":"text","text":"\n"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"strategy","content":[{"inlineContent":[{"type":"text","text":"The retry strategy to use."}],"type":"paragraph"}]},{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An async closure that takes the error from the upstream and returns a new "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"An "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" that emits the same output as the upstream but retries on failure up to the specified number of times, with the applied transformation.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"retry","kind":"identifier"},{"kind":"text","text":"<"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":">(some "},{"kind":"typeIdentifier","text":"RetryStrategy","preciseIdentifier":"s:7Afluent13RetryStrategyP"},{"text":", (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier","text":"AsynchronousUnitOfWork"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"text":">\n","kind":"text"}],"modules":[{"name":"Afluent"}],"roleHeading":"Instance Method","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE5retryyQrqd_0__qd__s5Error_pYaYbKctAaBRd__AA13RetryStrategyRd_0_r0_lF::SYNTHESIZED::s:7Afluent12DeferredTaskC","extendedModule":"Afluent","title":"retry(_:_:)","role":"symbol","remoteSource":{"fileName":"RetryAfterFlatMapping.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/RetryAfterFlatMapping.swift#L113"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/deferredtask\/retry(_:_:)-3l0c8"]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"]]},"abstract":[{"type":"text","text":"Retries the upstream "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"type":"text","text":" up to a specified number of times while applying a transformation on error."}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/retry(_:_:)-3l0c8","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent/DeferredTask/retry(_:_:)-3l0c8":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/retry(_:_:)-3l0c8","role":"symbol","title":"retry(_:_:)","abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"text":" up to a specified number of times while applying a transformation on error.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/deferredtask\/retry(_:_:)-3l0c8","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"kind":"text","text":"<"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":">(some "},{"preciseIdentifier":"s:7Afluent13RetryStrategyP","text":"RetryStrategy","kind":"typeIdentifier"},{"text":", (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">\n"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","type":"topic","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"title":"AsynchronousUnitOfWork","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"kind":"symbol","required":true,"type":"topic","abstract":[{"type":"text","text":"The type of data the unit of work will produce if it succeeds."}],"url":"\/documentation\/afluent\/asynchronousunitofwork\/success","role":"symbol","title":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Success"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"role":"symbol","url":"\/documentation\/afluent\/retrystrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"type":"topic","title":"RetryStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","url":"\/documentation\/afluent","kind":"symbol","title":"Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/DeferredTask/AsynchronousUnitOfWork-Implementations":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations","kind":"article","abstract":[],"role":"collectionGroup","title":"AsynchronousUnitOfWork Implementations","url":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations"},"doc://Afluent/documentation/Afluent/DeferredTask":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","kind":"symbol","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"role":"symbol","title":"DeferredTask","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeferredTask"}],"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"url":"\/documentation\/afluent\/deferredtask"}}}