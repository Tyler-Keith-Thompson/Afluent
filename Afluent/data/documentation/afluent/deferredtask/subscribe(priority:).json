{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subscribe","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","preciseIdentifier":"s:ScP","kind":"typeIdentifier"},{"text":"? = nil) -> ","kind":"text"},{"text":"AnyCancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","preciseIdentifier":"s:7Afluent14AnyCancellableC","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"priority","content":[{"inlineContent":[{"type":"text","text":"Optional priority value to run the unit of work."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token that can be used to cancel the running operation."}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Calling this method starts the asynchronous operation immediately.","type":"text"},{"text":" ","type":"text"},{"text":"The returned ","type":"text"},{"code":"AnyCancellable","type":"codeVoice"},{"text":" instance can be held to keep the operation alive or cancelled to stop it early.","type":"text"}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The operation will also be cancelled automatically when the returned token is deinitialized."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usage example:"}]},{"type":"codeListing","syntax":"swift","code":["let cancellable = networkRequest.subscribe(priority: .userInitiated)","\/\/ Later, if needed:","cancellable.cancel()"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations"]]},"variants":[{"paths":["\/documentation\/afluent\/deferredtask\/subscribe(priority:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Subscription\/AnyCancellable.swift#L101","fileName":"AnyCancellable.swift"},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribe"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AnyCancellableC","text":"AnyCancellable"}],"role":"symbol","roleHeading":"Instance Method","extendedModule":"Afluent","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE9subscribe8priorityAA14AnyCancellableCScPSg_tF::SYNTHESIZED::s:7Afluent12DeferredTaskC","symbolKind":"method","title":"subscribe(priority:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Executes the current asynchronous unit of work and returns an "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token to cancel the subscription."}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/subscribe(priority:)","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/DeferredTask/subscribe(priority:)":{"abstract":[{"text":"Executes the current asynchronous unit of work and returns an ","type":"text"},{"type":"codeVoice","code":"AnyCancellable"},{"text":" token to cancel the subscription.","type":"text"}],"kind":"symbol","url":"\/documentation\/afluent\/deferredtask\/subscribe(priority:)","title":"subscribe(priority:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subscribe","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AnyCancellableC","text":"AnyCancellable","kind":"typeIdentifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/subscribe(priority:)","type":"topic"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyCancellable"}],"url":"\/documentation\/afluent\/anycancellable","title":"AnyCancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","type":"topic","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask/AsynchronousUnitOfWork-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask\/AsynchronousUnitOfWork-Implementations","url":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","abstract":[],"type":"topic","kind":"article","title":"AsynchronousUnitOfWork Implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","url":"\/documentation\/afluent\/deferredtask","type":"topic","role":"symbol","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"type":"text","text":"A deferred unit of asynchronous work that produces a result of type "},{"type":"codeVoice","code":"Success"},{"type":"text","text":"."}],"title":"DeferredTask","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}]}}}