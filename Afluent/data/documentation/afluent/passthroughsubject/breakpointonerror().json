{"variants":[{"paths":["\/documentation\/afluent\/passthroughsubject\/breakpointonerror()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Introduces a breakpoint into the async sequence when an error occurs.","type":"text"}],"metadata":{"title":"breakpointOnError()","extendedModule":"_Concurrency","externalID":"s:Sci7Afluents8SendableRzrlE17breakpointOnErrorAA14AsyncSequencesO12HandleEventsVy_xGyF::SYNTHESIZED::s:7Afluent18PassthroughSubjectC","symbolKind":"method","roleHeading":"Instance Method","role":"symbol","modules":[{"relatedModules":["_Concurrency"],"name":"Afluent"}],"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"breakpointOnError"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","text":"HandleEvents"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"remoteSource":{"fileName":"BreakpointSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/BreakpointSequence.swift#L59"}},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"breakpointOnError"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"HandleEvents","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"Example","type":"heading","text":"Example","level":2},{"type":"codeListing","syntax":null,"code":["let stream = AsyncStream<Int> { continuation in","    continuation.finish(throwing: MyError())","}","for try await value in stream.breakpointOnError() {","    print(value)","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations"]]},"kind":"symbol","identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/breakpointOnError()","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/PassthroughSubject/AsyncSequence-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/afluent\/passthroughsubject\/asyncsequence-implementations","kind":"article","role":"collectionGroup","title":"AsyncSequence Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]},"doc://Afluent/documentation/Afluent/AsyncSequences/HandleEvents":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HandleEvents"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HandleEvents"}],"title":"AsyncSequences.HandleEvents","url":"\/documentation\/afluent\/asyncsequences\/handleevents","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/HandleEvents","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Used as the implementation detail for the "},{"type":"codeVoice","code":"AsyncSequence\/handleEvents(receiveMakeIterator:receiveNext:receiveOutput:receiveError:receiveComplete:receiveCancel:)"},{"type":"text","text":" operator."}]},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"navigatorTitle":[{"text":"PassthroughSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","role":"symbol","title":"PassthroughSubject","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PassthroughSubject","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/passthroughsubject","kind":"symbol","abstract":[{"text":"A subject that broadcasts values to multiple consumers without storing a current value.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"code":"CurrentValueSubject","type":"codeVoice"},{"text":", ","type":"text"},{"code":"PassthroughSubject","type":"codeVoice"},{"text":" does not retain the most recent value.","type":"text"},{"text":" ","type":"text"},{"text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s PassthroughSubject."}]},"doc://Afluent/documentation/Afluent/PassthroughSubject/breakpointOnError()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/breakpointOnError()","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Introduces a breakpoint into the async sequence when an error occurs."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpointOnError","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"HandleEvents","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO12HandleEventsV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"breakpointOnError()","url":"\/documentation\/afluent\/passthroughsubject\/breakpointonerror()","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}}}}