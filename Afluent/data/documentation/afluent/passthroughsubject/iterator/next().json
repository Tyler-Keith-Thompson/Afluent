{"variants":[{"paths":["\/documentation\/afluent\/passthroughsubject\/iterator\/next()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/Iterator"]]},"abstract":[{"type":"text","text":"Inherited from "},{"code":"AsyncIteratorProtocol.next()","type":"codeVoice"},{"type":"text","text":"."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}]}],"kind":"declarations"}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/Iterator\/next()","interfaceLanguage":"swift"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"role":"symbol","title":"next()","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent18PassthroughSubjectC8IteratorV4nextxSgyYaKF","symbolKind":"method","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/PassthroughSubject.swift#L53","fileName":"PassthroughSubject.swift"},"roleHeading":"Instance Method"},"references":{"doc://Afluent/documentation/Afluent/PassthroughSubject/Iterator/next()":{"url":"\/documentation\/afluent\/passthroughsubject\/iterator\/next()","title":"next()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/Iterator\/next()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"next","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol","abstract":[],"type":"topic"},"doc://Afluent/documentation/Afluent/PassthroughSubject/Iterator":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","title":"PassthroughSubject.Iterator","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/Iterator","kind":"symbol","url":"\/documentation\/afluent\/passthroughsubject\/iterator","role":"symbol"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"navigatorTitle":[{"text":"PassthroughSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","role":"symbol","title":"PassthroughSubject","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PassthroughSubject","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/passthroughsubject","kind":"symbol","abstract":[{"text":"A subject that broadcasts values to multiple consumers without storing a current value.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"code":"CurrentValueSubject","type":"codeVoice"},{"text":", ","type":"text"},{"code":"PassthroughSubject","type":"codeVoice"},{"text":" does not retain the most recent value.","type":"text"},{"text":" ","type":"text"},{"text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s PassthroughSubject."}]}}}