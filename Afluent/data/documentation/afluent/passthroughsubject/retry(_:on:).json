{"abstract":[{"text":"Retries the upstream ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times only when a specific error occurs."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/retry(_:on:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/passthroughsubject\/retry(_:on:)"]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations"]]},"metadata":{"symbolKind":"method","roleHeading":"Instance Method","role":"symbol","extendedModule":"_Concurrency","title":"retry(_:on:)","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"remoteSource":{"fileName":"RetrySequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L186"},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"retry","kind":"identifier"},{"kind":"text","text":"<"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC","kind":"typeIdentifier","text":"RetryOn"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"},{"text":">","kind":"text"}],"modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}],"externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retry_2onAA14AsyncSequencesO7RetryOnCy_xqd__AA0H15ByCountStrategyCGSu_qd__tSQRd__s5ErrorRd__lF::SYNTHESIZED::s:7Afluent18PassthroughSubjectC"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"retry"},{"text":"<","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"retries"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":" = 1, "},{"text":"on","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOn","kind":"typeIdentifier","text":"RetryOn","preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SQ","text":"Equatable"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"retries","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to retry the upstream, defaulting to 1.","type":"text"}]}]},{"name":"error","content":[{"type":"paragraph","inlineContent":[{"text":"The specific error that should trigger a retry.","type":"text"}]}]}]},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that emits the same output as the upstream but retries on the specified error up to the specified number of times.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations."}]}],"style":"important","name":"Important"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" are notable sequences which cannot be retried on their own.","type":"text"}]}],"type":"aside","name":"Note","style":"note"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","role":"symbol","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"url":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","type":"topic","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/PassthroughSubject/AsyncSequence-Implementations":{"abstract":[],"title":"AsyncSequence Implementations","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations","type":"topic","url":"\/documentation\/afluent\/passthroughsubject\/asyncsequence-implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"text":"A ","type":"text"},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"type":"topic","title":"RetryByCountStrategy","kind":"symbol","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrybycountstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},"doc://Afluent/documentation/Afluent/PassthroughSubject/retry(_:on:)":{"abstract":[{"type":"text","text":"Retries the upstream "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" up to a specified number of times only when a specific error occurs.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/retry(_:on:)","url":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:)","title":"retry(_:on:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"retry","kind":"identifier"},{"kind":"text","text":"<"},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"text":"RetryOn","preciseIdentifier":"s:7Afluent14AsyncSequencesO7RetryOnC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/RetryOn":{"title":"AsyncSequences.RetryOn","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/RetryOn","type":"topic","role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/retryon","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryOn"}],"navigatorTitle":[{"text":"RetryOn","kind":"identifier"}],"abstract":[]},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","type":"topic","abstract":[{"text":"A subject that broadcasts values to multiple consumers without storing a current value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":", "},{"code":"PassthroughSubject","type":"codeVoice"},{"text":" does not retain the most recent value.","type":"text"},{"text":" ","type":"text"},{"text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s PassthroughSubject."}],"kind":"symbol","title":"PassthroughSubject","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PassthroughSubject"}],"url":"\/documentation\/afluent\/passthroughsubject","navigatorTitle":[{"text":"PassthroughSubject","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"title":"Afluent","role":"collection","kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent"}}}