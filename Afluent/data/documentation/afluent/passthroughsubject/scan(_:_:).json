{"metadata":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}]},"remoteSource":{"fileName":"ScanSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/ScanSequence.swift#L81"},"role":"symbol","extendedModule":"_Concurrency","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:Sci7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Scan","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","symbolKind":"method","externalID":"s:Sci7Afluents8SendableRzrlE4scanyAA14AsyncSequencesO4ScanVy_xqd__Gqd___qd__qd___7ElementQztYaYbKctsABRd__sAbJRQlF::SYNTHESIZED::s:7Afluent18PassthroughSubjectC","title":"scan(_:_:)","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations"]]},"abstract":[{"text":"Accumulates state over the elements of an asynchronous sequence, emitting each intermediate accumulated value.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initialResult"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"nextPartialResult"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV","text":"Scan"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci7ElementQa","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"initialResult","content":[{"inlineContent":[{"text":"The initial accumulated value to start with.","type":"text"}],"type":"paragraph"}]},{"name":"nextPartialResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes the current accumulated value and the next element from the upstream sequence,"},{"type":"text","text":" "},{"type":"text","text":"and returns a new accumulated value asynchronously."}]}]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An asynchronous sequence that produces each intermediate accumulated result."}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator works similarly to Combineâ€™s "},{"type":"codeVoice","code":"scan"},{"type":"text","text":" operator. It produces a sequence of values by repeatedly combining a running"},{"type":"text","text":" "},{"type":"text","text":"accumulated value with each new element from the upstream async sequence using the provided closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is useful for computing running totals, aggregating state, or applying stateful transformations over time."}]},{"anchor":"Example","text":"Example","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following example demonstrates accumulating a running sum over an asynchronous sequence of integers:","type":"text"}]},{"syntax":"swift","code":["\/\/ An async sequence producing the numbers 1 through 5","let numbers = AsyncStream<Int> { continuation in","    for i in 1...5 {","        continuation.yield(i)","    }","    continuation.finish()","}","","\/\/ Use scan to accumulate a running sum","let runningSum = numbers.scan(0) { partialSum, nextNumber in","    return partialSum + nextNumber","}","","\/\/ Consume the running sums","Task {","    for try await sum in runningSum {","        print(sum) \/\/ Prints: 1, 3, 6, 10, 15","    }","}"],"type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/scan(_:_:)"},"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/afluent\/passthroughsubject\/scan(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent/PassthroughSubject/scan(_:_:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/scan(_:_:)","kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/passthroughsubject\/scan(_:_:)","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scan"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:Sci7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Scan","preciseIdentifier":"s:7Afluent14AsyncSequencesO4ScanV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"text":"Accumulates state over the elements of an asynchronous sequence, emitting each intermediate accumulated value.","type":"text"}],"title":"scan(_:_:)"},"doc://Afluent/documentation/Afluent/PassthroughSubject/AsyncSequence-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/afluent\/passthroughsubject\/asyncsequence-implementations","kind":"article","role":"collectionGroup","title":"AsyncSequence Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject\/AsyncSequence-Implementations"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Scan":{"type":"topic","navigatorTitle":[{"text":"Scan","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Scan","url":"\/documentation\/afluent\/asyncsequences\/scan","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"abstract":[],"kind":"symbol","role":"symbol","title":"AsyncSequences.Scan"},"doc://Afluent/documentation/Afluent/PassthroughSubject":{"navigatorTitle":[{"text":"PassthroughSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/PassthroughSubject","role":"symbol","title":"PassthroughSubject","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PassthroughSubject","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/passthroughsubject","kind":"symbol","abstract":[{"text":"A subject that broadcasts values to multiple consumers without storing a current value.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"code":"CurrentValueSubject","type":"codeVoice"},{"text":", ","type":"text"},{"code":"PassthroughSubject","type":"codeVoice"},{"text":" does not retain the most recent value.","type":"text"},{"text":" ","type":"text"},{"text":"It only sends values as they are emitted, meaning consumers will only receive values that are sent after they start listening.","type":"text"},{"text":" ","type":"text"},{"text":"This is an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" that allows multiple tasks to asynchronously consume values and mimics Combineâ€™s PassthroughSubject."}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}]}}}