{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"sections":[],"topicSections":[{"anchor":"Initializers","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)"],"title":"Initializers"},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)"],"generated":true,"title":"Instance Methods"},{"anchor":"Default-Implementations","title":"Default Implementations","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"kind":"symbol","metadata":{"title":"RetryByBackoffStrategy","externalID":"s:7Afluent22RetryByBackoffStrategyC","platforms":[{"beta":false,"unavailable":false,"deprecated":false,"introducedAt":"16.0","name":"iOS"},{"unavailable":false,"beta":false,"deprecated":false,"introducedAt":"13.0","name":"macOS"},{"introducedAt":"16.0","name":"tvOS","deprecated":false,"unavailable":false,"beta":false},{"introducedAt":"9.0","name":"watchOS","deprecated":false,"unavailable":false,"beta":false}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"modules":[{"name":"Afluent"}],"roleHeading":"Class","symbolKind":"class","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"role":"symbol","remoteSource":{"fileName":"RetryByBackoffStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L39"}},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Strategy"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Strategy","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"BackoffStrategy","preciseIdentifier":"s:7Afluent15BackoffStrategyP","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"C","content":[{"inlineContent":[{"text":"The type of ","type":"text"},{"code":"Clock","type":"codeVoice"},{"text":" used for measuring time between retries.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"This actor manages retry attempts with a configurable ","type":"text"},{"type":"codeVoice","code":"BackoffStrategy"},{"text":" and clock. It uses the clock to calculate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the time delays between retries, allowing more fine-grained control over the timing of retries based on the provided"},{"type":"text","text":" "},{"type":"text","text":"backoff strategy."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This actor conforms to ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"text":" and is used to manage retries based on time delays.","type":"text"}]}],"type":"aside","name":"Note"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrybybackoffstrategy"]}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"],"type":"conformsTo","title":"Conforms To"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"references":{"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"title":"RetryStrategy","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/handle(error:beforeRetry:)":{"url":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:beforeretry:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)","abstract":[],"title":"handle(error:beforeRetry:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"handle","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"error"},{"kind":"text","text":": any "},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"beforeRetry","kind":"externalParam"},{"kind":"text","text":": (any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","kind":"symbol","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/init(_:clock:durationUnit:)":{"abstract":[{"text":"Creates a new retry strategy with the given backoff strategy and clock.","type":"text"}],"kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy\/init(_:clock:durationunit:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)","title":"init(_:clock:durationUnit:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":", "},{"text":"clock","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Strategy"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","text":"Clock"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"durationUnit"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ClockDurationUnit","preciseIdentifier":"s:7Afluent17ClockDurationUnita"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","text":"Clock","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"type":"topic"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/Actor-Implementations":{"kind":"article","title":"Actor Implementations","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy\/actor-implementations"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","type":"topic","title":"Afluent","abstract":[],"url":"\/documentation\/afluent"},"doc://Afluent/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/Afluent\/ScA","type":"unresolvable"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol","url":"\/documentation\/afluent\/backoffstrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"type":"topic","title":"BackoffStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/RetryStrategy-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations","type":"topic","abstract":[],"title":"RetryStrategy Implementations"}}}