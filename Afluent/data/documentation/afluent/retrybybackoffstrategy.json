{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"],"kind":"relationships"}],"metadata":{"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"platforms":[{"deprecated":false,"name":"iOS","introducedAt":"16.0","unavailable":false,"beta":false},{"unavailable":false,"deprecated":false,"introducedAt":"13.0","name":"macOS","beta":false},{"introducedAt":"16.0","unavailable":false,"beta":false,"deprecated":false,"name":"tvOS"},{"introducedAt":"9.0","deprecated":false,"unavailable":false,"name":"watchOS","beta":false}],"modules":[{"name":"Afluent"}],"title":"RetryByBackoffStrategy","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"symbolKind":"class","externalID":"s:7Afluent22RetryByBackoffStrategyC","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L39","fileName":"RetryByBackoffStrategy.swift"},"roleHeading":"Class","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)"],"title":"Initializers","anchor":"Initializers"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)"],"anchor":"Instance-Methods","title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Strategy","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Strategy","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Afluent15BackoffStrategyP","text":"BackoffStrategy","kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"type":"codeVoice","code":"Clock"},{"type":"text","text":" used for measuring time between retries."}]}],"name":"C"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This actor manages retry attempts with a configurable "},{"code":"BackoffStrategy","type":"codeVoice"},{"type":"text","text":" and clock. It uses the clock to calculate"},{"type":"text","text":" "},{"type":"text","text":"the time delays between retries, allowing more fine-grained control over the timing of retries based on the provided"},{"type":"text","text":" "},{"type":"text","text":"backoff strategy."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This actor conforms to "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" and is used to manage retries based on time delays."}]}],"name":"Note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrybybackoffstrategy"]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/Actor-Implementations":{"title":"Actor Implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","url":"\/documentation\/afluent\/retrybybackoffstrategy\/actor-implementations"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/handle(error:beforeRetry:)":{"kind":"symbol","abstract":[],"url":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:beforeretry:)","title":"handle(error:beforeRetry:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"error"},{"text":": any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"beforeRetry"},{"kind":"text","text":": (any "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)","type":"topic","role":"symbol"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"url":"\/documentation\/afluent\/retrystrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"kind":"symbol","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","role":"symbol","title":"RetryStrategy"},"doc://Afluent/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/Afluent\/ScA","type":"unresolvable"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/init(_:clock:durationUnit:)":{"abstract":[{"text":"Creates a new retry strategy with the given backoff strategy and clock.","type":"text"}],"title":"init(_:clock:durationUnit:)","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)","url":"\/documentation\/afluent\/retrybybackoffstrategy\/init(_:clock:durationunit:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Strategy"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"text":"Strategy","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","text":"Clock","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"durationUnit"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent17ClockDurationUnita","kind":"typeIdentifier","text":"ClockDurationUnit"},{"kind":"text","text":"<"},{"text":"Strategy","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Clock","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":">)"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"url":"\/documentation\/afluent\/backoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","title":"BackoffStrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/RetryStrategy-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","title":"RetryStrategy Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations","type":"topic","role":"collectionGroup"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","abstract":[],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","title":"Afluent","kind":"symbol"}}}