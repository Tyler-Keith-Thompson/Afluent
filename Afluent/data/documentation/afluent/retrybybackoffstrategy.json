{"sections":[],"topicSections":[{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)"]},{"generated":true,"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)"]},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations"]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Strategy"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP","text":"BackoffStrategy"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This actor manages retry attempts with a configurable ","type":"text"},{"code":"BackoffStrategy","type":"codeVoice"},{"text":" and clock. It determines delays between retries using this strategy.","type":"text"}]},{"type":"heading","anchor":"Example","level":2,"text":"Example"},{"type":"codeListing","syntax":"swift","code":["try await DeferredTask { \/* some fallible work *\/ }","    .retry(strategy: .backoff(.exponential(base: 2, maxCount: 3)))","    .execute()"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"platforms":[{"introducedAt":"16.0","unavailable":false,"name":"iOS","beta":false,"deprecated":false},{"introducedAt":"13.0","unavailable":false,"name":"macOS","beta":false,"deprecated":false},{"introducedAt":"16.0","unavailable":false,"name":"tvOS","beta":false,"deprecated":false},{"introducedAt":"9.0","unavailable":false,"name":"watchOS","beta":false,"deprecated":false}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"externalID":"s:7Afluent22RetryByBackoffStrategyC","symbolKind":"class","title":"RetryByBackoffStrategy","modules":[{"name":"Afluent"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L45","fileName":"RetryByBackoffStrategy.swift"},"roleHeading":"Class"},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrybybackoffstrategy"]}],"references":{"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/RetryStrategy-Implementations":{"title":"RetryStrategy Implementations","type":"topic","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations","url":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","kind":"article","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/Actor-Implementations":{"title":"Actor Implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup","url":"\/documentation\/afluent\/retrybybackoffstrategy\/actor-implementations"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/handle(error:beforeRetry:)":{"title":"handle(error:beforeRetry:)","url":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:beforeretry:)","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"kind":"externalParam","text":"error"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beforeRetry"},{"kind":"text","text":": (any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","role":"symbol","title":"RetryStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrystrategy","kind":"symbol"},"doc://Afluent/ScA":{"identifier":"doc:\/\/Afluent\/ScA","type":"unresolvable","title":"_Concurrency.Actor"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/init(_:clock:durationUnit:)":{"type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy\/init(_:clock:durationunit:)","title":"init(_:clock:durationUnit:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)","abstract":[{"type":"text","text":"Creates a new retry strategy with the given backoff strategy and clock."}],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":", "},{"kind":"externalParam","text":"clock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","kind":"typeIdentifier","text":"Clock"},{"kind":"text","text":", "},{"kind":"externalParam","text":"durationUnit"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent17ClockDurationUnita","kind":"typeIdentifier","text":"ClockDurationUnit"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Strategy"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa","kind":"typeIdentifier","text":"Clock"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":">)"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackoffStrategy","kind":"identifier"}],"title":"BackoffStrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies for retry mechanisms.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/backoffstrategy","role":"symbol","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"}}}