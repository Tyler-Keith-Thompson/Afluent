{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/backoff(_:)","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"backoff"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"strategy"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier","text":"ExponentialBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier","text":"ContinuousClock"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","kind":"typeIdentifier","text":"RetryByBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier","text":"ExponentialBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier","text":"ContinuousClock"},{"kind":"text","text":">>"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"This convenience function can be used with operators such as "},{"type":"codeVoice","code":".retry(strategy:)"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Example","type":"heading","level":2,"text":"Example"},{"code":["try await DeferredTask { \/* some fallible work *\/ }","    .retry(strategy: .backoff(.exponential(base: 2, maxCount: 3)))","    .execute()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrybybackoffstrategy\/backoff(_:)"]}],"metadata":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"platforms":[{"name":"iOS","introducedAt":"16.0","deprecated":false,"unavailable":false,"beta":false},{"name":"macOS","introducedAt":"13.0","deprecated":false,"unavailable":false,"beta":false},{"name":"tvOS","introducedAt":"16.0","deprecated":false,"unavailable":false,"beta":false},{"name":"watchOS","introducedAt":"9.0","deprecated":false,"unavailable":false,"beta":false}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"backoff"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier","text":"ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier","text":"ContinuousClock"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","kind":"typeIdentifier","text":"RetryByBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier","text":"ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier","text":"ContinuousClock"},{"kind":"text","text":">>"}],"title":"backoff(_:)","remoteSource":{"fileName":"RetryByBackoffStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L27"},"roleHeading":"Type Method","extendedModule":"Afluent","role":"symbol","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent13RetryStrategyPA2A0b9ByBackoffC0CyAA011ExponentialeC0Cy12_Concurrency15ContinuousClockVGGRszrlE7backoffyAlKFZ::SYNTHESIZED::s:7Afluent22RetryByBackoffStrategyC"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Creates a retry strategy using the provided exponential backoff and a continuous clock."}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/backoff(_:)":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/backoff(_:)","url":"\/documentation\/afluent\/retrybybackoffstrategy\/backoff(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Creates a retry strategy using the provided exponential backoff and a continuous clock."}],"title":"backoff(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"backoff","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ExponentialBackoffStrategy","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"RetryByBackoffStrategy","preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ExponentialBackoffStrategy","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"type":"text","text":"."}]}},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"url":"\/documentation\/afluent\/exponentialbackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","role":"symbol","kind":"symbol","type":"topic","title":"ExponentialBackoffStrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/RetryStrategy-Implementations":{"title":"RetryStrategy Implementations","type":"topic","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations","url":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","kind":"article","role":"collectionGroup"}}}