{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"],"anchor":"Instance-Methods","generated":true},{"anchor":"Type-Methods","generated":true,"title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"]}],"sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"},{"kind":"text","text":" : "},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs."},{"type":"text","text":" "},{"text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry.","type":"text"}],"type":"paragraph"}]}],"metadata":{"role":"symbol","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent13RetryStrategyP","symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"roleHeading":"Protocol","remoteSource":{"fileName":"RetryStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12"},"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy"},"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrystrategy"]}],"references":{"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"kind":"symbol","url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","title":"handle(error:beforeRetry:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handle"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"error"},{"text":": any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"text":", ","kind":"text"},{"text":"beforeRetry","kind":"externalParam"},{"text":": (any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","required":true},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"byCount","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"}],"url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)","title":"byCount(_:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a retry strategy that retries the operation up to a specified number of times."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"code":"RetryByCountStrategy","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","title":"RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrybybackoffstrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"error"},{"text":": any ","kind":"text"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","title":"handle(error:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Determines whether an operation should be retried after encountering an error.","type":"text"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"text":"A ","type":"text"},{"code":"RetryStrategy","type":"codeVoice"},{"text":" that limits the number of retry attempts.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","kind":"symbol","title":"RetryByCountStrategy","type":"topic","url":"\/documentation\/afluent\/retrybycountstrategy"},"doc://Afluent/documentation/Afluent":{"type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","kind":"symbol","abstract":[],"title":"Afluent"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"backoff","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC"},{"kind":"text","text":"<"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"RetryByBackoffStrategy","preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","text":"ContinuousClock","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","title":"backoff(_:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Creates a retry strategy using the provided backoff strategy and a continuous clock.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://Afluent/documentation/Afluent/RetryStrategy":{"kind":"symbol","url":"\/documentation\/afluent\/retrystrategy","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","title":"RetryStrategy","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"type":"topic"}}}