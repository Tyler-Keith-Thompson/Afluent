{"kind":"symbol","identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"generated":true,"title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"],"anchor":"Type-Methods"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"relationshipsSections":[{"kind":"relationships","type":"inheritsFrom","title":"Inherits From","identifiers":["doc:\/\/Afluent\/s8SendableP"]},{"kind":"relationships","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"type":"conformingTypes","title":"Conforming Types"}],"variants":[{"paths":["\/documentation\/afluent\/retrystrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry."}]}],"kind":"content"}],"metadata":{"title":"RetryStrategy","roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"modules":[{"name":"Afluent"}],"symbolKind":"protocol","role":"symbol","remoteSource":{"fileName":"RetryStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12"},"externalID":"s:7Afluent13RetryStrategyP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}]},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","title":"RetryStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"text":" that limits the number of retry attempts.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"title":"handle(error:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"text":"error","kind":"externalParam"},{"text":": any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","type":"topic","role":"collection","title":"Afluent","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"kind":"symbol","title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"title":"handle(error:beforeRetry:)","required":true,"url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","type":"topic","role":"symbol","abstract":[{"text":"Determines whether an operation should be retried after encountering an error.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"text":"error","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"beforeRetry"},{"kind":"text","text":": (any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"title":"byCount(_:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByCountStrategy"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"byCount"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy"}],"abstract":[{"text":"Creates a retry strategy that retries the operation up to a specified number of times.","type":"text"}],"url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)"},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"title":"backoff(_:)","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","role":"symbol","abstract":[{"text":"Creates a retry strategy using the provided backoff strategy and a continuous clock.","type":"text"}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"backoff"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"text":"<","kind":"text"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","text":"RetryByBackoffStrategy","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"text":"<","kind":"text"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"text":">>","kind":"text"}]}}}