{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueChannel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"code":"SingleValueChannel","type":"codeVoice"},{"text":" is an ","type":"text"},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" that can be manually completed exactly once, making it ideal for integrating legacy or delegate\/callback APIs with modern async workflows.","type":"text"}]},{"type":"heading","level":2,"text":"Example: Bridging a callback to async\/await","anchor":"Example-Bridging-a-callback-to-asyncawait"},{"type":"codeListing","syntax":null,"code":["func fetchData(url: URL) async throws -> Data {","    let channel = SingleValueChannel<Data>()","    let task = URLSession.shared.dataTask(with: url) { data, _, error in","        if let data { try? await channel.send(data) }","        else if let error { try? await channel.send(error: error) }","    }","    task.resume()","    return try await channel.execute()","}"]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Once completed, any further send or error will throw "},{"type":"codeVoice","code":"ChannelError.alreadyCompleted"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note"},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prefer this over a subject for bridging when possible, as it is more ergonomic for async\/await and similar to "},{"code":"AsyncChannel","type":"codeVoice"},{"type":"text","text":" in swift-async-algorithms."}]}],"name":"Important"}],"kind":"content"}],"abstract":[{"text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error.","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/afluent\/singlevaluechannel"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:7Afluent18SingleValueChannelC","title":"SingleValueChannel","roleHeading":"Class","modules":[{"name":"Afluent"}],"navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"symbolKind":"class","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/SingleValueChannel.swift#L29","fileName":"SingleValueChannel.swift"}},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA"]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/init()"]},{"generated":true,"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/state"]},{"generated":true,"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send()","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send(_:)","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send(error:)"]},{"generated":true,"anchor":"Enumerations","title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/ChannelError"]},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations"]}],"references":{"doc://Afluent/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","abstract":[{"text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error.","type":"text"}]},"doc://Afluent/ScA":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/ScA","title":"_Concurrency.Actor"},"doc://Afluent/documentation/Afluent/SingleValueChannel/send()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send()","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/singlevaluechannel\/send()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"}],"abstract":[{"type":"text","text":"Sends a value to the channel."}],"type":"topic","title":"send()"},"doc://Afluent/documentation/Afluent/SingleValueChannel/Actor-Implementations":{"kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/Actor-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/afluent\/singlevaluechannel\/actor-implementations","type":"topic","title":"Actor Implementations"},"doc://Afluent/documentation/Afluent/SingleValueChannel/send(error:)":{"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel\/send(error:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send(error:)","abstract":[{"text":"Sends an error to the channel.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"text":": any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"send(error:)"},"doc://Afluent/documentation/Afluent/SingleValueChannel/ChannelError":{"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelError","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/ChannelError","kind":"symbol","navigatorTitle":[{"text":"ChannelError","kind":"identifier"}],"title":"SingleValueChannel.ChannelError","url":"\/documentation\/afluent\/singlevaluechannel\/channelerror","abstract":[{"type":"text","text":"Errors specific to "},{"type":"codeVoice","code":"SingleValueChannel"},{"type":"text","text":"."}]},"doc://Afluent/documentation/Afluent/SingleValueChannel/AsynchronousUnitOfWork-Implementations":{"title":"AsynchronousUnitOfWork Implementations","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel\/asynchronousunitofwork-implementations","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations","abstract":[],"role":"collectionGroup"},"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/SingleValueChannel/send(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"title":"send(_:)","url":"\/documentation\/afluent\/singlevaluechannel\/send(_:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/send(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Sends a value to the channel."}]},"doc://Afluent/documentation/Afluent/SingleValueChannel/state":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/state","title":"state","type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Afluent9TaskStateC","text":"TaskState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[],"url":"\/documentation\/afluent\/singlevaluechannel\/state","role":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueChannel/init()":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/init()","url":"\/documentation\/afluent\/singlevaluechannel\/init()","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"SingleValueChannel"},{"type":"text","text":"."}],"type":"topic","title":"init()","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","title":"AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","url":"\/documentation\/afluent\/asynchronousunitofwork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"type":"topic"}}}