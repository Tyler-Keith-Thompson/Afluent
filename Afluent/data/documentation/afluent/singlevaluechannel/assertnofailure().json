{"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success"},{"kind":"text","text":">\n"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" that will assert if the upstream unit of work throws any non-cancellation error."}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"This operator is useful for debugging or development when you expect the upstream","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"text":" to never fail. If an unexpected error is thrown, an assertion failure","type":"text"},{"text":" ","type":"text"},{"text":"will be triggered, helping you catch and diagnose issues early.","type":"text"}],"type":"paragraph"},{"anchor":"Example","text":"Example","type":"heading","level":2},{"type":"codeListing","syntax":"swift","code":["\/\/ A unit of work that succeeds","let successWork = DeferredTask {","    return \"Success\"","}","","\/\/ Wrapping with `assertNoFailure` should not cause assertion failures here","let guaranteedSuccess = successWork.assertNoFailure()","","\/\/ Uncommenting the following would trigger an assertion failure if the task throws:","\/\/ let failingWork = DeferredTask<String> {","\/\/     throw NSError(domain: \"TestError\", code: 1)","\/\/ }","\/\/ let assertedFailingWork = failingWork.assertNoFailure()"]}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations"]]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/singlevaluechannel\/assertnofailure()"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"remoteSource":{"fileName":"AssertNoFailure.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/AssertNoFailure.swift#L58"},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"modules":[{"name":"Afluent"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"Afluent","title":"assertNoFailure()","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE15assertNoFailureQryF::SYNTHESIZED::s:7Afluent18SingleValueChannelC","symbolKind":"method"},"sections":[],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/assertNoFailure()","interfaceLanguage":"swift"},"abstract":[{"text":"Returns a new unit of work that asserts if the upstream unit of work throws any error other than cancellation.","type":"text"}],"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"url":"\/documentation\/afluent","role":"collection","type":"topic","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","abstract":[{"text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error.","type":"text"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel/AsynchronousUnitOfWork-Implementations":{"title":"AsynchronousUnitOfWork Implementations","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel\/asynchronousunitofwork-implementations","kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations","abstract":[],"role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"required":true,"abstract":[{"text":"The type of data the unit of work will produce if it succeeds.","type":"text"}],"role":"symbol","title":"Success","url":"\/documentation\/afluent\/asynchronousunitofwork\/success","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Success","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/SingleValueChannel/assertNoFailure()":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/assertNoFailure()","kind":"symbol","abstract":[{"text":"Returns a new unit of work that asserts if the upstream unit of work throws any error other than cancellation.","type":"text"}],"url":"\/documentation\/afluent\/singlevaluechannel\/assertnofailure()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier","text":"AsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">\n"}],"type":"topic","role":"symbol","title":"assertNoFailure()"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","title":"AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","url":"\/documentation\/afluent\/asynchronousunitofwork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"type":"topic"}}}