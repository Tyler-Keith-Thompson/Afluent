{"abstract":[{"type":"text","text":"Inserts conditional breakpoints into the asynchronous unit of work,"},{"type":"text","text":" "},{"type":"text","text":"allowing you to pause execution when specific output values or errors occur."}],"kind":"symbol","metadata":{"title":"breakpoint(receiveOutput:receiveError:)","roleHeading":"Instance Method","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE10breakpoint13receiveOutput0G5ErrorQrSb7SuccessQzYaYbKcSg_Sbs0I0_pYaYbKcSgtF::SYNTHESIZED::s:7Afluent18SingleValueChannelC","remoteSource":{"fileName":"Breakpoint.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/Breakpoint.swift#L53"},"extendedModule":"Afluent","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")?) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","text":"AsynchronousUnitOfWork","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","text":"Success","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"symbolKind":"method","role":"symbol","modules":[{"name":"Afluent"}]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/breakpoint(receiveOutput:receiveError:)"},"variants":[{"paths":["\/documentation\/afluent\/singlevaluechannel\/breakpoint(receiveoutput:receiveerror:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"breakpoint"},{"kind":"text","text":"("},{"kind":"externalParam","text":"receiveOutput"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier","text":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")? = nil, "},{"kind":"externalParam","text":"receiveError"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")? = nil) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier","text":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier","text":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success"},{"kind":"text","text":">\n"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that asynchronously receives successful output values."},{"type":"text","text":" "},{"type":"text","text":"If this closure returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":", a breakpoint is triggered."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", no breakpoint is triggered based on output values."}]}],"name":"receiveOutput"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that asynchronously receives errors produced by the operation."},{"type":"text","text":" "},{"type":"text","text":"If this closure returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":", a breakpoint is triggered."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", no breakpoint is triggered based on errors."}]}],"name":"receiveError"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"When the provided conditions evaluate to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", a ","type":"text"},{"code":"SIGTRAP","type":"codeVoice"},{"text":" signal is raised,","type":"text"},{"text":" ","type":"text"},{"text":"which typically causes the program to pause execution in a debugger.","type":"text"},{"text":" ","type":"text"},{"text":"This enables you to inspect state or step through code at critical points.","type":"text"}],"type":"paragraph"},{"text":"Example","anchor":"Example","type":"heading","level":2},{"syntax":"swift","type":"codeListing","code":["let task = DeferredTask<Int, Error> {","    42","}","","\/\/ Breakpoint when the output value is exactly 42","let breakpointedTask = task.breakpoint(receiveOutput: { output in","    return output == 42","})","","try await breakpointedTask.value"]},{"syntax":"swift","type":"codeListing","code":["let failingTask = DeferredTask<Int, Error> {","    throw NSError(domain: \"Example\", code: -1, userInfo: nil)","}","","\/\/ Breakpoint when any error occurs","let breakpointedTask = failingTask.breakpoint(receiveError: { error in","    return true","})","","try await breakpointedTask.value"]}]}],"references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","type":"topic"},"doc://Afluent/documentation/Afluent/SingleValueChannel/breakpoint(receiveOutput:receiveError:)":{"kind":"symbol","abstract":[{"text":"Inserts conditional breakpoints into the asynchronous unit of work,","type":"text"},{"text":" ","type":"text"},{"text":"allowing you to pause execution when specific output values or errors occur.","type":"text"}],"title":"breakpoint(receiveOutput:receiveError:)","type":"topic","url":"\/documentation\/afluent\/singlevaluechannel\/breakpoint(receiveoutput:receiveerror:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"breakpoint","kind":"identifier"},{"text":"(","kind":"text"},{"text":"receiveOutput","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"receiveError","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")?) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/breakpoint(receiveOutput:receiveError:)"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","title":"SingleValueChannel","kind":"symbol","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error."}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"type":"topic","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Success","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"The type of data the unit of work will produce if it succeeds.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork\/success","title":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","role":"symbol"}}}