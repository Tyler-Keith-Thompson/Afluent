{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H1","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"cache","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"AUOWCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"AUOWCacheStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent17AUOWCacheStrategyP"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k0","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k1","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","preciseIdentifier":"s:SH","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Hashable","preciseIdentifier":"s:SH","kind":"typeIdentifier"},{"text":"\n","kind":"text"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"cache","content":[{"inlineContent":[{"text":"The cache to share results from.","type":"text"}],"type":"paragraph"}]},{"name":"strategy","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The caching strategy."}]}]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" that shares its results from cache."}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this operator to share or de-duplicate expensive work based on custom, hashable cache keys.","type":"text"}]},{"type":"heading","level":2,"anchor":"Example","text":"Example"},{"type":"codeListing","code":["let cache = AUOWCache()","let shared = DeferredTask { UUID() }","    .shareFromCache(cache, strategy: .cacheUntilCompletionOrCancellation, keys: \"user\", 42)","async let a = shared.execute()","async let b = shared.execute()","let (val1, val2) = try await (a, b)","\/\/ val1 and val2 are guaranteed to be identical (from cache)"],"syntax":"swift"},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator should generally be placed at the end of an operator chain. Any operators applied after "},{"type":"codeVoice","code":"shareFromCache"},{"type":"text","text":" will not be shared and may result in duplicated work or side effects."}]}],"style":"important"}]}],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shareFromCache"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"H0"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"H1"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"AUOWCache","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"kind":"text","text":", "},{"kind":"externalParam","text":"strategy"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","text":"AUOWCacheStrategy","preciseIdentifier":"s:7Afluent17AUOWCacheStrategyP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"keys"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"H0"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"H1"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">\n"}],"externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE14shareFromCache_8strategy4keys_QrAA0bcdeH0C_AA17AUOWCacheStrategy_pqd__qd_0_tSHRd__SHRd_0_r0_lF::SYNTHESIZED::s:7Afluent18SingleValueChannelC","extendedModule":"Afluent","roleHeading":"Instance Method","symbolKind":"method","remoteSource":{"fileName":"ShareFromCache.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/ShareFromCache.swift#L109"},"title":"shareFromCache(_:strategy:keys:_:)","modules":[{"name":"Afluent"}]},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel"]]},"variants":[{"paths":["\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/shareFromCache(_:strategy:keys:_:)","interfaceLanguage":"swift"},"sections":[],"abstract":[{"text":"Shares the result of this unit of work from the given cache using the specified strategy and custom cache keys.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork","type":"topic"},"doc://Afluent/documentation/Afluent/AUOWCacheStrategy":{"url":"\/documentation\/afluent\/auowcachestrategy","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a cache strategy for use with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"AUOWCacheStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCacheStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"identifier"}],"title":"AUOWCacheStrategy"},"doc://Afluent/documentation/Afluent/AUOWCache":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AUOWCache"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache"},"doc://Afluent/documentation/Afluent":{"title":"Afluent","url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"type":"topic","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Success","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"The type of data the unit of work will produce if it succeeds.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork\/success","title":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","role":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","title":"SingleValueChannel","kind":"symbol","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A channel for bridging callback-based APIs to async\/await, emitting a single value or error."}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","role":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueChannel/shareFromCache(_:strategy:keys:_:)":{"url":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:)","title":"shareFromCache(_:strategy:keys:_:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/shareFromCache(_:strategy:keys:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shareFromCache","kind":"identifier"},{"text":"<","kind":"text"},{"text":"H0","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"H1","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AUOWCache","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent9AUOWCachea"},{"text":", ","kind":"text"},{"text":"strategy","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"AUOWCacheStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent17AUOWCacheStrategyP"},{"text":", ","kind":"text"},{"text":"keys","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"H0","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"H1","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"text":">\n","kind":"text"}],"kind":"symbol","abstract":[{"text":"Shares the result of this unit of work from the given cache using the specified strategy and custom cache keys.","type":"text"}],"role":"symbol","type":"topic"}}}