{"kind":"symbol","identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject\/assertNoFailure()","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"method","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/AssertNoFailure.swift#L58","fileName":"AssertNoFailure.swift"},"role":"symbol","extendedModule":"Afluent","roleHeading":"Instance Method","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE15assertNoFailureQryF::SYNTHESIZED::s:7Afluent18SingleValueSubjectC","title":"assertNoFailure()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"modules":[{"name":"Afluent"}]},"abstract":[{"type":"text","text":"Returns a new unit of work that asserts if the upstream unit of work throws any error other than cancellation."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assertNoFailure","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"A new ","type":"text"},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" that will assert if the upstream unit of work throws any non-cancellation error.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This operator is useful for debugging or development when you expect the upstream"},{"type":"text","text":" "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":" to never fail. If an unexpected error is thrown, an assertion failure"},{"type":"text","text":" "},{"type":"text","text":"will be triggered, helping you catch and diagnose issues early."}],"type":"paragraph"},{"level":2,"text":"Example","type":"heading","anchor":"Example"},{"code":["\/\/ A unit of work that succeeds","let successWork = DeferredTask {","    return \"Success\"","}","","\/\/ Wrapping with `assertNoFailure` should not cause assertion failures here","let guaranteedSuccess = successWork.assertNoFailure()","","\/\/ Uncommenting the following would trigger an assertion failure if the task throws:","\/\/ let failingWork = DeferredTask<String> {","\/\/     throw NSError(domain: \"TestError\", code: 1)","\/\/ }","\/\/ let assertedFailingWork = failingWork.assertNoFailure()"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/afluent\/singlevaluesubject\/assertnofailure()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject\/AsynchronousUnitOfWork-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent":{"type":"topic","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"type":"topic","title":"SingleValueSubject","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleValueSubject"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}],"kind":"symbol","abstract":[{"type":"text","text":"A subject for bridging callback-based APIs to async\/await, emitting a single value or error."}],"url":"\/documentation\/afluent\/singlevaluesubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork/Success":{"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofwork\/success","abstract":[{"text":"The type of data the unit of work will produce if it succeeds.","type":"text"}],"type":"topic","required":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork\/Success","role":"symbol","title":"Success","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Success","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject/AsynchronousUnitOfWork-Implementations":{"url":"\/documentation\/afluent\/singlevaluesubject\/asynchronousunitofwork-implementations","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject\/AsynchronousUnitOfWork-Implementations","kind":"article","type":"topic","title":"AsynchronousUnitOfWork Implementations","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/SingleValueSubject/assertNoFailure()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertNoFailure"},{"kind":"text","text":"() -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"AsynchronousUnitOfWork","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:7Afluent22AsynchronousUnitOfWorkP7SuccessQa"},{"kind":"text","text":">\n"}],"role":"symbol","kind":"symbol","title":"assertNoFailure()","url":"\/documentation\/afluent\/singlevaluesubject\/assertnofailure()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject\/assertNoFailure()","abstract":[{"text":"Returns a new unit of work that asserts if the upstream unit of work throws any error other than cancellation.","type":"text"}],"type":"topic"}}}