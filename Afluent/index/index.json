{"includedArchiveIdentifiers":["Afluent"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/==(_:_:)","title":"static func == (AnyCancellable, AnyCancellable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/store(in:)-1mwgh","title":"func store(in: inout some RangeReplaceableCollection<AnyCancellable>)","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/store(in:)-7fl3","title":"func store(in: inout Set<AnyCancellable>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/anycancellable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/anycancellable","title":"AnyCancellable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequencecache\/init()","title":"init()","type":"init"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequencecache\/strategy\/cacheuntilcompletionorcancellation","title":"case cacheUntilCompletionOrCancellation","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequencecache\/strategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/asyncsequencecache\/strategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequencecache\/strategy","title":"AsyncSequenceCache.Strategy","type":"enum"}],"path":"\/documentation\/afluent\/asyncsequencecache","title":"AsyncSequenceCache","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousoperation\/init(operation:)","title":"init(operation: () async throws -> Success)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousoperation\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asynchronousoperation\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asynchronousoperation\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asynchronousoperation\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousoperation","title":"AsynchronousOperation","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation\/handle(unitofwork:keyedby:storedin:)","title":"func handle<A>(unitOfWork: A, keyedBy: Int, storedIn: AUOWCache) -> AnyAsynchronousUnitOfWork<A.Success>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation\/cacheuntilcompletionorcancellation","title":"static var cacheUntilCompletionOrCancellation: AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation","type":"property"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation\/auowcachestrategy-implementations","title":"AUOWCacheStrategy Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cacheuntilcompletionorcancellation","title":"AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/handle(unitofwork:keyedby:storedin:)","title":"func handle<A>(unitOfWork: A, keyedBy: Int, storedIn: AUOWCache) -> AnyAsynchronousUnitOfWork<A.Success>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/cancelandrestart","title":"static var cancelAndRestart: AsynchronousUnitOfWorkCache.CancelAndRetry","type":"property"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry\/auowcachestrategy-implementations","title":"AUOWCacheStrategy Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/cancelandretry","title":"AsynchronousUnitOfWorkCache.CancelAndRetry","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/clearasynchronousunitofwork(withkey:)","title":"func clearAsynchronousUnitOfWork(withKey: Int)","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/create(unitofwork:keyedby:)","title":"func create<A>(unitOfWork: A, keyedBy: Int) -> A","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/retrieve(keyedby:)","title":"func retrieve(keyedBy: Int) -> (any AsynchronousUnitOfWork & AnySendableReference)?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/retrieveorcreate(unitofwork:keyedby:)","title":"func retrieveOrCreate<A>(unitOfWork: A, keyedBy: Int) -> A","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache","title":"AsynchronousUnitOfWorkCache","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/iterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/iterator\/next()-42mfa","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/iterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/currentvaluesubject\/iterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/currentvaluesubject\/iterator","title":"CurrentValueSubject.Iterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/init()","title":"convenience init()","type":"init"},{"path":"\/documentation\/afluent\/currentvaluesubject\/init(_:)","title":"init(Element)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/value","title":"var value: Element","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/makeasynciterator()","title":"func makeAsyncIterator() -> CurrentValueSubject<Element>.Iterator","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/send()","title":"func send()","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/send(_:)","title":"func send(Element)","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/send(completion:)","title":"func send(completion: CurrentValueSubject<Element>.Completion<any Error>)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/completion\/failure(_:)","title":"case failure(Failure)","type":"case"},{"path":"\/documentation\/afluent\/currentvaluesubject\/completion\/finished","title":"case finished","type":"case"}],"path":"\/documentation\/afluent\/currentvaluesubject\/completion","title":"CurrentValueSubject.Completion","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:_:)-4t0ph","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:_:)-6fqjv","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:)-34ad7","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:)-4vycy","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-3w4yf","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-49znc","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-4zj40","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-8mt36","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/currentvaluesubject\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/currentvaluesubject\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:_:)-4t0ph","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:_:)-6fqjv","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:)-34ad7","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:)-4vycy","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-3w4yf","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-49znc","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-4zj40","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/retry(_:on:_:)-8mt36","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/currentvaluesubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/currentvaluesubject\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/currentvaluesubject","title":"CurrentValueSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/init(operation:)","title":"init(operation: () async throws -> Success)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/deferredtask\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/result","title":"var result: Result<Self.Success, any Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/delay(for:)","title":"func delay(for: Duration) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/delay(for:clock:tolerance:)","title":"func delay<C>(for: C.Duration, clock: C, tolerance: C.Duration?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/execute(executorpreference:priority:)","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/execute(priority:)","title":"func execute(priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-5wx8c","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-60nyn","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/handleevents(receiveoperation:receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOperation: (() async throws -> Void)?, receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-15f1f","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-833ps","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, any Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:_:)-3l0c8","title":"func retry<D>(some RetryStrategy, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:_:)-45cpc","title":"func retry<D>(UInt, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:)-2f06f","title":"func retry<E>(UInt, on: E.Type) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:)-36643","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)-31jg4","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)-370pe","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)-52udt","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)-7zpl4","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/run(executorpreference:priority:)","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/run(priority:)","title":"func run(priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & Actor","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: any AUOWCacheStrategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/subscribe(executorpreference:priority:)","title":"func subscribe(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/subscribe(priority:)","title":"func subscribe(priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/timeout(_:clock:tolerance:customerror:)","title":"func timeout<C>(C.Duration, clock: C, tolerance: C.Duration?, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/timeout(_:customerror:)","title":"func timeout(Duration, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, any Error>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: @autoclosure () -> any Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/init(base:maxcount:maxdelay:)-3j13l","title":"init(base: UInt, maxCount: UInt, maxDelay: Clock.Duration)","type":"init"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/init(base:maxcount:maxdelay:)-4kgu6","title":"init(base: UInt, maxCount: UInt, maxDelay: Clock.Duration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/backoff(clock:durationunit:)","title":"func backoff<T>(clock: Clock, durationUnit: (T) -> Clock.Duration) async throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/binaryexponential(maxcount:maxdelay:)","title":"static func binaryExponential(maxCount: UInt, maxDelay: ContinuousClock.Duration) -> ExponentialBackoffStrategy<Self.Clock>","type":"method"},{"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/exponential(base:maxcount:maxdelay:)","title":"static func exponential(base: UInt, maxCount: UInt, maxDelay: ContinuousClock.Duration) -> ExponentialBackoffStrategy<Self.Clock>","type":"method"}],"path":"\/documentation\/afluent\/exponentialbackoffstrategy\/backoffstrategy-implementations","title":"BackoffStrategy Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/exponentialbackoffstrategy","title":"ExponentialBackoffStrategy","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/iterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/iterator\/next()-67x0x","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/iterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/passthroughsubject\/iterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/passthroughsubject\/iterator","title":"PassthroughSubject.Iterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/makeasynciterator()","title":"func makeAsyncIterator() -> PassthroughSubject<Element>.Iterator","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/send()","title":"func send()","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/send(_:)","title":"func send(Element)","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/send(completion:)","title":"func send(completion: PassthroughSubject<Element>.Completion<any Error>)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/completion\/failure(_:)","title":"case failure(Failure)","type":"case"},{"path":"\/documentation\/afluent\/passthroughsubject\/completion\/finished","title":"case finished","type":"case"}],"path":"\/documentation\/afluent\/passthroughsubject\/completion","title":"PassthroughSubject.Completion","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:_:)-3tq4x","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:_:)-viot","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:)-34bqv","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:)-75zeb","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-4lwy6","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-5d1vl","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-8m9ow","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-en71","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/passthroughsubject\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/passthroughsubject\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:_:)-3tq4x","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:_:)-viot","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:)-34bqv","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:)-75zeb","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-4lwy6","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-5d1vl","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-8m9ow","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/retry(_:on:_:)-en71","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/passthroughsubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/passthroughsubject\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/passthroughsubject","title":"PassthroughSubject","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/enqueue(_:)","title":"func enqueue(consuming ExecutorJob)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/mainqueue","title":"static var mainQueue: QueueExecutor","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/globalqueue(qos:)","title":"static func globalQueue(qos: DispatchQoS.QoSClass) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/queueexecutor\/queue(_:)","title":"static func queue(DispatchQueue) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/queueexecutor\/queue(label:qos:attributes:autoreleasefrequency:target:)","title":"static func queue(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?) -> QueueExecutor","type":"method"}],"path":"\/documentation\/afluent\/queueexecutor\/taskexecutor-implementations","title":"TaskExecutor Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/mainqueue","title":"static var mainQueue: QueueExecutor","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/queueexecutor\/globalqueue(qos:)","title":"static func globalQueue(qos: DispatchQoS.QoSClass) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/queueexecutor\/queue(_:)","title":"static func queue(DispatchQueue) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/queueexecutor\/queue(label:qos:attributes:autoreleasefrequency:target:)","title":"static func queue(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?) -> QueueExecutor","type":"method"}],"path":"\/documentation\/afluent\/queueexecutor\/taskexecutor-implementations","title":"TaskExecutor Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/queueexecutor","title":"QueueExecutor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/init(_:clock:durationunit:)","title":"init(Strategy, clock: Strategy.Clock, durationUnit: ClockDurationUnit<Strategy.Clock, Int>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:beforeretry:)","title":"func handle(error: any Error, beforeRetry: (any Error) async throws -> Void) async throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/retrybybackoffstrategy\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:)","title":"func handle(error: any Error) async throws -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybybackoffstrategy\/backoff(_:)","title":"static func backoff(ExponentialBackoffStrategy<ContinuousClock>) -> RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>","type":"method"}],"path":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","title":"RetryStrategy Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/init(retrycount:)","title":"init(retryCount: UInt)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/handle(error:beforeretry:)","title":"func handle(error: any Error, beforeRetry: (any Error) async throws -> Void) async throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/retrybycountstrategy\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/handle(error:)","title":"func handle(error: any Error) async throws -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrybycountstrategy\/bycount(_:)","title":"static func byCount(UInt) -> RetryByCountStrategy","type":"method"}],"path":"\/documentation\/afluent\/retrybycountstrategy\/retrystrategy-implementations","title":"RetryStrategy Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/retrybycountstrategy","title":"RetryByCountStrategy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/serialtaskqueue\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/serialtaskqueue\/cancelall()","title":"func cancelAll()","type":"method"},{"path":"\/documentation\/afluent\/serialtaskqueue\/enqueue(_:)-53amy","title":"func enqueue<T>(() async throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/afluent\/serialtaskqueue\/enqueue(_:)-9308e","title":"func enqueue(() async throws -> Void)","type":"method"},{"path":"\/documentation\/afluent\/serialtaskqueue\/queue(_:)","title":"func queue<T>(() async throws -> T) async throws -> T","type":"method"}],"path":"\/documentation\/afluent\/serialtaskqueue","title":"SerialTaskQueue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send()","title":"func send() throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send(_:)","title":"func send(Success) throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send(error:)","title":"func send(error: any Error) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/alreadycompleted","title":"case alreadyCompleted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror","title":"SingleValueChannel.ChannelError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/singlevaluechannel\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/result","title":"var result: Result<Self.Success, any Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/delay(for:)","title":"func delay(for: Duration) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/delay(for:clock:tolerance:)","title":"func delay<C>(for: C.Duration, clock: C, tolerance: C.Duration?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/execute(executorpreference:priority:)","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/execute(priority:)","title":"func execute(priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/flatmap(_:)-5ez8t","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/flatmap(_:)-uqak","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/handleevents(receiveoperation:receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOperation: (() async throws -> Void)?, receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/map(_:)-496pn","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/map(_:)-7x83k","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, any Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:_:)-6ui4o","title":"func retry<D>(UInt, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:_:)-90d8g","title":"func retry<D>(some RetryStrategy, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:)-4g557","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:)-9x25x","title":"func retry<E>(UInt, on: E.Type) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:_:)-1g9gp","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:_:)-23253","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:_:)-6288g","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:_:)-85xdj","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/run(executorpreference:priority:)","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/run(priority:)","title":"func run(priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & Actor","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: any AUOWCacheStrategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/subscribe(executorpreference:priority:)","title":"func subscribe(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/subscribe(priority:)","title":"func subscribe(priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/timeout(_:clock:tolerance:customerror:)","title":"func timeout<C>(C.Duration, clock: C, tolerance: C.Duration?, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/timeout(_:customerror:)","title":"func timeout(Duration, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, any Error>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: @autoclosure () -> any Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/singlevaluechannel\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send()","title":"func send() throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send(_:)","title":"func send(Success) throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send(error:)","title":"func send(error: any Error) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/alreadycompleted","title":"case alreadyCompleted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror","title":"SingleValueSubject.SubjectError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/result","title":"var result: Result<Self.Success, any Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/delay(for:)","title":"func delay(for: Duration) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/delay(for:clock:tolerance:)","title":"func delay<C>(for: C.Duration, clock: C, tolerance: C.Duration?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/execute(executorpreference:priority:)","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/execute(priority:)","title":"func execute(priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/flatmap(_:)-6lgwd","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/flatmap(_:)-ho0z","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/handleevents(receiveoperation:receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOperation: (() async throws -> Void)?, receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/map(_:)-6wv7y","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/map(_:)-hjb9","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, any Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:_:)-1w4p5","title":"func retry<D>(some RetryStrategy, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:_:)-2lkj0","title":"func retry<D>(UInt, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:)-5o4kv","title":"func retry<E>(UInt, on: E.Type) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:)-7ae5","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:_:)-15arl","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:_:)-1vk1m","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:_:)-94s3z","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:_:)-pea2","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/run(executorpreference:priority:)","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/run(priority:)","title":"func run(priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & Actor","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: any AUOWCacheStrategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subscribe(executorpreference:priority:)","title":"func subscribe(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subscribe(priority:)","title":"func subscribe(priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/timeout(_:clock:tolerance:customerror:)","title":"func timeout<C>(C.Duration, clock: C, tolerance: C.Duration?, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/timeout(_:customerror:)","title":"func timeout(Duration, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, any Error>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: @autoclosure () -> any Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/singlevaluesubject\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluesubject","title":"SingleValueSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/taskstate\/init()","title":"init()","type":"init"}],"path":"\/documentation\/afluent\/taskstate","title":"TaskState","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/auowcachestrategy\/handle(unitofwork:keyedby:storedin:)","title":"func handle<A>(unitOfWork: A, keyedBy: Int, storedIn: AUOWCache) -> AnyAsynchronousUnitOfWork<A.Success>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/auowcachestrategy\/cacheuntilcompletionorcancellation","title":"static var cacheUntilCompletionOrCancellation: AsynchronousUnitOfWorkCache.CacheUntilCompletionOrCancellation","type":"property"},{"path":"\/documentation\/afluent\/auowcachestrategy\/cancelandrestart","title":"static var cancelAndRestart: AsynchronousUnitOfWorkCache.CancelAndRetry","type":"property"}],"path":"\/documentation\/afluent\/auowcachestrategy","title":"AUOWCacheStrategy","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/success","title":"Success","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/result-3gy7m","title":"var result: Result<Self.Success, any Error>","type":"property"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/result","title":"var result: Result<Self.Success, any Error>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/state","title":"var state: TaskState<Self.Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()-76n0u","title":"func cancel()","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/delay(for:)","title":"func delay(for: Duration) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/delay(for:clock:tolerance:)","title":"func delay<C>(for: C.Duration, clock: C, tolerance: C.Duration?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute(executorpreference:priority:)-9ehos","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute(executorpreference:priority:)","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute(priority:)-49duq","title":"func execute(priority: TaskPriority?) async throws -> Self.Success","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute(priority:)","title":"func execute(priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-4z8wr","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-5r25z","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/handleevents(receiveoperation:receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOperation: (() async throws -> Void)?, receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-56k56","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-6wk6l","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, any Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:)-2r9xa","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:)-80wp8","title":"func retry(some RetryStrategy) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:_:)-4df17","title":"func retry<D>(some RetryStrategy, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:_:)-7siu4","title":"func retry<D>(UInt, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:)-1v7ra","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:)-5uz5b","title":"func retry<E>(UInt, on: E.Type) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)-69z8x","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)-6p22a","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)-78cgo","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)-wcnj","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/run(executorpreference:priority:)-42krq","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/run(executorpreference:priority:)","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/run(priority:)-7vzgs","title":"func run(priority: TaskPriority?)","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/run(priority:)","title":"func run(priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & Actor","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: any AUOWCacheStrategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/subscribe(executorpreference:priority:)","title":"func subscribe(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/subscribe(priority:)","title":"func subscribe(priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/timeout(_:clock:tolerance:customerror:)","title":"func timeout<C>(C.Duration, clock: C, tolerance: C.Duration?, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/timeout(_:customerror:)","title":"func timeout(Duration, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, any Error>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: @autoclosure () -> any Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/backoffstrategy\/clock","title":"Clock","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/backoffstrategy\/backoff(clock:durationunit:)","title":"func backoff<T>(clock: Self.Clock, durationUnit: (T) -> Self.Clock.Duration) async throws -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/backoffstrategy\/binaryexponential(maxcount:maxdelay:)","title":"static func binaryExponential(maxCount: UInt, maxDelay: ContinuousClock.Duration) -> ExponentialBackoffStrategy<Self.Clock>","type":"method"},{"path":"\/documentation\/afluent\/backoffstrategy\/exponential(base:maxcount:maxdelay:)","title":"static func exponential(base: UInt, maxCount: UInt, maxDelay: ContinuousClock.Duration) -> ExponentialBackoffStrategy<Self.Clock>","type":"method"}],"path":"\/documentation\/afluent\/backoffstrategy","title":"BackoffStrategy","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrystrategy\/handle(error:)","title":"func handle(error: any Error) async throws -> Bool","type":"method"},{"path":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","title":"func handle(error: any Error, beforeRetry: (any Error) async throws -> Void) async throws -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","title":"static func backoff(ExponentialBackoffStrategy<ContinuousClock>) -> RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>","type":"method"},{"path":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","title":"static func byCount(UInt) -> RetryByCountStrategy","type":"method"}],"path":"\/documentation\/afluent\/retrystrategy","title":"RetryStrategy","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/input","title":"Input","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Self.Input) throws -> T","type":"method"}],"path":"\/documentation\/afluent\/topleveldecoder","title":"TopLevelDecoder","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/encode(_:)","title":"func encode<T>(T) throws -> Self.Output","type":"method"}],"path":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/init(_:)","title":"init(any AsynchronousUnitOfWork<Success>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/result","title":"var result: Result<Success, any Error>","type":"property"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/state","title":"var state: TaskState<Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/execute(executorpreference:priority:)","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Success","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/execute(priority:)","title":"func execute(priority: TaskPriority?) async throws -> Success","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/run(executorpreference:priority:)","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/run(priority:)","title":"func run(priority: TaskPriority?)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/delay(for:)","title":"func delay(for: Duration) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/delay(for:clock:tolerance:)","title":"func delay<C>(for: C.Duration, clock: C, tolerance: C.Duration?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/execute(executorpreference:priority:)-1x2db","title":"func execute(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/flatmap(_:)-59de","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/flatmap(_:)-lran","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/handleevents(receiveoperation:receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOperation: (() async throws -> Void)?, receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/map(_:)-40tu9","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/map(_:)-6cm1r","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, any Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:_:)-3q7cs","title":"func retry<D>(UInt, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:_:)-52sy4","title":"func retry<D>(some RetryStrategy, (any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:)-5nsfh","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:)-5w3z0","title":"func retry<E>(UInt, on: E.Type) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:_:)-12h7g","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:_:)-2z3ik","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:_:)-7u6mn","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:_:)-9w7ra","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/run(executorpreference:priority:)-35ay5","title":"func run(executorPreference: (any TaskExecutor)?, priority: TaskPriority?)","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & Actor","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: any AUOWCacheStrategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: any AUOWCacheStrategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/subscribe(executorpreference:priority:)","title":"func subscribe(executorPreference: (any TaskExecutor)?, priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/subscribe(priority:)","title":"func subscribe(priority: TaskPriority?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/timeout(_:clock:tolerance:customerror:)","title":"func timeout<C>(C.Duration, clock: C, tolerance: C.Duration?, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/timeout(_:customerror:)","title":"func timeout(Duration, customError: (any Error)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, any Error>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: @autoclosure () -> any Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/anyasynchronousunitofwork","title":"AnyAsynchronousUnitOfWork","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/iterator\/next()","title":"func next() async rethrows -> AsyncBroadcastSequence<Base>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/iterator\/next()-l2td","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/iterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncbroadcastsequence\/iterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncbroadcastsequence\/iterator","title":"AsyncBroadcastSequence.Iterator","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/compactmap(_:)-23ppd","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/compactmap(_:)-3t75g","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/drop(while:)-7fcj","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/drop(while:)-9n3ac","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/filter(_:)-2m8ik","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/filter(_:)-8w9dn","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-2ffem","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-4nogi","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-62bct","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-99i6r","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncBroadcastSequence<Base>.Iterator","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/map(_:)-5du2w","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/map(_:)-97sdm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(while:)-4u44v","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(while:)-7q7qf","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/element","title":"AsyncBroadcastSequence.Element","type":"typealias"}],"path":"\/documentation\/afluent\/asyncbroadcastsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/compactmap(_:)-23ppd","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/compactmap(_:)-3t75g","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/drop(while:)-7fcj","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/drop(while:)-9n3ac","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/filter(_:)-2m8ik","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/filter(_:)-8w9dn","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-2ffem","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-4nogi","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-62bct","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/flatmap(_:)-99i6r","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncBroadcastSequence<Base>.Iterator","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/map(_:)-5du2w","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/map(_:)-97sdm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(while:)-4u44v","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/prefix(while:)-7q7qf","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncbroadcastsequence\/element","title":"AsyncBroadcastSequence.Element","type":"typealias"}],"path":"\/documentation\/afluent\/asyncbroadcastsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncbroadcastsequence","title":"AsyncBroadcastSequence","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator\/next()","title":"func next() async throws -> UnitOfWork.Success?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator\/next()-8xb4q","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator","title":"AsynchronousUnitOfWorkSequence.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsynchronousUnitOfWorkSequence<UnitOfWork>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/element","title":"AsynchronousUnitOfWorkSequence.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)-176f3","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)-38cbe","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)-1je38","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)-358cl","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-39p3t","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-755s5","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-78ypz","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-8cx0z","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)-176f3","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)-38cbe","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)-1je38","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)-358cl","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-39p3t","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-755s5","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-78ypz","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)-8cx0z","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","title":"func Race<T>(cancelAllOnWin: Bool, () async throws -> T, against: () async throws -> T...) async throws -> T","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/auowcache","title":"AUOWCache","type":"typealias"},{"path":"\/documentation\/afluent\/anyasyncsequence","title":"AnyAsyncSequence","type":"typealias"},{"path":"\/documentation\/afluent\/anysendablereference","title":"AnySendableReference","type":"typealias"},{"path":"\/documentation\/afluent\/clockdurationunit","title":"ClockDurationUnit","type":"typealias"},{"path":"\/documentation\/afluent\/deferred","title":"Deferred","type":"typealias"},{"path":"\/documentation\/afluent\/just","title":"Just","type":"typealias"},{"path":"\/documentation\/afluent\/timersequence","title":"TimerSequence","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Retry<Upstream, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/element","title":"AsyncSequences.Retry.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-3ymcj","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-479gi","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)-6kwy3","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)-kaj","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)-7vhqb","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)-jxk3","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-3l34f","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-5p1hq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-75tbw","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-86cgj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-1ut05","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-7cx8","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)-1irk2","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)-9au7v","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-3ymcj","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-479gi","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)-6kwy3","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)-kaj","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)-7vhqb","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)-jxk3","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-3l34f","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-5p1hq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-75tbw","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-86cgj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-1ut05","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-7cx8","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)-1irk2","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)-9au7v","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retry","title":"AsyncSequences.Retry","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryAfterFlatMapping<Upstream, Downstream, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/element","title":"AsyncSequences.RetryAfterFlatMapping.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-1c4pa","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-89l2h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)-4krtv","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)-6bloz","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)-1ccpy","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)-1j7qy","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-40sn8","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-411fe","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6qkm9","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6w456","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-23lae","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-9uds6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)-65chj","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)-cz4h","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-1c4pa","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-89l2h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)-4krtv","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)-6bloz","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)-1ccpy","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)-1j7qy","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-40sn8","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-411fe","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6qkm9","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6w456","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-23lae","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-9uds6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)-65chj","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)-cz4h","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping","title":"AsyncSequences.RetryAfterFlatMapping","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOn<Upstream, Failure, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/element","title":"AsyncSequences.RetryOn.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)-1t88g","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)-3xevd","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)-2dul9","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)-2mgoy","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-6mmzk","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-77tf6","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-7etci","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-99dec","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)-1t88g","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)-3xevd","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)-2dul9","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)-2mgoy","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-6mmzk","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-77tf6","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-7etci","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)-99dec","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon","title":"AsyncSequences.RetryOn","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOnAfterFlatMapping<Upstream, Failure, Downstream, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/element","title":"AsyncSequences.RetryOnAfterFlatMapping.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)-37xiq","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)-8xov9","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-27i5u","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-66yvr","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-3dw9o","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-535hw","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-5op9x","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-93y05","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)-37xiq","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)-8xov9","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-27i5u","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)-66yvr","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-3dw9o","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-535hw","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-5op9x","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)-93y05","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping","title":"AsyncSequences.RetryOnAfterFlatMapping","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOnCast<Upstream, Failure, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/element","title":"AsyncSequences.RetryOnCast.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/compactmap(_:)-2kf0q","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/compactmap(_:)-7nrt4","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/drop(while:)-54xgx","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/drop(while:)-5r3bc","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/filter(_:)-662sx","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/filter(_:)-75xag","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-1jihd","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-7m644","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-7rs3f","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-9mqqz","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/map(_:)-2vhy0","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/map(_:)-jvlc","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(while:)-2agkh","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(while:)-4doxu","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/compactmap(_:)-2kf0q","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/compactmap(_:)-7nrt4","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/drop(while:)-54xgx","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/drop(while:)-5r3bc","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/filter(_:)-662sx","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/filter(_:)-75xag","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-1jihd","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-7m644","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-7rs3f","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/flatmap(_:)-9mqqz","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/map(_:)-2vhy0","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/map(_:)-jvlc","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(while:)-2agkh","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/prefix(while:)-4doxu","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncast\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncast","title":"AsyncSequences.RetryOnCast","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOnCastAfterFlatMapping<Upstream, Failure, Downstream, Strategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/element","title":"AsyncSequences.RetryOnCastAfterFlatMapping.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:_:)-12wss","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:_:)-4ss9x","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:)-1cms8","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:)-4vy4n","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-119tu","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-1kbkt","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-62541","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-nb99","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:_:)-12wss","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:_:)-4ss9x","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:)-1cms8","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:)-4vy4n","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-119tu","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-1kbkt","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-62541","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/retry(_:on:_:)-nb99","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryoncastafterflatmapping","title":"AsyncSequences.RetryOnCastAfterFlatMapping","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator\/next()-45q0t","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator","title":"AsyncSequences.AnyAsyncIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/init(erasing:)","title":"init<S>(erasing: S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.AnyAsyncIterator<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-4rcyu","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-72i2y","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)-44fro","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)-9t1b6","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)-6npfl","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)-81qpu","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-4br3r","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-5f9jj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-6guhu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-6sjx3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-4d12i","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-7i4mq","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)-69hwu","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)-79gzx","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-4rcyu","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-72i2y","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)-44fro","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)-9t1b6","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)-6npfl","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)-81qpu","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-4br3r","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-5f9jj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-6guhu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-6sjx3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-4d12i","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-7i4mq","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)-69hwu","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)-79gzx","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence","title":"AsyncSequences.AnyAsyncSequence","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.AssertNoFailure<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asynciterator\/next()-z66l","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asynciterator","title":"AsyncSequences.AssertNoFailure.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.AssertNoFailure<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/element","title":"AsyncSequences.AssertNoFailure.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:_:)-6jq30","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:_:)-s4lz","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-2v0mu","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-405cl","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-38yzu","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-3r3bs","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-78aum","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-8ti80","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:_:)-6jq30","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:_:)-s4lz","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-2v0mu","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:)-405cl","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-38yzu","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-3r3bs","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-78aum","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/retry(_:on:_:)-8ti80","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/assertnofailure","title":"AsyncSequences.AssertNoFailure","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Catch<Upstream, Downstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator\/next()-21ewm","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator","title":"AsyncSequences.Catch.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Catch<Upstream, Downstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/element","title":"AsyncSequences.Catch.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)-4qvns","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)-5tokx","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)-9lony","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)-af6i","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-1na47","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-1yvar","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-2jl4g","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-45miq","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)-4qvns","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)-5tokx","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)-9lony","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)-af6i","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-1na47","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-1yvar","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-2jl4g","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)-45miq","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/catch","title":"AsyncSequences.Catch","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Collect<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/asynciterator\/next()-87ale","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/collect\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/collect\/asynciterator","title":"AsyncSequences.Collect.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Collect<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/element","title":"AsyncSequences.Collect.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/compactmap(_:)-4s5cm","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/compactmap(_:)-7eik1","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/drop(while:)-1s5h4","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/drop(while:)-75y9v","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/filter(_:)-80usr","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/filter(_:)-9kckr","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-102t3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-2e78f","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-6n8ga","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-8hbsa","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/map(_:)-4o0kd","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/map(_:)-84dj","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(while:)-1rxs0","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(while:)-5p5vi","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/collect\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/compactmap(_:)-4s5cm","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/compactmap(_:)-7eik1","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/drop(while:)-1s5h4","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/drop(while:)-75y9v","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/filter(_:)-80usr","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/filter(_:)-9kckr","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-102t3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-2e78f","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-6n8ga","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/flatmap(_:)-8hbsa","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/map(_:)-4o0kd","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/map(_:)-84dj","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(while:)-1rxs0","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/prefix(while:)-5p5vi","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/collect\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/collect\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/collect","title":"AsyncSequences.Collect","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Decode<Upstream, Decoder, DecodedType>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/asynciterator\/next()-6rixh","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/decode\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/decode\/asynciterator","title":"AsyncSequences.Decode.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Decode<Upstream, Decoder, DecodedType>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/element","title":"AsyncSequences.Decode.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/compactmap(_:)-1dne5","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/compactmap(_:)-7vywb","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/drop(while:)-5z2zb","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/drop(while:)-9a0tx","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/filter(_:)-2sb6m","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/filter(_:)-6kzw6","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-27h2g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-28pfd","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-8yhaq","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-u2ju","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/map(_:)-4t3o0","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/map(_:)-5e6fm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(while:)-8op6m","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(while:)-8uc04","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/decode\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/compactmap(_:)-1dne5","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/compactmap(_:)-7vywb","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/drop(while:)-5z2zb","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/drop(while:)-9a0tx","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/filter(_:)-2sb6m","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/filter(_:)-6kzw6","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-27h2g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-28pfd","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-8yhaq","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/flatmap(_:)-u2ju","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/map(_:)-4t3o0","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/map(_:)-5e6fm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(while:)-8op6m","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/prefix(while:)-8uc04","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/decode\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/decode\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/decode","title":"AsyncSequences.Decode","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator\/next()","title":"func next() async throws -> Upstream.AsyncIterator.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator\/next()-6twy5","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","title":"AsyncSequences.Deferred.AsyncIterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","title":"init(upstream: () -> Upstream)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Deferred<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/element","title":"AsyncSequences.Deferred.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:_:)-1x15z","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:_:)-81a8b","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:)-8ujy0","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:)-yet7","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-35tgz","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-39943","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-3hwwr","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-4hiw4","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:_:)-1x15z","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:_:)-81a8b","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:)-8ujy0","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:)-yet7","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-35tgz","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-39943","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-3hwwr","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:on:_:)-4hiw4","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/deferred\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/deferred","title":"AsyncSequences.Deferred","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Delay<Upstream, C>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/asynciterator\/next()-19qq2","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/delay\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/delay\/asynciterator","title":"AsyncSequences.Delay.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Delay<Upstream, C>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/element","title":"AsyncSequences.Delay.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:_:)-1azso","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:_:)-1luue","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:)-1ymno","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:)-kfz2","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-1fy4u","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-4d9of","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-9jrrb","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-9uzn1","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/delay\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:_:)-1azso","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:_:)-1luue","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:)-1ymno","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:)-kfz2","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-1fy4u","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-4d9of","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-9jrrb","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/retry(_:on:_:)-9uzn1","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/delay\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/delay\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/delay","title":"AsyncSequences.Delay","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asynciterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asynciterator\/next()-5kupc","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asynciterator","title":"AsyncSequences.Dematerialize.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Dematerialize<Upstream, Element>.AsyncIterator","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-8mwyd","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-9fcv1","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:)-5m97b","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:)-9h589","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-2vto8","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-7yfyr","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-8damq","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-9pop3","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-8mwyd","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:_:)-9fcv1","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:)-5m97b","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:)-9h589","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-2vto8","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-7yfyr","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-8damq","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/retry(_:on:_:)-9pop3","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/dematerialize\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/dematerialize","title":"AsyncSequences.Dematerialize","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Encode<Upstream, Encoder>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/asynciterator\/next()-9vfij","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/encode\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/encode\/asynciterator","title":"AsyncSequences.Encode.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Encode<Upstream, Encoder>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/element","title":"AsyncSequences.Encode.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:_:)-2ihg3","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:_:)-7pjwl","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:)-5kkks","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:)-7g01c","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-4oudx","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-6appy","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-6xmxd","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-77gwl","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/encode\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:_:)-2ihg3","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:_:)-7pjwl","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:)-5kkks","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:)-7g01c","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-4oudx","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-6appy","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-6xmxd","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/retry(_:on:_:)-77gwl","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/encode\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/encode\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/encode","title":"AsyncSequences.Encode","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asynciterator\/next()","title":"func next() async throws -> SegmentOfResult.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asynciterator\/next()-8tk2x","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asynciterator","title":"AsyncSequences.FlatMap.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.FlatMap<Upstream, SegmentOfResult>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/element","title":"AsyncSequences.FlatMap.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/compactmap(_:)-1r838","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/compactmap(_:)-3u410","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/drop(while:)-1ur1k","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/drop(while:)-7ga2h","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/filter(_:)-1u98f","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/filter(_:)-2o5oy","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-306nu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-5g4ih","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-5ijge","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-6ubnv","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/map(_:)-48b6y","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/map(_:)-4qktq","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(while:)-1hjcy","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(while:)-2o864","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/compactmap(_:)-1r838","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/compactmap(_:)-3u410","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/drop(while:)-1ur1k","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/drop(while:)-7ga2h","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/filter(_:)-1u98f","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/filter(_:)-2o5oy","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-306nu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-5g4ih","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-5ijge","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/flatmap(_:)-6ubnv","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/map(_:)-48b6y","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/map(_:)-4qktq","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(while:)-1hjcy","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/prefix(while:)-2o864","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/flatmap\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/flatmap","title":"AsyncSequences.FlatMap","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.GroupBy<Upstream, Key>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asynciterator\/next()-7a51c","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asynciterator","title":"AsyncSequences.GroupBy.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.GroupBy<Upstream, Key>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/element","title":"AsyncSequences.GroupBy.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/compactmap(_:)-3hr4t","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/compactmap(_:)-8tgef","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/drop(while:)-1749x","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/drop(while:)-7hq3c","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/filter(_:)-8flll","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/filter(_:)-948qz","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-2tnqq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-30kpn","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-5ix7j","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-9ky3h","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/map(_:)-1b48c","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/map(_:)-4qysv","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(while:)-2acka","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(while:)-4rvle","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/compactmap(_:)-3hr4t","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/compactmap(_:)-8tgef","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/drop(while:)-1749x","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/drop(while:)-7hq3c","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/filter(_:)-8flll","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/filter(_:)-948qz","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-2tnqq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-30kpn","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-5ix7j","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/flatmap(_:)-9ky3h","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/map(_:)-1b48c","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/map(_:)-4qysv","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(while:)-2acka","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/prefix(while:)-4rvle","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/groupby\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/groupby\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/groupby","title":"AsyncSequences.GroupBy","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.HandleEvents<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator\/next()-3zngc","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator","title":"AsyncSequences.HandleEvents.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.HandleEvents<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/element","title":"AsyncSequences.HandleEvents.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-7gqp1","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-951fk","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)-2zza","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)-92q33","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)-1bu0r","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)-cf1o","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-1zex8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-39ldt","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-41d45","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-7eito","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-1tre6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-47m9a","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)-16fyo","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)-8hi8s","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-7gqp1","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-951fk","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)-2zza","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)-92q33","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)-1bu0r","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)-cf1o","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-1zex8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-39ldt","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-41d45","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-7eito","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-1tre6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-47m9a","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)-16fyo","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)-8hi8s","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents","title":"AsyncSequences.HandleEvents","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/asynciterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/asynciterator\/next()-7y5en","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/just\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/just\/asynciterator","title":"AsyncSequences.Just.AsyncIterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/init(_:)","title":"init(Element)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Just<Element>.AsyncIterator","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:_:)-342t7","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:_:)-6bnyf","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:)-3mky2","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:)-56se9","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-1m5mp","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-2d6j3","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-4bv3j","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-840m2","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/just\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:_:)-342t7","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:_:)-6bnyf","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:)-3mky2","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:)-56se9","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-1m5mp","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-2d6j3","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-4bv3j","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/retry(_:on:_:)-840m2","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/just\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/just\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/just","title":"AsyncSequences.Just","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.MapError<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asynciterator\/next()-52f95","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asynciterator","title":"AsyncSequences.MapError.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.MapError<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/element","title":"AsyncSequences.MapError.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/compactmap(_:)-5w1bn","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/compactmap(_:)-8xa98","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/drop(while:)-4vup2","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/drop(while:)-6dlje","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/filter(_:)-3tbg7","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/filter(_:)-47sxq","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-2v8i1","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-5s4wk","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-9clqz","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-apcq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/map(_:)-7x2v2","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/map(_:)-9itq1","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(while:)-2zayy","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(while:)-3vl0x","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/compactmap(_:)-5w1bn","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/compactmap(_:)-8xa98","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/drop(while:)-4vup2","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/drop(while:)-6dlje","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/filter(_:)-3tbg7","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/filter(_:)-47sxq","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-2v8i1","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-5s4wk","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-9clqz","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/flatmap(_:)-apcq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/map(_:)-7x2v2","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/map(_:)-9itq1","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(while:)-2zayy","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/prefix(while:)-3vl0x","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/maperror\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/maperror\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/maperror","title":"AsyncSequences.MapError","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Materialize<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asynciterator\/next()-527qz","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asynciterator","title":"AsyncSequences.Materialize.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Materialize<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/element","title":"AsyncSequences.Materialize.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/compactmap(_:)-28p58","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/compactmap(_:)-6v3tu","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/drop(while:)-2298k","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/drop(while:)-e7x9","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/filter(_:)-63dgn","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/filter(_:)-65hsl","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-2gecr","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-57x74","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-8onut","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-9h796","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/map(_:)-3sdsy","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/map(_:)-43kb5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(while:)-4r8yl","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(while:)-n8dm","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/compactmap(_:)-28p58","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/compactmap(_:)-6v3tu","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/drop(while:)-2298k","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/drop(while:)-e7x9","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/filter(_:)-63dgn","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/filter(_:)-65hsl","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-2gecr","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-57x74","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-8onut","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/flatmap(_:)-9h796","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/map(_:)-3sdsy","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/map(_:)-43kb5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(while:)-4r8yl","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/prefix(while:)-n8dm","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/materialize\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/materialize\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/materialize","title":"AsyncSequences.Materialize","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.OutputAt<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asynciterator\/next()-18gz6","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asynciterator","title":"AsyncSequences.OutputAt.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.OutputAt<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/element","title":"AsyncSequences.OutputAt.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/compactmap(_:)-6xqej","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/compactmap(_:)-91qh","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/drop(while:)-1tepf","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/drop(while:)-4i2dc","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/filter(_:)-556ch","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/filter(_:)-8fily","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-2ju8g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-52020","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-7mj87","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-7t6gu","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/map(_:)-1q3u5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/map(_:)-4aiw6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(while:)-28skp","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(while:)-9utm7","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/compactmap(_:)-6xqej","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/compactmap(_:)-91qh","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/drop(while:)-1tepf","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/drop(while:)-4i2dc","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/filter(_:)-556ch","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/filter(_:)-8fily","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-2ju8g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-52020","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-7mj87","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/flatmap(_:)-7t6gu","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/map(_:)-1q3u5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/map(_:)-4aiw6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(while:)-28skp","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/prefix(while:)-9utm7","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputat\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputat\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/outputat","title":"AsyncSequences.OutputAt","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.OutputIn<Upstream>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asynciterator\/next()-96n2c","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asynciterator","title":"AsyncSequences.OutputIn.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.OutputIn<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/element","title":"AsyncSequences.OutputIn.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/compactmap(_:)-7pcrr","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/compactmap(_:)-9hamw","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/drop(while:)-2kw5z","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/drop(while:)-599uo","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/filter(_:)-4bh8x","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/filter(_:)-7nw8i","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-3bggg","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-4ahc8","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-6v0cb","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-8kix6","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/map(_:)-2hlb1","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/map(_:)-3j0dm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(while:)-1heuh","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(while:)-mulc","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/compactmap(_:)-7pcrr","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/compactmap(_:)-9hamw","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/drop(while:)-2kw5z","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/drop(while:)-599uo","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/filter(_:)-4bh8x","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/filter(_:)-7nw8i","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-3bggg","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-4ahc8","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-6v0cb","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/flatmap(_:)-8kix6","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/map(_:)-2hlb1","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/map(_:)-3j0dm","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(while:)-1heuh","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/prefix(while:)-mulc","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/outputin\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/outputin\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/outputin","title":"AsyncSequences.OutputIn","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.ReplaceError<Upstream, Output>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asynciterator\/next()-3g9u6","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asynciterator","title":"AsyncSequences.ReplaceError.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.ReplaceError<Upstream, Output>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/element","title":"AsyncSequences.ReplaceError.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/compactmap(_:)-3oua6","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/compactmap(_:)-810xi","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/drop(while:)-4st8s","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/drop(while:)-6uq9t","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/filter(_:)-7sjw6","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/filter(_:)-8az41","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-14rqy","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-1x3wk","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-329y7","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-4hxlf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/map(_:)-68wou","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/map(_:)-8wrlg","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(while:)-5ixxd","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(while:)-870s","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/compactmap(_:)-3oua6","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/compactmap(_:)-810xi","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/drop(while:)-4st8s","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/drop(while:)-6uq9t","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/filter(_:)-7sjw6","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/filter(_:)-8az41","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-14rqy","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-1x3wk","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-329y7","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/flatmap(_:)-4hxlf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/map(_:)-68wou","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/map(_:)-8wrlg","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(while:)-5ixxd","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/prefix(while:)-870s","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replaceerror\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/replaceerror","title":"AsyncSequences.ReplaceError","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.ReplaceNil<Upstream, Output>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asynciterator\/next()-4uvwk","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asynciterator","title":"AsyncSequences.ReplaceNil.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.ReplaceNil<Upstream, Output>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/element","title":"AsyncSequences.ReplaceNil.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/compactmap(_:)-1go7z","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/compactmap(_:)-6g3on","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/drop(while:)-7d5id","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/drop(while:)-91075","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/filter(_:)-16hve","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/filter(_:)-j4fb","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-20clc","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-3ms7p","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-69hej","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-9cw8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/map(_:)-3nlk9","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/map(_:)-92rk2","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(while:)-5aveg","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(while:)-87kpa","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/compactmap(_:)-1go7z","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/compactmap(_:)-6g3on","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/drop(while:)-7d5id","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/drop(while:)-91075","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/filter(_:)-16hve","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/filter(_:)-j4fb","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-20clc","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-3ms7p","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-69hej","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/flatmap(_:)-9cw8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/map(_:)-3nlk9","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/map(_:)-92rk2","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(while:)-5aveg","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/prefix(while:)-87kpa","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/replacenil\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/replacenil","title":"AsyncSequences.ReplaceNil","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Scan<Upstream, Output>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/asynciterator\/next()-7scpy","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/scan\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/scan\/asynciterator","title":"AsyncSequences.Scan.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Scan<Upstream, Output>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/element","title":"AsyncSequences.Scan.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/compactmap(_:)-3kem8","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/compactmap(_:)-4b07e","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/drop(while:)-1gowr","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/drop(while:)-2z75w","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/filter(_:)-71cq7","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/filter(_:)-8hp8n","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-2tzvz","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-4508p","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-6v47u","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-7060","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/map(_:)-21v9","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/map(_:)-94gx8","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(while:)-5aizi","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(while:)-8efns","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/scan\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/compactmap(_:)-3kem8","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/compactmap(_:)-4b07e","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/drop(while:)-1gowr","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/drop(while:)-2z75w","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/filter(_:)-71cq7","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/filter(_:)-8hp8n","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-2tzvz","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-4508p","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-6v47u","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/flatmap(_:)-7060","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/map(_:)-21v9","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/map(_:)-94gx8","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(while:)-5aizi","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/prefix(while:)-8efns","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/scan\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/scan\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/scan","title":"AsyncSequences.Scan","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Throttle<Upstream, C>.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asynciterator\/next()-2r6mh","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asynciterator","title":"AsyncSequences.Throttle.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Throttle<Upstream, C>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/element","title":"AsyncSequences.Throttle.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/compactmap(_:)-454p5","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/compactmap(_:)-c897","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-2q59y","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-35mdo","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-3b4ie","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-qlev","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/map(_:)-9p4jt","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/map(_:)-9ypqe","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/compactmap(_:)-454p5","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/compactmap(_:)-c897","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-2q59y","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-35mdo","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-3b4ie","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/flatmap(_:)-qlev","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/map(_:)-9p4jt","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/map(_:)-9ypqe","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/throttle\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/throttle\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/throttle","title":"AsyncSequences.Throttle","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asynciterator\/next()","title":"func next() async -> C.Instant?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asynciterator\/next()-be01","title":"func next() async throws(Self.Failure) -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asynciterator","title":"AsyncSequences.TimerSequence.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.TimerSequence<C>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/element","title":"AsyncSequences.TimerSequence.Element","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/publish(every:tolerance:)","title":"static func publish(every: ContinuousClock.Duration, tolerance: ContinuousClock.Duration?) -> AsyncSequences.TimerSequence<C>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/publish(every:tolerance:clock:)","title":"static func publish(every: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.TimerSequence<C>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/compactmap(_:)-2ebi0","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/compactmap(_:)-6fgpn","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-2vhxa","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-4r7uf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-83mpj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-qehf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/map(_:)-2bwq3","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/map(_:)-rohi","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/compactmap(_:)-2ebi0","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/compactmap(_:)-6fgpn","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-2vhxa","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-4r7uf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-83mpj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/flatmap(_:)-qehf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/map(_:)-2bwq3","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/map(_:)-rohi","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/timersequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/timersequence","title":"AsyncSequences.TimerSequence","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/completion\/failure(_:)","title":"case failure(Failure)","type":"case"},{"path":"\/documentation\/afluent\/asyncsequences\/completion\/finished","title":"case finished","type":"case"}],"path":"\/documentation\/afluent\/asyncsequences\/completion","title":"AsyncSequences.Completion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/event\/complete","title":"case complete","type":"case"},{"path":"\/documentation\/afluent\/asyncsequences\/event\/element(_:)","title":"case element(Element)","type":"case"},{"path":"\/documentation\/afluent\/asyncsequences\/event\/failure(_:)","title":"case failure(any Error)","type":"case"}],"path":"\/documentation\/afluent\/asyncsequences\/event","title":"AsyncSequences.Event","type":"enum"}],"path":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/subscriptiondemand\/unlimited","title":"case unlimited","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/subscriptiondemand\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/subscriptiondemand\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/subscriptiondemand","title":"SubscriptionDemand","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/timedout(duration:)","title":"case timedOut(duration: any DurationProtocol)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/timedout","title":"static var timedOut: TimeoutError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/afluent\/timeouterror\/==(_:_:)","title":"static func == (TimeoutError, TimeoutError) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/timeouterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/timeouterror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/timeouterror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/afluent\/timeouterror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/afluent\/timeouterror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/afluent\/timeouterror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/timeouterror","title":"TimeoutError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/failedretaining","title":"case failedRetaining","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/unretainederror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/unretainederror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/unretainederror","title":"UnretainedError","type":"enum"},{"path":"\/documentation\/afluent\/workers","title":"Workers","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/urlsession\/deferreddatatask(for:)","title":"func deferredDataTask(for: URLRequest) -> some AsynchronousUnitOfWork<(data: Data, response: URLResponse)>\n","type":"method"},{"path":"\/documentation\/afluent\/foundation\/urlsession\/deferreddatatask(from:)","title":"func deferredDataTask(from: URL) -> some AsynchronousUnitOfWork<(data: Data, response: URLResponse)>\n","type":"method"}],"path":"\/documentation\/afluent\/foundation\/urlsession","title":"URLSession","type":"extension"}],"path":"\/documentation\/afluent\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/assertnofailure()","title":"func assertNoFailure() -> AsyncSequences.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Element) async throws -> Bool)?, receiveError: ((any Error) async throws -> Bool)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/breakpointonerror()","title":"func breakpointOnError() -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/broadcast()","title":"func broadcast() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/catch(_:)","title":"func `catch`<D>((any Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/collect()","title":"func collect() -> AsyncSequences.Collect<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> AsyncSequences.Decode<Self, D, T>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/delay(for:tolerance:)","title":"func delay(for: Duration, tolerance: Duration) -> AsyncSequences.Delay<Self, SuspendingClock>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/delay(for:tolerance:clock:)","title":"func delay<C>(for: C.Duration, tolerance: C.Duration?, clock: C) -> AsyncSequences.Delay<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/dematerialize()","title":"func dematerialize<T>() -> AsyncSequences.Dematerialize<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/discardoutput()","title":"func discardOutput() -> AsyncMapSequence<Self, Void>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/encode(encoder:)","title":"func encode<E>(encoder: E) -> AsyncSequences.Encode<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/first()","title":"func first() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/flatmap(maxsubscriptions:_:)","title":"func flatMap<SegmentOfResult>(maxSubscriptions: SubscriptionDemand, (Self.Element) async throws -> SegmentOfResult) -> AsyncSequences.FlatMap<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Self.Element) async -> Key) -> AsyncSequences.GroupBy<Self, Key>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/handleevents(receivemakeiterator:receivenext:receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveMakeIterator: (() -> Void)?, receiveNext: (() async throws -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((any Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/maperror(_:)","title":"func mapError((any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/maperror(_:_:)","title":"func mapError<E>(E, (any Error) -> any Error) -> AsyncSequences.MapError<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/materialize()","title":"func materialize() -> AsyncSequences.Materialize<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/output(at:)","title":"func output(at: Int) -> AsyncSequences.OutputAt<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/output(in:)","title":"func output<R>(in: R) -> AsyncSequences.OutputIn<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/print(_:)","title":"func print(String) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/replaceerror(with:)","title":"func replaceError(with: Self.Element) -> AsyncSequences.ReplaceError<Self, Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/replacenil(with:)","title":"func replaceNil<E>(with: E) -> AsyncSequences.ReplaceNil<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:)-4k1tj","title":"func retry<S>(S) -> AsyncSequences.Retry<Self, S>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:)-79aud","title":"func retry(UInt) -> AsyncSequences.Retry<Self, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:_:)-5ad6i","title":"func retry<D>(UInt, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:_:)-8hwho","title":"func retry<D, S>(S, (any Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D, S>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:)-1g5ka","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:)-bn9n","title":"func retry<E>(UInt, on: E.Type) -> AsyncSequences.RetryOnCast<Self, E, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:_:)-2rva","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:_:)-7urio","title":"func retry<D, E, S>(S, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:_:)-80rsz","title":"func retry<D, E, S>(S, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D, S>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:_:)-mpsv","title":"func retry<D, E>(UInt, on: E.Type, (E) async throws -> D) -> AsyncSequences.RetryOnCastAfterFlatMapping<Self, E, D, RetryByCountStrategy>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Element) async throws -> T) -> AsyncSequences.Scan<Self, T>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/share()","title":"func share() -> AsyncBroadcastSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AsyncSequenceCache, strategy: AsyncSequenceCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> AsyncBroadcastSequence<AsyncSequences.HandleEvents<Self>>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/sink(receivecompletion:receiveoutput:)","title":"func sink(receiveCompletion: ((AsyncSequences.Completion<any Error>) async -> Void)?, receiveOutput: ((Self.Element) async throws -> Void)?) -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/throttle(for:clock:latest:)","title":"func throttle<C>(for: C.Duration, clock: C, latest: Bool) -> AsyncSequences.Throttle<Self, C>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/trycatch(_:)","title":"func tryCatch<D>((any Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/_concurrency\/asyncsequence","title":"AsyncSequence","type":"extension"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/_concurrency\/taskexecutor\/mainqueue","title":"static var mainQueue: QueueExecutor","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/_concurrency\/taskexecutor\/globalqueue(qos:)","title":"static func globalQueue(qos: DispatchQoS.QoSClass) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/taskexecutor\/queue(_:)","title":"static func queue(DispatchQueue) -> QueueExecutor","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/taskexecutor\/queue(label:qos:attributes:autoreleasefrequency:target:)","title":"static func queue(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?) -> QueueExecutor","type":"method"}],"path":"\/documentation\/afluent\/_concurrency\/taskexecutor","title":"TaskExecutor","type":"extension"}],"path":"\/documentation\/afluent\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/afluent","title":"Afluent","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}