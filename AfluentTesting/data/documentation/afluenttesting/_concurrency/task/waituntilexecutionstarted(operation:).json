{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency\/Task\/waitUntilExecutionStarted(operation:)"},"abstract":[{"type":"text","text":"Spawns a new task to run an asynchronous operation and waits until that task has started execution before returning."}],"hierarchy":{"paths":[["doc:\/\/AfluentTesting\/documentation\/AfluentTesting","doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency","doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency\/Task"]]},"variants":[{"paths":["\/documentation\/afluenttesting\/_concurrency\/task\/waituntilexecutionstarted(operation:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"symbolKind":"method","title":"waitUntilExecutionStarted(operation:)","externalID":"s:ScT14AfluentTestings5Error_pRs_rlE25waitUntilExecutionStarted9operationScTyxsAB_pGxyYaYbKc_tYaKFZ","modules":[{"relatedModules":["_Concurrency"],"name":"AfluentTesting"}],"extendedModule":"_Concurrency","roleHeading":"Type Method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Success"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/AfluentTesting\/WaitUntilScheduled.swift#L40","fileName":"WaitUntilScheduled.swift"},"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"waitUntilExecutionStarted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:ScT","kind":"typeIdentifier","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"waitUntilExecutionStarted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:ScT","kind":"typeIdentifier","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An async throwing closure representing the operation to run in the spawned task."}]}],"name":"operation"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The spawned "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" running the specified operation."}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is useful when you want to guarantee that the spawned task has begun running before the caller continues, for example, to safely interact with shared state or resources initialized by the task."}]},{"content":[{"inlineContent":[{"text":"Rethrows any error thrown by the operation during its execution.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Throws","style":"note"},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"type":"codeListing","code":["@Sendable func fetchData() async throws -> String {","    \/\/ Simulates network request","    try await Task.sleep(nanoseconds: 1_000_000_000)","    return \"Data\"","}","","func testWaitUntilExecutionStarted() async throws {","    var hasStarted = false","    let task = try await Task.waitUntilExecutionStarted {","        hasStarted = true","        return try await fetchData()","    }","    \/\/ At this point `hasStarted` is guaranteed to be true because the task has started.","    assert(hasStarted)","    let result = try await task.value","    XCTAssertEqual(result, \"Data\")","}"],"syntax":"swift"}]}],"references":{"doc://AfluentTesting/documentation/AfluentTesting/_Concurrency/Task":{"type":"topic","kind":"symbol","identifier":"doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency\/Task","url":"\/documentation\/afluenttesting\/_concurrency\/task","navigatorTitle":[{"text":"Task","kind":"identifier"}],"abstract":[],"fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Task","kind":"identifier","preciseIdentifier":"s:ScT"}],"role":"symbol","title":"Task"},"doc://AfluentTesting/documentation/AfluentTesting":{"abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/AfluentTesting\/documentation\/AfluentTesting","url":"\/documentation\/afluenttesting","role":"collection","title":"AfluentTesting"},"doc://AfluentTesting/documentation/AfluentTesting/_Concurrency/Task/waitUntilExecutionStarted(operation:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Success","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"any Error","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"Spawns a new task to run an asynchronous operation and waits until that task has started execution before returning.","type":"text"}],"identifier":"doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency\/Task\/waitUntilExecutionStarted(operation:)","role":"symbol","kind":"symbol","url":"\/documentation\/afluenttesting\/_concurrency\/task\/waituntilexecutionstarted(operation:)","title":"waitUntilExecutionStarted(operation:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"waitUntilExecutionStarted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScT","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}]},"doc://AfluentTesting/documentation/AfluentTesting/_Concurrency":{"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/AfluentTesting\/documentation\/AfluentTesting\/_Concurrency","title":"_Concurrency","url":"\/documentation\/afluenttesting\/_concurrency","abstract":[]}}}