{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicmemoryfence(ordering:)"]}],"identifier":{"url":"doc:\/\/Atomics\/documentation\/Atomics\/atomicMemoryFence(ordering:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Establishes a memory ordering without associating it with a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"particular atomic operation."}],"metadata":{"role":"symbol","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Types\/AtomicMemoryOrderings.swift#L329","fileName":"AtomicMemoryOrderings.swift"},"externalID":"s:7Atomics17atomicMemoryFence8orderingyAA20AtomicUpdateOrderingV_tF","roleHeading":"Function","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"atomicMemoryFence"},{"kind":"text","text":"("},{"text":"ordering","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":")","kind":"text"}],"modules":[{"name":"Atomics"}],"title":"atomicMemoryFence(ordering:)","symbolKind":"func"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicMemoryFence"},{"kind":"text","text":"("},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicUpdateOrdering","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"kind":"text","text":")"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"items":[{"content":[{"inlineContent":[{"text":"A relaxed fence has no effect.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"An acquiring fence ties to any preceding atomic operation that"},{"text":" ","type":"text"},{"text":"reads a value, and synchronizes with any releasing operation whose","type":"text"},{"type":"text","text":" "},{"text":"value was read.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A releasing fence ties to any subsequent atomic operation that"},{"text":" ","type":"text"},{"text":"modifies a value, and synchronizes with any acquiring operation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that reads the result."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An acquiring and releasing fence is a combination of an"},{"text":" ","type":"text"},{"type":"text","text":"acquiring and a releasing fence."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A sequentially consistent fence behaves like an acquiring and","type":"text"},{"text":" ","type":"text"},{"text":"releasing fence, and ensures that the fence itself is part of","type":"text"},{"text":" ","type":"text"},{"text":"the single, total ordering for all sequentially consistent","type":"text"},{"type":"text","text":" "},{"text":"operations.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This operation corresponds to ","type":"text"},{"type":"codeVoice","code":"std::atomic_thread_fence"},{"text":" in C++.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be aware that Thread Sanitizer does not support fences and may report"},{"text":" ","type":"text"},{"type":"text","text":"false-positive races for data protected by a fence."}]}]}],"references":{"doc://Atomics/documentation/Atomics/AtomicUpdateOrdering":{"title":"AtomicUpdateOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operation."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomicUpdateOrdering","kind":"identifier"}],"navigatorTitle":[{"text":"AtomicUpdateOrdering","kind":"identifier"}],"type":"topic","url":"\/documentation\/atomics\/atomicupdateordering","role":"symbol","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicUpdateOrdering"},"doc://Atomics/documentation/Atomics/atomicMemoryFence(ordering:)":{"title":"atomicMemoryFence(ordering:)","role":"symbol","url":"\/documentation\/atomics\/atomicmemoryfence(ordering:)","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/atomicMemoryFence(ordering:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"atomicMemoryFence","kind":"identifier"},{"kind":"text","text":"("},{"text":"ordering","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":")","kind":"text"}],"abstract":[{"text":"Establishes a memory ordering without associating it with a","type":"text"},{"text":" ","type":"text"},{"text":"particular atomic operation.","type":"text"}]},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"}}}