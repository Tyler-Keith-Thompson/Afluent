{"metadata":{"title":"AtomicReference","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Protocols\/AtomicReference.swift#L48","fileName":"AtomicReference.swift"},"symbolKind":"protocol","roleHeading":"Protocol","role":"symbol","modules":[{"name":"Atomics"}],"externalID":"s:7Atomics15AtomicReferenceP","navigatorTitle":[{"kind":"identifier","text":"AtomicReference"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AtomicReference","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics"]]},"identifier":{"url":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicReference","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Atomic-Value-Protocols","title":"Atomic Value Protocols","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/AtomicValue","doc:\/\/Atomics\/documentation\/Atomics\/AtomicInteger","doc:\/\/Atomics\/documentation\/Atomics\/AtomicOptionalWrappable"],"generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomicReference","kind":"identifier"},{"text":" : AnyObject, ","kind":"text"},{"preciseIdentifier":"s:7Atomics23AtomicOptionalWrappableP","kind":"typeIdentifier","text":"AtomicOptionalWrappable","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicOptionalWrappable"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":null,"code":["class MyObject: AtomicReference {}","","let object = MyObject()","let ref = ManagedAtomic<MyObject>(object)","","ref.load(ordering: .relaxed) \/\/ Returns `object`."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The conforming class is allowed to be non-final, but "},{"type":"codeVoice","code":"ManagedAtomic"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnsafeAtomic"},{"text":" do not support using a subclass as their generic argument â€“","type":"text"},{"type":"text","text":" "},{"text":"the type of an atomic reference must be precisely the same class that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"originally conformed to the protocol."}]},{"code":["class Derived: MyObject {}","","let ref2: ManagedAtomic<Derived>","\/\/ error: 'ManagedAtomic' requires the types 'Derived' and 'Base' be equivalent"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that this limitation only affects the static type of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ManagedAtomic"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"UnsafeAtomic"},{"type":"text","text":" variables. Such references still fully"},{"text":" ","type":"text"},{"type":"text","text":"support holding instances of subclasses of the conforming class. (Returned"},{"type":"text","text":" "},{"type":"text","text":"may be downcasted from the base type after an "},{"code":"is","type":"codeVoice"},{"text":" check.)","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let child = Derived()","ref.store(child, ordering: .relaxed) \/\/ OK!","let value = ref.load(ordering: .relaxed)","\/\/ `value` is a variable of type `MyObject`, holding a `Derived` instance.","print(value is Derived) \/\/ Prints \"true\""],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicreference"]}],"relationshipsSections":[{"identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/AtomicOptionalWrappable","doc:\/\/Atomics\/documentation\/Atomics\/AtomicValue"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"}],"kind":"symbol","abstract":[{"type":"text","text":"A class type that supports atomic strong references."}],"references":{"doc://Atomics/documentation/Atomics/AtomicOptionalWrappable":{"abstract":[{"type":"text","text":"An atomic value that also supports atomic operations when wrapped"},{"text":" ","type":"text"},{"text":"in an ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":". Atomic optional wrappable types come with a"},{"text":" ","type":"text"},{"type":"text","text":"standalone atomic representation for their optional-wrapped"},{"type":"text","text":" "},{"type":"text","text":"variants."}],"kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicOptionalWrappable","url":"\/documentation\/atomics\/atomicoptionalwrappable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicOptionalWrappable"}],"navigatorTitle":[{"text":"AtomicOptionalWrappable","kind":"identifier"}],"type":"topic","title":"AtomicOptionalWrappable"},"doc://Atomics/documentation/Atomics/AtomicReference":{"type":"topic","url":"\/documentation\/atomics\/atomicreference","kind":"symbol","abstract":[{"text":"A class type that supports atomic strong references.","type":"text"}],"title":"AtomicReference","navigatorTitle":[{"kind":"identifier","text":"AtomicReference"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicReference"}],"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicReference"},"doc://Atomics/documentation/Atomics/AtomicInteger":{"abstract":[{"type":"text","text":"A type that supports atomic integer operations through a separate"},{"type":"text","text":" "},{"text":"atomic storage representation.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicInteger","url":"\/documentation\/atomics\/atomicinteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicInteger"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicInteger"}],"type":"topic","title":"AtomicInteger"},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"},"doc://Atomics/documentation/Atomics/AtomicValue":{"type":"topic","url":"\/documentation\/atomics\/atomicvalue","kind":"symbol","abstract":[{"type":"text","text":"A type that supports atomic operations through a separate atomic storage"},{"type":"text","text":" "},{"text":"representation.","type":"text"}],"title":"AtomicValue","navigatorTitle":[{"kind":"identifier","text":"AtomicValue"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AtomicValue","kind":"identifier"}],"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/AtomicValue"}}}