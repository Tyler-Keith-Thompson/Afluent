{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics","doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference"]]},"variants":[{"paths":["\/documentation\/atomics\/managedatomiclazyreference\/storeifnilthenload(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"symbolKind":"method","modules":[{"name":"Atomics"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Types\/ManagedAtomicLazyReference.swift#L79","fileName":"ManagedAtomicLazyReference.swift"},"title":"storeIfNilThenLoad(_:)","externalID":"s:7Atomics26ManagedAtomicLazyReferenceC18storeIfNilThenLoadyxxnF","extendedModule":"Atomics","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"text":"Instance","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method"},"abstract":[{"text":"Atomically initializes this reference if its current value is nil, then","type":"text"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then "},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current value without updating it."}],"seeAlsoSections":[{"identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference\/load()"],"title":"Atomic Operations","generated":true,"anchor":"Atomic-Operations"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference\/storeIfNilThenLoad(_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"storeIfNilThenLoad"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"desired","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Instance"}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example demonstrates how this can be used to implement a"},{"type":"text","text":" "},{"type":"text","text":"thread-safe lazily initialized reference:"}]},{"syntax":null,"type":"codeListing","code":["class Image {","  var _histogram: UnsafeAtomicLazyReference<Histogram> = .init()","","  \/\/ This is safe to call concurrently from multiple threads.","  var atomicLazyHistogram: Histogram {","    if let histogram = _histogram.load() { return histogram }","    \/\/ Note that code here may run concurrently on","    \/\/ multiple threads, but only one of them will get to","    \/\/ succeed setting the reference.","    let histogram = ...","    return _histogram.storeIfNilThenLoad(histogram)","}"]},{"inlineContent":[{"type":"text","text":"This operation uses acquiring-and-releasing memory ordering."}],"type":"paragraph"}]}],"references":{"doc://Atomics/documentation/Atomics/ManagedAtomicLazyReference":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference","abstract":[{"text":"A reference type holding a lazily initializable atomic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strong reference, with automatic memory management."}],"url":"\/documentation\/atomics\/managedatomiclazyreference","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ManagedAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedAtomicLazyReference","kind":"identifier"}],"title":"ManagedAtomicLazyReference"},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"},"doc://Atomics/documentation/Atomics/ManagedAtomicLazyReference/storeIfNilThenLoad(_:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/atomics\/managedatomiclazyreference\/storeifnilthenload(_:)","abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"type":"text","text":"returns the initialized value. If this reference is already initialized,"},{"text":" ","type":"text"},{"type":"text","text":"then "},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"type":"text","text":" discards its supplied argument and returns"},{"type":"text","text":" "},{"text":"the current value without updating it.","type":"text"}],"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference\/storeIfNilThenLoad(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"title":"storeIfNilThenLoad(_:)"},"doc://Atomics/documentation/Atomics/ManagedAtomicLazyReference/load()":{"title":"load()","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"text":"?","kind":"text"}],"url":"\/documentation\/atomics\/managedatomiclazyreference\/load()","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference\/load()","kind":"symbol","abstract":[{"type":"text","text":"Atomically loads and returns the current value of this reference."}]}}}