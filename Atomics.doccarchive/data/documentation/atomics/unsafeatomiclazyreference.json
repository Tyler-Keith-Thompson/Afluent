{"abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"text":" ","type":"text"},{"type":"text","text":"underlying storage representation."}],"kind":"symbol","metadata":{"role":"symbol","externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV","title":"UnsafeAtomicLazyReference","roleHeading":"Structure","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Types\/UnsafeAtomicLazyReference.swift#L20","fileName":"UnsafeAtomicLazyReference.swift"},"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeAtomicLazyReference"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeAtomicLazyReference"}],"modules":[{"name":"Atomics"}],"symbolKind":"struct"},"hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Instance","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Instance","kind":"typeIdentifier"},{"text":" : AnyObject","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"These values can be set (initialized) exactly once, but read many"},{"text":" ","type":"text"},{"text":"times.","type":"text"}],"type":"paragraph"}]}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Atomics\/s15BitwiseCopyableP","doc:\/\/Atomics\/s8SendableP"],"type":"conformsTo"}],"variants":[{"paths":["\/documentation\/atomics\/unsafeatomiclazyreference"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference"},"topicSections":[{"title":"Related Types","anchor":"Related-Types","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Value"]},{"identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/init(at:)"],"title":"Initializers","anchor":"Initializers"},{"anchor":"Shorthand-Methods-for-Dynamically-Allocating-Storage","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()","doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()"],"title":"Shorthand Methods for Dynamically Allocating Storage"},{"title":"Atomic Operations","anchor":"Atomic-Operations","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)"]},{"title":"Structures","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Storage"],"anchor":"Structures","generated":true}],"seeAlsoSections":[{"anchor":"Atomic-Container-Types","identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomic","doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomic","doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference"],"generated":true,"title":"Atomic Container Types"}],"sections":[],"references":{"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/load()":{"role":"symbol","title":"load()","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/load()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Atomically loads and returns the current value of this reference."}],"type":"topic"},"doc://Atomics/documentation/Atomics/ManagedAtomic":{"url":"\/documentation\/atomics\/managedatomic","abstract":[{"type":"text","text":"A reference type holding an atomic value, with automatic memory management."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedAtomic"}],"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomic","title":"ManagedAtomic","navigatorTitle":[{"kind":"identifier","text":"ManagedAtomic"}],"type":"topic","role":"symbol"},"doc://Atomics/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Atomics\/s8SendableP"},"doc://Atomics/documentation/Atomics/ManagedAtomicLazyReference":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/ManagedAtomicLazyReference","abstract":[{"text":"A reference type holding a lazily initializable atomic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strong reference, with automatic memory management."}],"url":"\/documentation\/atomics\/managedatomiclazyreference","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ManagedAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedAtomicLazyReference","kind":"identifier"}],"title":"ManagedAtomicLazyReference"},"doc://Atomics/documentation/Atomics/UnsafeAtomic":{"url":"\/documentation\/atomics\/unsafeatomic","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomic","abstract":[{"type":"text","text":"An unsafe reference type holding an atomic value, requiring manual memory"},{"text":" ","type":"text"},{"type":"text","text":"management of the underlying storage representation."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeAtomic"}],"type":"topic","title":"UnsafeAtomic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeAtomic"}]},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"role":"symbol","title":"storeIfNilThenLoad(_:)","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current value without updating it."}],"type":"topic"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/create()":{"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()","abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"UnsafeAtomicLazyReference"},{"text":" value by dynamically allocating","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storage for it."}],"kind":"symbol","title":"create()","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"create"},{"kind":"text","text":"() -> "},{"text":"UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/create()","role":"symbol"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference":{"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference","title":"UnsafeAtomicLazyReference","url":"\/documentation\/atomics\/unsafeatomiclazyreference","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"text":" ","type":"text"},{"type":"text","text":"underlying storage representation."}],"type":"topic"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/Value":{"title":"UnsafeAtomicLazyReference.Value","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/value","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Value","type":"topic","role":"symbol","navigatorTitle":[{"text":"Value","kind":"identifier"}],"abstract":[{"text":"The value logically stored in an atomic lazy reference value.","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"identifier"}],"kind":"symbol"},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/init(at:)":{"type":"topic","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/init(at:)","title":"init(at:)","kind":"symbol","abstract":[{"type":"text","text":"Initialize an unsafe atomic lazy reference that uses the supplied memory"},{"text":" ","type":"text"},{"type":"text","text":"location for storage. The storage location must already be initialized to"},{"text":" ","type":"text"},{"text":"represent a valid atomic value.","type":"text"}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","text":"UnsafeAtomicLazyReference","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV7StorageV","text":"Storage"},{"text":">)","kind":"text"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/init(at:)"},"doc://Atomics/s15BitwiseCopyableP":{"type":"unresolvable","identifier":"doc:\/\/Atomics\/s15BitwiseCopyableP","title":"Swift.BitwiseCopyable"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/destroy()":{"title":"destroy()","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/destroy()","type":"topic","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"destroy"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Instance"},{"text":">.","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV5Valuea"}],"kind":"symbol","abstract":[{"text":"Disposes of the current value of the storage location corresponding to","type":"text"},{"type":"text","text":" "},{"text":"this unsafe atomic lazy reference, then deinitializes and deallocates the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storage."}]},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/Storage":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Storage"}],"abstract":[{"type":"text","text":"The storage representation for an atomic lazy reference value."}],"title":"UnsafeAtomicLazyReference.Storage","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Storage","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storage","type":"topic","navigatorTitle":[{"text":"Storage","kind":"identifier"}],"role":"symbol"}}}