{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV4loadxSgyF","extendedModule":"Atomics","roleHeading":"Instance Method","title":"load()","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Types\/UnsafeAtomicLazyReference.swift#L166","fileName":"UnsafeAtomicLazyReference.swift"},"modules":[{"name":"Atomics"}],"symbolKind":"method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics","doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference"]]},"abstract":[{"text":"Atomically loads and returns the current value of this reference.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomiclazyreference\/load()"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"load"},{"text":"() -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The load operation is performed with the memory ordering"},{"type":"text","text":" "},{"type":"codeVoice","code":"AtomicLoadOrdering.acquiring"},{"text":".","type":"text"}],"type":"paragraph"}]}],"seeAlsoSections":[{"anchor":"Atomic-Operations","generated":true,"identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)"],"title":"Atomic Operations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()"},"references":{"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/load()":{"role":"symbol","title":"load()","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/load()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Atomically loads and returns the current value of this reference."}],"type":"topic"},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference":{"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference","title":"UnsafeAtomicLazyReference","url":"\/documentation\/atomics\/unsafeatomiclazyreference","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"text":" ","type":"text"},{"type":"text","text":"underlying storage representation."}],"type":"topic"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"role":"symbol","title":"storeIfNilThenLoad(_:)","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current value without updating it."}],"type":"topic"}}}