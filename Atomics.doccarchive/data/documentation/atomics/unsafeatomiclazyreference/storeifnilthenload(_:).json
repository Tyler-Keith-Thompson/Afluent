{"seeAlsoSections":[{"identifiers":["doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()"],"generated":true,"title":"Atomic Operations","anchor":"Atomic-Operations"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Atomics\/documentation\/Atomics","doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"text":"Instance","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example demonstrates how this can be used to implement a"},{"type":"text","text":" "},{"type":"text","text":"thread-safe lazily initialized reference:"}]},{"code":["class Image {","  var _histogram: UnsafeAtomicLazyReference<Histogram> = .init()","","  \/\/ This is safe to call concurrently from multiple threads.","  var atomicLazyHistogram: Histogram {","    if let histogram = _histogram.load() { return histogram }","    \/\/ Note that code here may run concurrently on","    \/\/ multiple threads, but only one of them will get to","    \/\/ succeed setting the reference.","    let histogram = ...","    return _histogram.storeIfNilThenLoad(histogram)","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"This operation uses acquiring-and-releasing memory ordering.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"method","modules":[{"name":"Atomics"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-atomics\/Sources\/Atomics\/Types\/UnsafeAtomicLazyReference.swift#L146","fileName":"UnsafeAtomicLazyReference.swift"},"title":"storeIfNilThenLoad(_:)","externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV18storeIfNilThenLoadyxxnF","extendedModule":"Atomics","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Instance","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)"]}],"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"type":"text","text":" discards its supplied argument and returns"},{"text":" ","type":"text"},{"text":"the current value without updating it.","type":"text"}],"kind":"symbol","references":{"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/load()":{"role":"symbol","title":"load()","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/load()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Atomically loads and returns the current value of this reference."}],"type":"topic"},"doc://Atomics/documentation/Atomics":{"type":"topic","url":"\/documentation\/atomics","kind":"symbol","abstract":[{"type":"text","text":"An atomics library for Swift."}],"title":"Atomics","role":"collection","identifier":"doc:\/\/Atomics\/documentation\/Atomics"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"role":"symbol","title":"storeIfNilThenLoad(_:)","kind":"symbol","identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current value without updating it."}],"type":"topic"},"doc://Atomics/documentation/Atomics/UnsafeAtomicLazyReference":{"identifier":"doc:\/\/Atomics\/documentation\/Atomics\/UnsafeAtomicLazyReference","title":"UnsafeAtomicLazyReference","url":"\/documentation\/atomics\/unsafeatomiclazyreference","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"text":" ","type":"text"},{"type":"text","text":"underlying storage representation."}],"type":"topic"}}}