{"sections":[],"metadata":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"init","externalID":"s:ScS17ConcurrencyExtrasEyScSyxGqd__c7ElementQyd__Rszs8SendableRd__SciRd__lufc","role":"symbol","roleHeading":"Initializer","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/AsyncStream.swift#L61","fileName":"AsyncStream.swift"},"title":"init(_:)","modules":[{"relatedModules":["_Concurrency"],"name":"ConcurrencyExtras"}],"extendedModule":"_Concurrency","platforms":[]},"abstract":[{"text":"Produces an ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"text":" from an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" by consuming the sequence till it"},{"text":" ","type":"text"},{"text":"terminates, ignoring any failure.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"sequence"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sci7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","preciseIdentifier":"s:Sci","kind":"typeIdentifier"}]}]},{"parameters":[{"name":"sequence","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An async sequence."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Useful as a kind of type eraser for live "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":"-based dependencies."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, your feature may want to subscribe to screenshot notifications. You can model"},{"text":" ","type":"text"},{"type":"text","text":"this as a dependency client that returns an "},{"code":"AsyncStream","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["struct ScreenshotsClient {","  var screenshots: () -> AsyncStream<Void>","  func callAsFunction() -> AsyncStream<Void> { self.screenshots() }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The “live” implementation of the dependency can supply a stream by erasing the appropriate"},{"type":"text","text":" "},{"code":"NotificationCenter.Notifications","type":"codeVoice"},{"text":" async sequence:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension ScreenshotsClient {","  static let live = Self(","    screenshots: {","      AsyncStream(","        NotificationCenter.default","          .notifications(named: UIApplication.userDidTakeScreenshotNotification)","          .map { _ in }","      )","    }","  )","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While your tests can use "},{"type":"codeVoice","code":"AsyncStream.makeStream"},{"text":" to spin up a controllable stream for tests:","type":"text"}]},{"syntax":"swift","code":["func testScreenshots() {","  let screenshots = AsyncStream.makeStream(of: Void.self)","","  let model = withDependencies {","    $0.screenshots = { screenshots.stream }","  } operation: {","    FeatureModel()","  }","","  XCTAssertEqual(model.screenshotCount, 0)","  screenshots.continuation.yield()  \/\/ Simulate a screenshot being taken.","  XCTAssertEqual(model.screenshotCount, 1)","}"],"type":"codeListing"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/init(_:)-nkms"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/AsyncStream"]]},"kind":"symbol","deprecationSummary":[{"inlineContent":[{"text":"Use 'any AsyncSequence<Element, Never>', instead.","type":"text"}],"type":"paragraph"}],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/AsyncStream\/init(_:)-nkms","interfaceLanguage":"swift"},"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency/AsyncStream":{"fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","preciseIdentifier":"s:ScS","text":"AsyncStream"}],"url":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/AsyncStream","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"AsyncStream"}],"title":"AsyncStream","kind":"symbol","type":"topic","role":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency/AsyncStream/init(_:)-nkms":{"abstract":[{"type":"text","text":"Produces an "},{"code":"AsyncStream","type":"codeVoice"},{"text":" from an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" by consuming the sequence till it"},{"type":"text","text":" "},{"type":"text","text":"terminates, ignoring any failure."}],"deprecated":true,"type":"topic","title":"init(_:)","url":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/init(_:)-nkms","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/AsyncStream\/init(_:)-nkms","role":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency":{"abstract":[],"title":"_Concurrency","type":"topic","kind":"symbol","url":"\/documentation\/concurrencyextras\/_concurrency","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency","role":"collection"}}}