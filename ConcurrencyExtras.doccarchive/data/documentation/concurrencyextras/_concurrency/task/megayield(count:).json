{"metadata":{"modules":[{"name":"ConcurrencyExtras","relatedModules":["_Concurrency"]}],"externalID":"s:ScT17ConcurrencyExtrass5NeverORszACRs_rlE9megaYield5countySi_tYaFZ","title":"megaYield(count:)","roleHeading":"Type Method","remoteSource":{"fileName":"Task.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/Task.swift#L15"},"symbolKind":"method","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Success","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Never"},{"type":"text","text":" and "},{"code":"Failure","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":"."}]},"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"megaYield","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"count"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"extendedModule":"_Concurrency","role":"symbol"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","abstract":[{"type":"text","text":"Suspends the current task a number of times before resuming with the goal of allowing other"},{"text":" ","type":"text"},{"text":"tasks to start their work.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"megaYield","kind":"identifier"},{"kind":"text","text":"("},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":" = _defaultMegaYieldCount) ","kind":"text"},{"text":"async","kind":"keyword"}],"platforms":["macOS"]}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This function can be used to make flakey async tests less flakey, as described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You may, however, prefer to use "},{"type":"codeVoice","code":"withMainSerialExecutor(operation:)-79jpc"},{"text":" to improve the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reliability of async tests, and to make their execution deterministic."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"When invoked from ","type":"text"},{"code":"withMainSerialExecutor(operation:)-79jpc","type":"codeVoice"},{"type":"text","text":", or when"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/uncheckedUseMainSerialExecutor","isActive":true,"type":"reference"},{"type":"text","text":" is set to "},{"type":"codeVoice","code":"true"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Task.megaYield()"},{"text":" is equivalent to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a single "},{"code":"Task.yield()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note"}],"kind":"content"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/Task\/megaYield(count:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/concurrencyextras\/_concurrency\/task\/megayield(count:)"]}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/Task"]]},"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency/Task/megaYield(count:)":{"title":"megaYield(count:)","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/Task\/megaYield(count:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"megaYield","kind":"identifier"},{"kind":"text","text":"("},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"url":"\/documentation\/concurrencyextras\/_concurrency\/task\/megayield(count:)","abstract":[{"type":"text","text":"Suspends the current task a number of times before resuming with the goal of allowing other"},{"type":"text","text":" "},{"text":"tasks to start their work.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Success"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"text":".","type":"text"}]},"role":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency":{"abstract":[],"title":"_Concurrency","type":"topic","kind":"symbol","url":"\/documentation\/concurrencyextras\/_concurrency","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency","role":"collection"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/_Concurrency/Task":{"title":"Task","type":"topic","role":"symbol","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"text":"Task","kind":"identifier","preciseIdentifier":"s:ScT"}],"navigatorTitle":[{"kind":"identifier","text":"Task"}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/_Concurrency\/Task","url":"\/documentation\/concurrencyextras\/_concurrency\/task"},"https://forums.swift.org/t/reliably-testing-code-that-adopts-swift-concurrency/57304":{"identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","url":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","title":"this Swift Forums post","titleInlineContent":[{"text":"this Swift Forums post","type":"text"}],"type":"link"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/uncheckedUseMainSerialExecutor":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"uncheckedUseMainSerialExecutor","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"uncheckedUseMainSerialExecutor","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/uncheckedUseMainSerialExecutor","abstract":[{"text":"Overrides Swiftâ€™s global executor with the main serial executor in an unchecked fashion.","type":"text"}],"url":"\/documentation\/concurrencyextras\/uncheckedusemainserialexecutor","kind":"symbol","type":"topic","role":"symbol"}}}