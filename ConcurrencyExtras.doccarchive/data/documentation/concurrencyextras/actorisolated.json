{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"actor"},{"text":" ","kind":"text"},{"text":"ActorIsolated","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This type is most useful when writing tests for when you want to inspect what happens inside an","type":"text"},{"text":" ","type":"text"},{"text":"async operation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you have a feature such that when a button is tapped you track some","type":"text"},{"type":"text","text":" "},{"type":"text","text":"analytics:"}]},{"type":"codeListing","code":["struct AnalyticsClient {","  var track: (String) async -> Void","}","","class FeatureModel: ObservableObject {","  let analytics: AnalyticsClient","  \/\/ ...","  func buttonTapped() {","    \/\/ ...","    await self.analytics.track(\"Button tapped\")","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then, in tests we can construct an analytics client that appends events to a mutable array"},{"text":" ","type":"text"},{"type":"text","text":"rather than actually sending events to an analytics server. However, in order to do this in a"},{"type":"text","text":" "},{"text":"safe way we should use an actor, and ","type":"text"},{"code":"ActorIsolated","type":"codeVoice"},{"text":" makes this easy:","type":"text"}],"type":"paragraph"},{"code":["func testAnalytics() async {","  let events = ActorIsolated<[String]>([])","  let analytics = AnalyticsClient(","    track: { event in await events.withValue { $0.append(event) } }","  )","  let model = FeatureModel(analytics: analytics)","  model.buttonTapped()","  await events.withValue {","    XCTAssertEqual($0, [\"Button tapped\"])","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To synchronously isolate a value, see ","type":"text"},{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}],"metadata":{"symbolKind":"class","externalID":"s:17ConcurrencyExtras13ActorIsolatedC","role":"symbol","navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"roleHeading":"Class","remoteSource":{"fileName":"ActorIsolated.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/ActorIsolated.swift#L44"},"title":"ActorIsolated","modules":[{"name":"ConcurrencyExtras"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"platforms":[]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"},"sections":[],"abstract":[{"text":"A generic wrapper for isolating a mutable value to an actor.","type":"text"}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ConcurrencyExtras\/s8SendableP","doc:\/\/ConcurrencyExtras\/ScA"],"type":"conformsTo"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'LockIsolated' instead.","type":"text"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/concurrencyextras\/actorisolated"]}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras"]]},"topicSections":[{"title":"Initializers","generated":true,"identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/init(_:)"],"anchor":"Initializers"},{"generated":true,"identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/value"],"anchor":"Instance-Properties","title":"Instance Properties"},{"identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"},{"identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/Actor-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"}],"abstract":[{"text":"A generic wrapper for isolating a mutable value with a lock.","type":"text"}],"url":"\/documentation\/concurrencyextras\/lockisolated","title":"LockIsolated","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}]},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"role":"symbol","title":"init(_:)","deprecated":true,"type":"topic","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/init(_:)","abstract":[{"text":"Initializes actor-isolated state around a value.","type":"text"}],"url":"\/documentation\/concurrencyextras\/actorisolated\/init(_:)","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/value":{"title":"value","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/value","kind":"symbol","abstract":[{"text":"The actor-isolated value.","type":"text"}],"deprecated":true,"url":"\/documentation\/concurrencyextras\/actorisolated\/value"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/withValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","role":"symbol","url":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withValue"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"deprecated":true,"type":"topic","abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"title":"withValue(_:)","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/setValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","role":"symbol","url":"\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"deprecated":true,"type":"topic","abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"title":"setValue(_:)","kind":"symbol"},"doc://ConcurrencyExtras/s8SendableP":{"identifier":"doc:\/\/ConcurrencyExtras\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"url":"\/documentation\/concurrencyextras\/actorisolated","abstract":[{"text":"A generic wrapper for isolating a mutable value to an actor.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"deprecated":true,"role":"symbol","type":"topic","title":"ActorIsolated","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol"},"doc://ConcurrencyExtras/ScA":{"identifier":"doc:\/\/ConcurrencyExtras\/ScA","type":"unresolvable","title":"_Concurrency.Actor"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/Actor-Implementations":{"title":"Actor Implementations","url":"\/documentation\/concurrencyextras\/actorisolated\/actor-implementations","role":"collectionGroup","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/Actor-Implementations","kind":"article","abstract":[],"type":"topic"}}}