{"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"setValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"newValue"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"kind":"text","text":"() "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}]}]},{"kind":"parameters","parameters":[{"name":"newValue","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to replace the current isolated value with."}]}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"codeListing","syntax":"swift","code":["\/\/ Isolate an integer for concurrent read\/write access:","let count = ActorIsolated(0)","","func reset() async {","  \/\/ Reset it:","  await self.count.setValue(0)","}"]},{"type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","isActive":true,"type":"reference"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"setValue"},{"type":"text","text":" if the value being set is derived from the"},{"type":"text","text":" "},{"type":"text","text":"current value. This isolates the entire transaction and avoids data races between reading"},{"text":" ","type":"text"},{"type":"text","text":"and writing the value."}]}],"style":"tip"}]}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'LockIsolated' instead.","type":"text"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)"]}],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","modules":[{"name":"ConcurrencyExtras"}],"externalID":"s:17ConcurrencyExtras13ActorIsolatedC8setValueyyxyYbKXKKF","title":"setValue(_:)","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/ActorIsolated.swift#L110","fileName":"ActorIsolated.swift"},"platforms":[],"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"role":"symbol"},"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"url":"\/documentation\/concurrencyextras\/actorisolated","abstract":[{"text":"A generic wrapper for isolating a mutable value to an actor.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"deprecated":true,"role":"symbol","type":"topic","title":"ActorIsolated","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/setValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","role":"symbol","url":"\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"deprecated":true,"type":"topic","abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"title":"setValue(_:)","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/withValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","role":"symbol","url":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withValue"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"deprecated":true,"type":"topic","abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"title":"withValue(_:)","kind":"symbol"}}}