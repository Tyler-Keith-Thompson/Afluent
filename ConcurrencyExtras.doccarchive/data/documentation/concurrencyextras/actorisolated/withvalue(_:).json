{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"operation"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An operation to be performed on the actor with the underlying value.","type":"text"}]}],"name":"operation"}]},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"The result of the operation.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Useful for modifying a value in a single transaction."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Isolate an integer for concurrent read\/write access:","let count = ActorIsolated(0)","","func increment() async {","  \/\/ Safely increment it:","  await self.count.withValue { $0 += 1 }","}"]},{"type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because XCTest assertions donâ€™t play nicely with Swift concurrency, "},{"code":"withValue","type":"codeVoice"},{"text":" also","type":"text"},{"type":"text","text":" "},{"text":"provides a handy interface to peek at an actor-isolated value and assert against it:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let didOpenSettings = ActorIsolated(false)","let model = withDependencies {","  $0.openSettings = { await didOpenSettings.setValue(true) }","} operation: {","  FeatureModel()","}","await model.settingsButtonTapped()","await didOpenSettings.withValue { XCTAssertTrue($0) }"]}],"style":"tip"}],"kind":"content"}],"abstract":[{"text":"Perform an operation with isolated access to the underlying value.","type":"text"}],"metadata":{"symbolKind":"method","platforms":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withValue","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method","modules":[{"name":"ConcurrencyExtras"}],"remoteSource":{"fileName":"ActorIsolated.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/ActorIsolated.swift#L85"},"title":"withValue(_:)","externalID":"s:17ConcurrencyExtras13ActorIsolatedC9withValueyqd__qd__xzYbKXEKlF"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)"},"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'LockIsolated' instead.","type":"text"}]}],"variants":[{"paths":["\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/withValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","role":"symbol","url":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withValue"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"deprecated":true,"type":"topic","abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"title":"withValue(_:)","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"url":"\/documentation\/concurrencyextras\/actorisolated","abstract":[{"text":"A generic wrapper for isolating a mutable value to an actor.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ActorIsolated"}],"navigatorTitle":[{"text":"ActorIsolated","kind":"identifier"}],"deprecated":true,"role":"symbol","type":"topic","title":"ActorIsolated","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"}}}