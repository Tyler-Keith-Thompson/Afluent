{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/concurrencyextras\/lockisolated\/setvalue(_:)"]}],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/setValue(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"newValue"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to replace the current isolated value with."}]}],"name":"newValue"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"codeListing","code":["\/\/ Isolate an integer for concurrent read\/write access:","var count = LockIsolated(0)","","func reset() {","  \/\/ Reset it:","  self.count.setValue(0)","}"],"syntax":"swift"},{"style":"tip","name":"Tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/withValue(_:)"},{"type":"text","text":" instead of "},{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/setValue(_:)","type":"reference","isActive":true},{"type":"text","text":" if the value being set is derived"},{"type":"text","text":" "},{"text":"from the current value. That is, do this:","type":"text"}],"type":"paragraph"},{"code":["self.count.withValue { $0 += 1 }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"â€¦and not this:","type":"text"}]},{"code":["self.count.setValue(self.count + 1)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/withValue(_:)","isActive":true,"type":"reference"},{"type":"text","text":" isolates the entire transaction and avoids data races between reading and"},{"type":"text","text":" "},{"type":"text","text":"writing the value."}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated"]]},"kind":"symbol","metadata":{"role":"symbol","externalID":"s:17ConcurrencyExtras12LockIsolatedC8setValueyyxyYbKXKKF","modules":[{"name":"ConcurrencyExtras"}],"title":"setValue(_:)","remoteSource":{"fileName":"LockIsolated.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/LockIsolated.swift#L80"},"roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"setValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}]},"abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"sections":[],"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/withValue(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withValue","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/concurrencyextras\/lockisolated\/withvalue(_:)","kind":"symbol","title":"withValue(_:)","role":"symbol","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/withValue(_:)","type":"topic","abstract":[{"text":"Perform an operation with isolated access to the underlying value.","type":"text"}]},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/setValue(_:)":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/setValue(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"title":"setValue(_:)","kind":"symbol","abstract":[{"text":"Overwrite the isolated value with a new value.","type":"text"}],"url":"\/documentation\/concurrencyextras\/lockisolated\/setvalue(_:)","role":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated":{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"}],"abstract":[{"text":"A generic wrapper for isolating a mutable value with a lock.","type":"text"}],"url":"\/documentation\/concurrencyextras\/lockisolated","title":"LockIsolated","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}]}}}