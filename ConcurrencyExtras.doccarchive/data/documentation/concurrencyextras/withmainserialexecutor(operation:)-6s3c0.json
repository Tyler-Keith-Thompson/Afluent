{"abstract":[{"type":"text","text":"Perform an operation on the main serial executor."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/withMainSerialExecutor(operation:)-6s3c0"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withMainSerialExecutor","kind":"identifier"},{"kind":"text","text":"("},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": @isolated(any) () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"operation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An operation to be performed on the main serial executor."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Some asynchronous code is ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304"},{"type":"text","text":" "},{"type":"text","text":"to test in Swift due to how suspension points are processed by the runtime. This function"},{"type":"text","text":" "},{"text":"attempts to run all tasks spawned in the given operation serially and deterministically. It","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"makes asynchronous tests faster and less flakey."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await withMainSerialExecutor {","  \/\/ Everything performed in this scope is performed serially...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ReliablyTestingAsync","type":"reference","isActive":true},{"text":" for more information on why this tool is needed to test","type":"text"},{"text":" ","type":"text"},{"text":"async code and how to use it.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"This API is only intended to be used from tests to make them more reliable. Please do"},{"text":" ","type":"text"},{"text":"not use it from application code.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We say that it “","type":"text"},{"inlineContent":[{"text":"attempts","type":"text"}],"type":"emphasis"},{"text":" to run all tasks spawned in an operation serially and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deterministically” because under the hood it relies on a global, mutable variable in the Swift"},{"text":" ","type":"text"},{"type":"text","text":"runtime to do its job, and there are no scoping "},{"type":"emphasis","inlineContent":[{"text":"guarantees","type":"text"}]},{"text":" should this mutable variable change","type":"text"},{"type":"text","text":" "},{"type":"text","text":"during the operation."}]}],"name":"Warning","style":"warning"}]}],"metadata":{"symbolKind":"func","externalID":"s:17ConcurrencyExtras22withMainSerialExecutor9operationyyyYaKYAXE_tYaKF","role":"symbol","roleHeading":"Function","remoteSource":{"fileName":"MainSerialExecutor.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/.build\/checkouts\/swift-concurrency-extras\/Sources\/ConcurrencyExtras\/MainSerialExecutor.swift#L32"},"title":"withMainSerialExecutor(operation:)","modules":[{"name":"ConcurrencyExtras"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMainSerialExecutor","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"operation"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"rethrows"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/concurrencyextras\/withmainserialexecutor(operation:)-6s3c0"]}],"kind":"symbol","references":{"https://forums.swift.org/t/reliably-testing-code-that-adopts-swift-concurrency/57304":{"type":"link","titleInlineContent":[{"text":"notoriously","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"difficult"}],"identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","url":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","title":"notoriously difficult"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"url":"\/documentation\/concurrencyextras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"role":"collection","type":"topic","title":"ConcurrencyExtras","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/withMainSerialExecutor(operation:)-6s3c0":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMainSerialExecutor"},{"text":"(","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"url":"\/documentation\/concurrencyextras\/withmainserialexecutor(operation:)-6s3c0","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/withMainSerialExecutor(operation:)-6s3c0","abstract":[{"text":"Perform an operation on the main serial executor.","type":"text"}],"title":"withMainSerialExecutor(operation:)","type":"topic","kind":"symbol","role":"symbol"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ReliablyTestingAsync":{"url":"\/documentation\/concurrencyextras\/reliablytestingasync","role":"article","kind":"article","abstract":[{"type":"text","text":"Learn how to use the tools of this library to write reliable, deterministic tests for your async"},{"text":" ","type":"text"},{"text":"Swift code.","type":"text"}],"title":"Reliably testing async code","type":"topic","identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ReliablyTestingAsync"}}}