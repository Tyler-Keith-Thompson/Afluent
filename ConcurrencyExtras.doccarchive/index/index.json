{"includedArchiveIdentifiers":["ConcurrencyExtras"],"interfaceLanguages":{"swift":[{"children":[{"title":"Data races","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/lockisolated\/init(_:)","title":"init(@autoclosure () throws -> Value) rethrows","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/lockisolated\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/lockisolated\/setvalue(_:)","title":"func setValue(@autoclosure () throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/concurrencyextras\/lockisolated\/withvalue(_:)","title":"func withValue<T>((inout Value) throws -> T) rethrows -> T","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/lockisolated\/subscript(dynamicmember:)","title":"subscript<Subject>(dynamicMember _: KeyPath<Value, Subject>) -> Subject","type":"subscript"}],"path":"\/documentation\/concurrencyextras\/lockisolated","title":"LockIsolated","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/==(_:_:)","title":"static func == (AnyHashableSendable, AnyHashableSendable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(_:)-14ka1","title":"init(some Hashable & Sendable)","type":"init"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(_:)-3l6ki","title":"init(any Hashable & Sendable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/base","title":"let base: any Hashable & Sendable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/concurrencyextras\/anyhashablesendable","title":"AnyHashableSendable","type":"struct"},{"title":"Serial execution","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/reliablytestingasync","title":"Reliably testing async code","type":"article"},{"title":"Preconcurrency","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/init(_:)","title":"init(Value)","type":"init"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/projectedvalue","title":"var projectedValue: UncheckedSendable<Value>","type":"property"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/subscript(dynamicmember:)-1qazw","title":"subscript<Subject>(dynamicMember _: KeyPath<Value, Subject>) -> Subject","type":"subscript"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/subscript(dynamicmember:)-6qlle","title":"subscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Subject","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/compactmap(_:)-5gk3v","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/compactmap(_:)-7o03h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/drop(while:)-5er6q","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/drop(while:)-9052y","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetostream()-296g0","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetostream()-8s0gx","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetothrowingstream()-2diix","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetothrowingstream()-9cajp","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/filter(_:)-23a4u","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/filter(_:)-8eb2y","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-2b7w3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-3yqdn","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-62jha","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-98vpq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/makeasynciterator()","title":"func makeAsyncIterator() -> UncheckedSendable<Value>.AsyncIterator","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/map(_:)-2x0v4","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/map(_:)-7ej4n","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(while:)-50o9b","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(while:)-axk9","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/asynciterator","title":"UncheckedSendable.AsyncIterator","type":"typealias"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/element","title":"UncheckedSendable.Element","type":"typealias"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/compactmap(_:)-5gk3v","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/compactmap(_:)-7o03h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/drop(while:)-5er6q","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/drop(while:)-9052y","title":"func drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetostream()-296g0","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetostream()-8s0gx","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetothrowingstream()-2diix","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/erasetothrowingstream()-9cajp","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/filter(_:)-23a4u","title":"func filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/filter(_:)-8eb2y","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-2b7w3","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-3yqdn","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-62jha","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/flatmap(_:)-98vpq","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/makeasynciterator()","title":"func makeAsyncIterator() -> UncheckedSendable<Value>.AsyncIterator","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/map(_:)-2x0v4","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/map(_:)-7ej4n","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(while:)-50o9b","title":"func prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/prefix(while:)-axk9","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/asynciterator","title":"UncheckedSendable.AsyncIterator","type":"typealias"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/element","title":"UncheckedSendable.Element","type":"typealias"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/concurrencyextras\/uncheckedsendable","title":"UncheckedSendable","type":"struct"},{"title":"Articles","type":"groupMarker"},{"children":[{"title":"Case path deprecations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/init(_:)","title":"init(@autoclosure () throws -> Value) rethrows","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)","title":"func setValue(@autoclosure () throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)","title":"func withValue<T>((inout Value) throws -> T) rethrows -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/concurrencyextras\/actorisolated\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/concurrencyextras\/actorisolated","title":"ActorIsolated","type":"class"}],"path":"\/documentation\/concurrencyextras\/actorisolateddeprecations","title":"Deprecations","type":"symbol"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/init(_:)","title":"init(@autoclosure () throws -> Value) rethrows","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)","title":"func setValue(@autoclosure () throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)","title":"func withValue<T>((inout Value) throws -> T) rethrows -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/concurrencyextras\/actorisolated\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/concurrencyextras\/actorisolated\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/concurrencyextras\/actorisolated","title":"ActorIsolated","type":"class"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/uncheckedusemainserialexecutor","title":"var uncheckedUseMainSerialExecutor: Bool","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/withmainserialexecutor(operation:)-6s3c0","title":"func withMainSerialExecutor(operation: () async throws -> Void) async rethrows","type":"func"},{"path":"\/documentation\/concurrencyextras\/withmainserialexecutor(operation:)-7fqt1","title":"func withMainSerialExecutor(operation: () throws -> Void) rethrows","type":"func"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/swift\/result\/init(catching:)","title":"init(catching: () async throws -> Success) async","type":"init"}],"path":"\/documentation\/concurrencyextras\/swift\/result","title":"Result","type":"extension"}],"path":"\/documentation\/concurrencyextras\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncsequence\/erasetostream()-5am0u","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncsequence\/erasetostream()-69kkc","title":"func eraseToStream() -> AsyncStream<Self.Element>","type":"method"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncsequence\/erasetothrowingstream()-2a8ml","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncsequence\/erasetothrowingstream()-4ezo0","title":"func eraseToThrowingStream() -> AsyncThrowingStream<Self.Element, any Error>","type":"method"}],"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncsequence","title":"AsyncSequence","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/init(_:)-66led","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/init(_:)-nkms","title":"init<S>(S)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/finished","title":"static var finished: AsyncStream<Element>","type":"property"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream\/never","title":"static var never: AsyncStream<Element>","type":"property"}],"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncstream","title":"AsyncStream","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncthrowingstream\/init(_:)-6mfpj","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncthrowingstream\/init(_:)-9hdkj","title":"init<S>(S)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncthrowingstream\/never","title":"static var never: AsyncThrowingStream<Element, any Error>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncthrowingstream\/finished(throwing:)","title":"static func finished(throwing: Failure?) -> AsyncThrowingStream<Element, Failure>","type":"method"}],"path":"\/documentation\/concurrencyextras\/_concurrency\/asyncthrowingstream","title":"AsyncThrowingStream","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/task\/cancellablevalue-32us0","title":"var cancellableValue: Success","type":"property"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/task\/cancellablevalue-49pe7","title":"var cancellableValue: Success","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/task\/megayield(count:)","title":"static func megaYield(count: Int) async","type":"method"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/task\/never()-2b5zm","title":"static func never() async throws","type":"method"},{"path":"\/documentation\/concurrencyextras\/_concurrency\/task\/never()-7fbie","title":"static func never() async throws -> Success","type":"method"}],"path":"\/documentation\/concurrencyextras\/_concurrency\/task","title":"Task","type":"extension"}],"path":"\/documentation\/concurrencyextras\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/concurrencyextras","title":"ConcurrencyExtras","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}