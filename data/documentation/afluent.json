{"kind":"symbol","variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"metadata":{"roleHeading":"Framework","symbolKind":"module","externalID":"Afluent","modules":[{"name":"Afluent"}],"title":"Afluent","role":"collection"},"hierarchy":{"paths":[[]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"title":"Protocols"},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"title":"Type Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"]},{"title":"Extended Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/TimeoutError":{"title":"TimeoutError","kind":"symbol","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/timeouterror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TimeoutError","kind":"identifier"}],"navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"role":"symbol","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"title":"BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","role":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask":{"title":"DeferredTask","kind":"symbol","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/afluent\/deferredtask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeferredTask"}],"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","type":"topic","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"title":"RetryStrategy","kind":"symbol","url":"\/documentation\/afluent\/retrystrategy"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousOperation"}],"url":"\/documentation\/afluent\/asynchronousoperation","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}],"title":"AsynchronousOperation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","type":"topic"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","type":"topic","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")...) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"kind":"symbol","url":"\/documentation\/afluent\/anyasyncsequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","type":"topic","role":"symbol","abstract":[],"title":"AnyAsyncSequence","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","url":"\/documentation\/afluent\/singlevaluechannel","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SingleValueChannel","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"title":"SingleValueChannel"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"abstract":[],"title":"AsynchronousUnitOfWorkCache","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","type":"topic"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"kind":"symbol","role":"symbol","title":"ClockDurationUnit","abstract":[],"url":"\/documentation\/afluent\/clockdurationunit","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/Deferred":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"role":"symbol","url":"\/documentation\/afluent\/deferred","kind":"symbol","title":"Deferred","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"role":"symbol","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"title":"ExponentialBackoffStrategy","type":"topic","url":"\/documentation\/afluent\/exponentialbackoffstrategy"},"doc://Afluent/documentation/Afluent/TaskState":{"abstract":[],"url":"\/documentation\/afluent\/taskstate","role":"symbol","title":"TaskState","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Just":{"kind":"symbol","url":"\/documentation\/afluent\/just","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","type":"topic","role":"symbol","abstract":[],"title":"Just","navigatorTitle":[{"text":"Just","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"kind":"symbol","title":"RetryByBackoffStrategy","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"kind":"symbol","title":"SingleValueSubject","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","type":"topic","url":"\/documentation\/afluent\/singlevaluesubject","role":"symbol","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AUOWCache":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"title":"AUOWCache","abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","url":"\/documentation\/afluent\/auowcache","role":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/_Concurrency":{"kind":"symbol","title":"_Concurrency","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","type":"topic","url":"\/documentation\/afluent\/_concurrency","role":"collection"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"title":"AsyncSequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/Foundation":{"kind":"symbol","title":"Foundation","url":"\/documentation\/afluent\/foundation","type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","abstract":[]},"doc://Afluent/documentation/Afluent/UnretainedError":{"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}],"url":"\/documentation\/afluent\/unretainederror","abstract":[],"title":"UnretainedError","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/anycancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"role":"symbol","title":"AnyCancellable"},"doc://Afluent/documentation/Afluent/Workers":{"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/workers","abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"type":"topic","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Workers","kind":"identifier"}],"title":"Workers"},"doc://Afluent/documentation/Afluent/TimerSequence":{"kind":"symbol","url":"\/documentation\/afluent\/timersequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","type":"topic","role":"symbol","abstract":[],"title":"TimerSequence","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"type":"topic","title":"TopLevelDecoder","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","kind":"symbol","abstract":[],"url":"\/documentation\/afluent\/topleveldecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"abstract":[],"title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol","url":"\/documentation\/afluent","type":"topic"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasynchronousunitofwork","role":"symbol","type":"topic","title":"AnyAsynchronousUnitOfWork","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/subscriptiondemand","abstract":[],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SubscriptionDemand","kind":"identifier"}],"role":"symbol","type":"topic","title":"SubscriptionDemand"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"text":" that limits the number of retry attempts.","type":"text"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"title":"TopLevelEncoder","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","url":"\/documentation\/afluent\/toplevelencoder","abstract":[]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"title":"SerialTaskQueue","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","type":"topic","url":"\/documentation\/afluent\/serialtaskqueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"role":"symbol","kind":"symbol"}}}