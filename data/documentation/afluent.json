{"metadata":{"role":"collection","roleHeading":"Framework","title":"Afluent","externalID":"Afluent","modules":[{"name":"Afluent"}],"symbolKind":"module"},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes"},{"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations"},{"title":"Extended Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[[]]},"sections":[],"references":{"doc://Afluent/documentation/Afluent/Foundation":{"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","url":"\/documentation\/afluent\/foundation","role":"collection","title":"Foundation"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","role":"symbol","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"type":"topic"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","abstract":[],"type":"topic","title":"Afluent","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/Workers":{"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","kind":"symbol","type":"topic","title":"Workers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Workers","kind":"identifier"}],"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"url":"\/documentation\/afluent\/workers"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"role":"symbol","title":"AsynchronousUnitOfWorkCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"abstract":[],"url":"\/documentation\/afluent\/asynchronousunitofworkcache","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"url":"\/documentation\/afluent\/serialtaskqueue","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"title":"SerialTaskQueue","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","url":"\/documentation\/afluent\/anyasynchronousunitofwork","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"title":"AnyAsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/_Concurrency":{"abstract":[],"kind":"symbol","url":"\/documentation\/afluent\/_concurrency","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","role":"collection","title":"_Concurrency"},"doc://Afluent/documentation/Afluent/Deferred":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","abstract":[],"url":"\/documentation\/afluent\/deferred","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"title":"Deferred"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","title":"Race(cancelAllOnWin:_:against:)","type":"topic","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"against"},{"kind":"text","text":": (() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}]},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","title":"AnyAsyncSequence","kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasyncsequence"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelDecoder","kind":"identifier"}],"title":"TopLevelDecoder","navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","abstract":[],"url":"\/documentation\/afluent\/topleveldecoder","kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"role":"symbol","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"kind":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"title":"AnyCancellable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyCancellable","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","url":"\/documentation\/afluent\/anycancellable"},"doc://Afluent/documentation/Afluent/Just":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Just"}],"url":"\/documentation\/afluent\/just","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","navigatorTitle":[{"kind":"identifier","text":"Just"}],"title":"Just","abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent/TaskState":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskState"}],"url":"\/documentation\/afluent\/taskstate","title":"TaskState","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/asynchronousunitofwork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"type":"topic","title":"AsynchronousUnitOfWork","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/backoffstrategy","title":"BackoffStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"role":"symbol","type":"topic","abstract":[],"kind":"symbol","title":"ClockDurationUnit","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClockDurationUnit"}],"navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"url":"\/documentation\/afluent\/clockdurationunit"},"doc://Afluent/documentation/Afluent/UnretainedError":{"role":"symbol","type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","title":"UnretainedError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"url":"\/documentation\/afluent\/unretainederror"},"doc://Afluent/documentation/Afluent/AUOWCache":{"url":"\/documentation\/afluent\/auowcache","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"type":"topic","title":"AUOWCache","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"title":"AsynchronousOperation","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousoperation","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"title":"SingleValueChannel","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","url":"\/documentation\/afluent\/singlevaluechannel","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/DeferredTask":{"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"url":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeferredTask"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"title":"ExponentialBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","kind":"symbol","url":"\/documentation\/afluent\/exponentialbackoffstrategy","role":"symbol","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"type":"topic"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluesubject","title":"SingleValueSubject","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"type":"text","text":"A "},{"code":"RetryStrategy","type":"codeVoice"},{"text":" that limits the number of retry attempts.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","title":"RetryByCountStrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelEncoder"}],"navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"url":"\/documentation\/afluent\/toplevelencoder","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","abstract":[],"type":"topic","kind":"symbol","role":"symbol","title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}],"url":"\/documentation\/afluent\/subscriptiondemand","title":"SubscriptionDemand","abstract":[],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SubscriptionDemand","kind":"identifier"}]}}}