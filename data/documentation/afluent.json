{"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Framework","symbolKind":"module","modules":[{"name":"Afluent"}],"role":"collection","title":"Afluent","externalID":"Afluent"},"hierarchy":{"paths":[[]]},"kind":"symbol","topicSections":[{"anchor":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"generated":true,"title":"Classes"},{"generated":true,"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"anchor":"Protocols"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"generated":true,"anchor":"Structures","title":"Structures"},{"generated":true,"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"anchor":"Functions"},{"generated":true,"anchor":"Type-Aliases","title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"]},{"title":"Enumerations","anchor":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"generated":true},{"title":"Extended Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"anchor":"Extended-Modules","generated":true}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"title":"Race(cancelAllOnWin:_:against:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"against"},{"text":": (() ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"type":"topic"},"doc://Afluent/documentation/Afluent/TimerSequence":{"title":"TimerSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","url":"\/documentation\/afluent\/timersequence","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimerSequence"}],"navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"url":"\/documentation\/afluent\/asynchronousunitofworkcache","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache","role":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/TaskState":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskState","kind":"identifier"}],"url":"\/documentation\/afluent\/taskstate","title":"TaskState","role":"symbol","type":"topic","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyAsyncSequence","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/anyasyncsequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"type":"topic","title":"AnyAsyncSequence"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"url":"\/documentation\/afluent\/serialtaskqueue","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"kind":"symbol","title":"SerialTaskQueue","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SerialTaskQueue"}],"navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","abstract":[],"kind":"symbol","title":"UnretainedError","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnretainedError","kind":"identifier"}],"navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"title":"AnyCancellable","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyCancellable","kind":"identifier"}],"url":"\/documentation\/afluent\/anycancellable","type":"topic"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","url":"\/documentation\/afluent\/toplevelencoder","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelEncoder"}],"abstract":[],"title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"title":"RetryByCountStrategy","role":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"role":"symbol","url":"\/documentation\/afluent\/backoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"title":"BackoffStrategy","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AUOWCache":{"title":"AUOWCache","url":"\/documentation\/afluent\/auowcache","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"AUOWCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"kind":"symbol","title":"ExponentialBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/Workers":{"title":"Workers","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","url":"\/documentation\/afluent\/workers","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"url":"\/documentation\/afluent\/deferredtask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","title":"DeferredTask","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/Foundation":{"abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/afluent\/foundation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","title":"Foundation"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"role":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","kind":"symbol","title":"SingleValueChannel","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"role":"symbol","title":"QueueExecutor","navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"type":"topic","url":"\/documentation\/afluent\/queueexecutor","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueueExecutor"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"kind":"symbol","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"url":"\/documentation\/afluent\/asynchronousunitofworksequence","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","title":"RetryStrategy","role":"symbol","url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","title":"ClockDurationUnit","url":"\/documentation\/afluent\/clockdurationunit","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[]},"doc://Afluent/documentation/Afluent/_Concurrency":{"url":"\/documentation\/afluent\/_concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","title":"_Concurrency","role":"collection","type":"topic","abstract":[],"kind":"symbol"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","url":"\/documentation\/afluent","type":"topic","title":"Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/Deferred":{"abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"type":"topic","title":"Deferred"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/asynchronousunitofwork","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"title":"AsynchronousUnitOfWork","role":"symbol","abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/TimeoutError":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","type":"topic","role":"symbol","title":"TimeoutError","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeoutError"}],"navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}],"url":"\/documentation\/afluent\/timeouterror","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}]},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"type":"topic","title":"SubscriptionDemand","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SubscriptionDemand"}],"abstract":[],"url":"\/documentation\/afluent\/subscriptiondemand","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/anyasynchronousunitofwork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}],"title":"AnyAsynchronousUnitOfWork","kind":"symbol"},"doc://Afluent/documentation/Afluent/Just":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Just"}],"title":"Just","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/just","abstract":[],"type":"topic","navigatorTitle":[{"text":"Just","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"role":"symbol","title":"AsynchronousOperation","url":"\/documentation\/afluent\/asynchronousoperation","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","type":"topic","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}],"abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"type":"topic","title":"SingleValueSubject","url":"\/documentation\/afluent\/singlevaluesubject"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"title":"TopLevelDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelDecoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}],"url":"\/documentation\/afluent\/topleveldecoder","abstract":[],"type":"topic","role":"symbol","kind":"symbol"}}}