{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"externalID":"Afluent","symbolKind":"module","role":"collection","modules":[{"name":"Afluent"}],"roleHeading":"Framework","title":"Afluent"},"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just"],"title":"Type Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"]},{"title":"Extended Modules","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"abstract":[],"title":"SubscriptionDemand","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SubscriptionDemand","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/subscriptiondemand","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand"},"doc://Afluent/documentation/Afluent/Foundation":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","url":"\/documentation\/afluent\/foundation","title":"Foundation","type":"topic","abstract":[],"role":"collection","kind":"symbol"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"title":"ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"},"doc://Afluent/documentation/Afluent/Just":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","url":"\/documentation\/afluent\/just","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Just","kind":"identifier"}],"title":"Just","type":"topic","abstract":[],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Just","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}],"kind":"symbol","url":"\/documentation\/afluent\/backoffstrategy","title":"BackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"role":"symbol","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"type":"topic"},"doc://Afluent/documentation/Afluent/Deferred":{"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[],"type":"topic","kind":"symbol","title":"Deferred","url":"\/documentation\/afluent\/deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"title":"TopLevelDecoder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","abstract":[],"url":"\/documentation\/afluent\/topleveldecoder"},"doc://Afluent/documentation/Afluent/DeferredTask":{"title":"DeferredTask","navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"url":"\/documentation\/afluent\/deferredtask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","type":"topic","kind":"symbol","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworkcache","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"title":"AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"url":"\/documentation\/afluent\/clockdurationunit","type":"topic","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"title":"ClockDurationUnit","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit"},"doc://Afluent/documentation/Afluent":{"type":"topic","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","url":"\/documentation\/afluent","title":"Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"role":"symbol","url":"\/documentation\/afluent\/retrystrategy","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","type":"topic","kind":"symbol","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/_Concurrency":{"kind":"symbol","abstract":[],"title":"_Concurrency","url":"\/documentation\/afluent\/_concurrency","type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"url":"\/documentation\/afluent\/asynchronousoperation","title":"AsynchronousOperation","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousOperation"}],"navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","kind":"symbol"},"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","type":"topic","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"title":"UnretainedError","role":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnretainedError"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsyncSequence"}],"kind":"symbol","title":"AnyAsyncSequence","abstract":[],"url":"\/documentation\/afluent\/anyasyncsequence","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","title":"AsynchronousUnitOfWorkSequence","type":"topic","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"url":"\/documentation\/afluent\/asynchronousunitofworksequence","kind":"symbol","role":"symbol"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"url":"\/documentation\/afluent\/serialtaskqueue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"title":"SerialTaskQueue","role":"symbol","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"title":"SingleValueChannel","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","url":"\/documentation\/afluent\/singlevaluechannel"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"url":"\/documentation\/afluent\/anycancellable","kind":"symbol","abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","role":"symbol","title":"AnyCancellable","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyCancellable"}],"navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","title":"AnyAsynchronousUnitOfWork","type":"topic","kind":"symbol","url":"\/documentation\/afluent\/anyasynchronousunitofwork","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"role":"symbol","title":"TopLevelEncoder","url":"\/documentation\/afluent\/toplevelencoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent/AUOWCache":{"abstract":[],"title":"AUOWCache","navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AUOWCache","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/auowcache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","type":"topic"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"text":" that limits the number of retry attempts.","type":"text"}],"title":"RetryByCountStrategy","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy"},"doc://Afluent/documentation/Afluent/TaskState":{"abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}],"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"url":"\/documentation\/afluent\/taskstate","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","title":"TaskState"},"doc://Afluent/documentation/Afluent/Workers":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"url":"\/documentation\/afluent\/workers","navigatorTitle":[{"text":"Workers","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","role":"symbol","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"title":"Workers","kind":"symbol"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","type":"topic","kind":"symbol","role":"symbol","title":"Race(cancelAllOnWin:_:against:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"type":"topic","url":"\/documentation\/afluent\/singlevaluesubject","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SingleValueSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"role":"symbol","title":"SingleValueSubject","navigatorTitle":[{"kind":"identifier","text":"SingleValueSubject"}]}}}