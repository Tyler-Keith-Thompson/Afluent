{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"anchor":"Classes","generated":true,"title":"Classes"},{"title":"Protocols","anchor":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"generated":true},{"anchor":"Structures","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"title":"Structures"},{"anchor":"Functions","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"title":"Functions"},{"generated":true,"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"anchor":"Type-Aliases"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"anchor":"Enumerations","title":"Enumerations"},{"anchor":"Extended-Modules","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules"}],"hierarchy":{"paths":[[]]},"metadata":{"role":"collection","modules":[{"name":"Afluent"}],"title":"Afluent","externalID":"Afluent","roleHeading":"Framework","symbolKind":"module"},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/AnyCancellable":{"abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"url":"\/documentation\/afluent\/anycancellable","type":"topic","title":"AnyCancellable","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/Foundation":{"url":"\/documentation\/afluent\/foundation","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","abstract":[],"title":"Foundation","role":"collection"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"title":"SingleValueChannel","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel"},"doc://Afluent/documentation/Afluent/AUOWCache":{"kind":"symbol","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"url":"\/documentation\/afluent\/auowcache","abstract":[],"type":"topic","title":"AUOWCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"AUOWCache","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"title":"AsynchronousUnitOfWorkCache","url":"\/documentation\/afluent\/asynchronousunitofworkcache","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"type":"topic","kind":"symbol","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueSubject"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","url":"\/documentation\/afluent\/singlevaluesubject","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"title":"SingleValueSubject"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"url":"\/documentation\/afluent\/toplevelencoder","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","type":"topic","role":"symbol","title":"TopLevelEncoder"},"doc://Afluent/documentation/Afluent/TimeoutError":{"url":"\/documentation\/afluent\/timeouterror","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimeoutError"}],"kind":"symbol","type":"topic","abstract":[{"text":"An error indicating a timeout has occurred.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimeoutError"}],"title":"TimeoutError"},"doc://Afluent/documentation/Afluent/DeferredTask":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"title":"DeferredTask","url":"\/documentation\/afluent\/deferredtask","role":"symbol","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DeferredTask"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","title":"AnyAsynchronousUnitOfWork","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","type":"topic","url":"\/documentation\/afluent\/anyasynchronousunitofwork","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyAsynchronousUnitOfWork"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","url":"\/documentation\/afluent","kind":"symbol","role":"collection","title":"Afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"url":"\/documentation\/afluent\/exponentialbackoffstrategy","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","type":"topic","abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"title":"ExponentialBackoffStrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"title":"AsynchronousUnitOfWork","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"url":"\/documentation\/afluent\/asynchronousunitofwork","type":"topic"},"doc://Afluent/documentation/Afluent/Deferred":{"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"url":"\/documentation\/afluent\/deferred","abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","type":"topic","role":"symbol","title":"Deferred"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"title":"BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy"},"doc://Afluent/documentation/Afluent/TimerSequence":{"url":"\/documentation\/afluent\/timersequence","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimerSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TimerSequence"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","type":"topic","abstract":[],"title":"TimerSequence","role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"url":"\/documentation\/afluent\/topleveldecoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","type":"topic","abstract":[],"title":"TopLevelDecoder","role":"symbol"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"SubscriptionDemand","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/subscriptiondemand","kind":"symbol","title":"SubscriptionDemand","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousOperation"}],"type":"topic","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"url":"\/documentation\/afluent\/asynchronousoperation","kind":"symbol","title":"AsynchronousOperation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","role":"symbol"},"doc://Afluent/documentation/Afluent/_Concurrency":{"abstract":[],"url":"\/documentation\/afluent\/_concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","type":"topic","kind":"symbol","role":"collection","title":"_Concurrency"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"cancelAllOnWin","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)","type":"topic","role":"symbol","title":"Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"url":"\/documentation\/afluent\/serialtaskqueue","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","type":"topic","abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"title":"SerialTaskQueue","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","title":"AsyncSequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"title":"RetryByCountStrategy","role":"symbol","navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},"doc://Afluent/documentation/Afluent/Just":{"navigatorTitle":[{"text":"Just","kind":"identifier"}],"url":"\/documentation\/afluent\/just","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Just","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","type":"topic","role":"symbol","title":"Just"},"doc://Afluent/documentation/Afluent/Workers":{"url":"\/documentation\/afluent\/workers","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"Workers","kind":"identifier"}],"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","type":"topic","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"title":"Workers","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"url":"\/documentation\/afluent\/anyasyncsequence","abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","type":"topic","role":"symbol","title":"AnyAsyncSequence"},"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","type":"topic","abstract":[],"title":"UnretainedError","role":"symbol"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"title":"QueueExecutor","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueueExecutor"}],"url":"\/documentation\/afluent\/queueexecutor","role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","type":"topic","navigatorTitle":[{"text":"QueueExecutor","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"url":"\/documentation\/afluent\/clockdurationunit","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","type":"topic","role":"symbol","title":"ClockDurationUnit"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByBackoffStrategy"}],"title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","type":"topic","abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"title":"AsynchronousUnitOfWorkSequence","role":"symbol","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"type":"topic","url":"\/documentation\/afluent\/asynchronousunitofworksequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}]},"doc://Afluent/documentation/Afluent/TaskState":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}],"type":"topic","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/taskstate","title":"TaskState","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","role":"symbol"}}}