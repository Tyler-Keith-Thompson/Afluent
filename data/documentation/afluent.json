{"topicSections":[{"title":"Classes","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"title":"Protocols"},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"title":"Enumerations"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules"}],"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Framework","externalID":"Afluent","role":"collection","title":"Afluent","symbolKind":"module","modules":[{"name":"Afluent"}]},"hierarchy":{"paths":[[]]},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent"},"references":{"doc://Afluent/documentation/Afluent/UnretainedError":{"url":"\/documentation\/afluent\/unretainederror","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"type":"topic","title":"UnretainedError","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnretainedError"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/Just":{"title":"Just","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Just"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Just"}],"type":"topic","url":"\/documentation\/afluent\/just"},"doc://Afluent/documentation/Afluent":{"type":"topic","url":"\/documentation\/afluent","role":"collection","abstract":[],"kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"kind":"symbol","title":"BackoffStrategy","type":"topic","url":"\/documentation\/afluent\/backoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/TaskState":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskState","kind":"identifier"}],"type":"topic","role":"symbol","title":"TaskState","url":"\/documentation\/afluent\/taskstate","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"url":"\/documentation\/afluent\/subscriptiondemand","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}],"type":"topic","title":"SubscriptionDemand","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubscriptionDemand"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","role":"symbol","type":"topic","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"title":"SingleValueChannel","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyCancellable"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","title":"AnyCancellable","url":"\/documentation\/afluent\/anycancellable","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Stores an erased unit of work and provides a mechanism to cancel it"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"kind":"symbol","title":"AsynchronousUnitOfWork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","type":"topic"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ClockDurationUnit","kind":"identifier"}],"title":"ClockDurationUnit","role":"symbol","kind":"symbol","abstract":[],"url":"\/documentation\/afluent\/clockdurationunit","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"type":"topic"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"url":"\/documentation\/afluent\/retrybycountstrategy","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByCountStrategy","kind":"identifier"}],"title":"RetryByCountStrategy","role":"symbol","kind":"symbol"},"doc://Afluent/documentation/Afluent/_Concurrency":{"role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency","url":"\/documentation\/afluent\/_concurrency","abstract":[],"kind":"symbol","type":"topic","title":"_Concurrency"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"url":"\/documentation\/afluent\/asynchronousunitofworksequence","kind":"symbol","title":"AsynchronousUnitOfWorkSequence","abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}]},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"navigatorTitle":[{"kind":"identifier","text":"TopLevelEncoder"}],"abstract":[],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelEncoder","kind":"identifier"}],"url":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"url":"\/documentation\/afluent\/exponentialbackoffstrategy","kind":"symbol","title":"ExponentialBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}]},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache","abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"title":"AsynchronousUnitOfWorkCache","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","role":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyAsyncSequence"}],"title":"AnyAsyncSequence","role":"symbol","navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/anyasyncsequence"},"doc://Afluent/documentation/Afluent/Deferred":{"title":"Deferred","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"type":"topic","abstract":[],"url":"\/documentation\/afluent\/deferred"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousOperation"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}],"url":"\/documentation\/afluent\/asynchronousoperation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"title":"AsynchronousOperation"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","url":"\/documentation\/afluent\/asyncsequences","role":"symbol","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol","title":"AsyncSequences","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"type":"topic","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","title":"Race(cancelAllOnWin:_:against:)","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Race","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/DeferredTask":{"navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"url":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"role":"symbol","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}]},"doc://Afluent/documentation/Afluent/Foundation":{"role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","title":"Foundation","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/foundation"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","role":"symbol","abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"type":"topic","title":"RetryStrategy","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"SingleValueSubject","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluesubject","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}],"title":"SingleValueSubject","type":"topic","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject"},"doc://Afluent/documentation/Afluent/AUOWCache":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"type":"topic","title":"AUOWCache","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","abstract":[],"role":"symbol","url":"\/documentation\/afluent\/auowcache","navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"type":"topic","title":"TopLevelDecoder","url":"\/documentation\/afluent\/topleveldecoder","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TopLevelDecoder","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"type":"topic","role":"symbol","title":"AnyAsynchronousUnitOfWork","url":"\/documentation\/afluent\/anyasynchronousunitofwork","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A unit of work that performs type erasure by wrapping another unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","navigatorTitle":[{"kind":"identifier","text":"SerialTaskQueue"}],"url":"\/documentation\/afluent\/serialtaskqueue","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"type":"topic","role":"symbol","title":"SerialTaskQueue"},"doc://Afluent/documentation/Afluent/Workers":{"role":"symbol","title":"Workers","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Workers","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","type":"topic","url":"\/documentation\/afluent\/workers","kind":"symbol"}}}