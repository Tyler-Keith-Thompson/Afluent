{"metadata":{"externalID":"Afluent","title":"Afluent","modules":[{"name":"Afluent"}],"role":"collection","roleHeading":"Framework","symbolKind":"module"},"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes"},{"title":"Protocols","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"]},{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"]},{"title":"Functions","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just"],"title":"Type Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"title":"Extended Modules"}],"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent"]}],"kind":"symbol","identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy","title":"RetryByBackoffStrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackoffStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"BackoffStrategy"}],"abstract":[{"text":"A protocol for implementing custom backoff strategies in retry mechanisms.","type":"text"}],"role":"symbol","type":"topic","title":"BackoffStrategy","url":"\/documentation\/afluent\/backoffstrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy"},"doc://Afluent/documentation/Afluent/_Concurrency":{"role":"collection","title":"_Concurrency","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/afluent\/_concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/TaskState":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskState"}],"navigatorTitle":[{"kind":"identifier","text":"TaskState"}],"abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/afluent\/taskstate","title":"TaskState","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"Race","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"cancelAllOnWin"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"against","kind":"externalParam"},{"text":": (() ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes.","type":"text"}],"role":"symbol","type":"topic","title":"Race(cancelAllOnWin:_:against:)","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AnyAsyncSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AnyAsyncSequence"}],"abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/afluent\/anyasyncsequence","title":"AnyAsyncSequence","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueChannel"}],"navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}],"title":"SingleValueChannel","kind":"symbol","url":"\/documentation\/afluent\/singlevaluechannel","abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}]},"doc://Afluent/documentation/Afluent/UnretainedError":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnretainedError"}],"navigatorTitle":[{"kind":"identifier","text":"UnretainedError"}],"abstract":[],"role":"symbol","type":"topic","title":"UnretainedError","url":"\/documentation\/afluent\/unretainederror","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"url":"\/documentation\/afluent\/anyasynchronousunitofwork","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"title":"AnyAsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/Just":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Just","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Just"}],"abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/afluent\/just","title":"Just","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just"},"doc://Afluent/documentation/Afluent/Workers":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Workers"}],"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for grouping related asynchronous work operations."}],"role":"symbol","type":"topic","title":"Workers","url":"\/documentation\/afluent\/workers","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"type":"topic","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","url":"\/documentation\/afluent\/retrystrategy"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"role":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","url":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelEncoder"}],"type":"topic"},"doc://Afluent/documentation/Afluent":{"type":"topic","abstract":[],"title":"Afluent","kind":"symbol","url":"\/documentation\/afluent","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"title":"AsynchronousOperation","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousOperation"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","type":"topic","abstract":[{"text":"Reference to an operation that an operator would execute","type":"text"}],"url":"\/documentation\/afluent\/asynchronousoperation","navigatorTitle":[{"kind":"identifier","text":"AsynchronousOperation"}]},"doc://Afluent/documentation/Afluent/Deferred":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/afluent\/deferred","title":"Deferred","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"title":"SubscriptionDemand","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubscriptionDemand"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","type":"topic","abstract":[],"url":"\/documentation\/afluent\/subscriptiondemand","navigatorTitle":[{"kind":"identifier","text":"SubscriptionDemand"}]},"doc://Afluent/documentation/Afluent/AUOWCache":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AUOWCache"}],"navigatorTitle":[{"text":"AUOWCache","kind":"identifier"}],"title":"AUOWCache","kind":"symbol","url":"\/documentation\/afluent\/auowcache","abstract":[]},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ClockDurationUnit","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ClockDurationUnit"}],"abstract":[],"role":"symbol","type":"topic","title":"ClockDurationUnit","url":"\/documentation\/afluent\/clockdurationunit","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"title":"RetryByCountStrategy","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"role":"symbol","title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","type":"topic","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"kind":"symbol","navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","url":"\/documentation\/afluent\/singlevaluesubject","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"title":"SingleValueSubject","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A subject that emits a single value or an error."}]},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"type":"topic","navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"A serial task queue that ensures tasks are executed one at a time."}],"url":"\/documentation\/afluent\/serialtaskqueue","role":"symbol","title":"SerialTaskQueue","kind":"symbol"},"doc://Afluent/documentation/Afluent/Foundation":{"abstract":[],"role":"collection","type":"topic","url":"\/documentation\/afluent\/foundation","title":"Foundation","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation"},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExponentialBackoffStrategy"}],"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"An exponential backoff strategy for retrying operations."}],"role":"symbol","type":"topic","title":"ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}],"abstract":[{"text":"A sequence that represents a single execution of an asynchronous unit of work.","type":"text"}],"role":"symbol","type":"topic","title":"AsynchronousUnitOfWorkSequence","url":"\/documentation\/afluent\/asynchronousunitofworksequence","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"role":"symbol","abstract":[{"type":"text","text":"Represents an asynchronous unit of work."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"title":"AsynchronousUnitOfWork","url":"\/documentation\/afluent\/asynchronousunitofwork","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","type":"topic","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"type":"topic","abstract":[],"title":"AsynchronousUnitOfWorkCache","kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworkcache","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousUnitOfWorkCache"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache"},"doc://Afluent/documentation/Afluent/DeferredTask":{"role":"symbol","abstract":[{"text":"A structure representing a deferred asynchronous unit of work.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeferredTask","kind":"identifier"}],"title":"DeferredTask","url":"\/documentation\/afluent\/deferredtask","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","type":"topic","navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","title":"AnyCancellable","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyCancellable","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/anycancellable","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TopLevelDecoder"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TopLevelDecoder"}],"title":"TopLevelDecoder","role":"symbol","url":"\/documentation\/afluent\/topleveldecoder","kind":"symbol"}}}