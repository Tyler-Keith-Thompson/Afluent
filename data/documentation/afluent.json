{"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"name":"Afluent"}],"symbolKind":"module","title":"Afluent","externalID":"Afluent","roleHeading":"Framework","role":"collection"},"hierarchy":{"paths":[[]]},"kind":"symbol","sections":[],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject","doc:\/\/Afluent\/documentation\/Afluent\/TaskState"],"title":"Classes","anchor":"Classes"},{"anchor":"Protocols","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder"],"title":"Protocols"},{"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence"],"generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"],"generated":true,"title":"Functions","anchor":"Functions"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","doc:\/\/Afluent\/documentation\/Afluent\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/Just","doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence"],"title":"Type Aliases","generated":true,"anchor":"Type-Aliases"},{"anchor":"Enumerations","title":"Enumerations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError","doc:\/\/Afluent\/documentation\/Afluent\/Workers"],"generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/Foundation","doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"],"generated":true,"title":"Extended Modules","anchor":"Extended-Modules"}],"variants":[{"paths":["\/documentation\/afluent"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent","interfaceLanguage":"swift"},"references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"role":"symbol","title":"RetryByBackoffStrategy","kind":"symbol","abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","type":"topic","url":"\/documentation\/afluent\/retrybybackoffstrategy"},"doc://Afluent/documentation/Afluent/TimeoutError":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TimeoutError","kind":"identifier"}],"url":"\/documentation\/afluent\/timeouterror","kind":"symbol","title":"TimeoutError","abstract":[{"type":"text","text":"An error indicating a timeout has occurred."}],"navigatorTitle":[{"text":"TimeoutError","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimeoutError","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"type":"topic"},"doc://Afluent/documentation/Afluent/QueueExecutor":{"navigatorTitle":[{"kind":"identifier","text":"QueueExecutor"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"QueueExecutor","kind":"identifier"}],"role":"symbol","title":"QueueExecutor","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/QueueExecutor","type":"topic","url":"\/documentation\/afluent\/queueexecutor"},"doc://Afluent/documentation/Afluent/AUOWCache":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AUOWCache","kind":"identifier"}],"url":"\/documentation\/afluent\/auowcache","kind":"symbol","title":"AUOWCache","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"AUOWCache"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AUOWCache","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AnyAsynchronousUnitOfWork":{"navigatorTitle":[{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyAsynchronousUnitOfWork","kind":"identifier"}],"role":"symbol","title":"AnyAsynchronousUnitOfWork","kind":"symbol","abstract":[{"text":"A unit of work that performs type erasure by wrapping another unit of work.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsynchronousUnitOfWork","type":"topic","url":"\/documentation\/afluent\/anyasynchronousunitofwork"},"doc://Afluent/documentation/Afluent/AnyAsyncSequence":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"AnyAsyncSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/anyasyncsequence","kind":"symbol","title":"AnyAsyncSequence","abstract":[],"navigatorTitle":[{"text":"AnyAsyncSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyAsyncSequence","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/Workers":{"navigatorTitle":[{"text":"Workers","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Workers"}],"role":"symbol","title":"Workers","kind":"symbol","abstract":[{"text":"A namespace for grouping related asynchronous work operations.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Workers","type":"topic","url":"\/documentation\/afluent\/workers"},"doc://Afluent/documentation/Afluent/SerialTaskQueue":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SerialTaskQueue","kind":"identifier"}],"url":"\/documentation\/afluent\/serialtaskqueue","kind":"symbol","title":"SerialTaskQueue","abstract":[{"text":"A serial task queue that ensures tasks are executed one at a time.","type":"text"}],"navigatorTitle":[{"text":"SerialTaskQueue","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SerialTaskQueue","role":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWork":{"abstract":[{"text":"Represents an asynchronous unit of work.","type":"text"}],"title":"AsynchronousUnitOfWork","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsynchronousUnitOfWork"}],"url":"\/documentation\/afluent\/asynchronousunitofwork","role":"symbol","navigatorTitle":[{"text":"AsynchronousUnitOfWork","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWork"},"doc://Afluent/documentation/Afluent/Foundation":{"role":"collection","title":"Foundation","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Foundation","type":"topic","url":"\/documentation\/afluent\/foundation"},"doc://Afluent/documentation/Afluent/UnretainedError":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnretainedError","kind":"identifier"}],"navigatorTitle":[{"text":"UnretainedError","kind":"identifier"}],"url":"\/documentation\/afluent\/unretainederror","abstract":[],"role":"symbol","kind":"symbol","title":"UnretainedError","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/UnretainedError"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"url":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SingleValueChannel"}],"abstract":[{"text":"A channel that emits a single value or an error.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","kind":"symbol","type":"topic"},"doc://Afluent/documentation/Afluent/SubscriptionDemand":{"navigatorTitle":[{"text":"SubscriptionDemand","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SubscriptionDemand","kind":"identifier"}],"role":"symbol","title":"SubscriptionDemand","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SubscriptionDemand","type":"topic","url":"\/documentation\/afluent\/subscriptiondemand"},"doc://Afluent/documentation/Afluent/_Concurrency":{"type":"topic","abstract":[],"url":"\/documentation\/afluent\/_concurrency","role":"collection","kind":"symbol","title":"_Concurrency","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/_Concurrency"},"doc://Afluent/documentation/Afluent/Deferred":{"title":"Deferred","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Deferred","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[],"role":"symbol","kind":"symbol","url":"\/documentation\/afluent\/deferred"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","title":"RetryStrategy","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/ExponentialBackoffStrategy":{"abstract":[{"text":"An exponential backoff strategy for retrying operations.","type":"text"}],"navigatorTitle":[{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ExponentialBackoffStrategy","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExponentialBackoffStrategy","kind":"identifier"}],"kind":"symbol","title":"ExponentialBackoffStrategy","url":"\/documentation\/afluent\/exponentialbackoffstrategy"},"doc://Afluent/documentation/Afluent/TopLevelDecoder":{"navigatorTitle":[{"text":"TopLevelDecoder","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TopLevelDecoder"}],"title":"TopLevelDecoder","type":"topic","role":"symbol","url":"\/documentation\/afluent\/topleveldecoder","kind":"symbol"},"doc://Afluent/documentation/Afluent/SingleValueSubject":{"navigatorTitle":[{"text":"SingleValueSubject","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/singlevaluesubject","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueSubject","kind":"identifier"}],"title":"SingleValueSubject","type":"topic","abstract":[{"text":"A subject that emits a single value or an error.","type":"text"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueSubject"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","title":"RetryByCountStrategy","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"text":" that limits the number of retry attempts.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"RetryByCountStrategy","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/DeferredTask":{"title":"DeferredTask","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/DeferredTask","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DeferredTask","kind":"identifier"}],"abstract":[{"type":"text","text":"A structure representing a deferred asynchronous unit of work."}],"navigatorTitle":[{"text":"DeferredTask","kind":"identifier"}],"url":"\/documentation\/afluent\/deferredtask"},"doc://Afluent/documentation/Afluent/Race(cancelAllOnWin:_:against:)":{"kind":"symbol","url":"\/documentation\/afluent\/race(cancelallonwin:_:against:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Race"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"cancelAllOnWin","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"against"},{"text":": (() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")...) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"title":"Race(cancelAllOnWin:_:against:)","type":"topic","abstract":[{"type":"text","text":"Executes two asynchronous tasks concurrently and returns the result of the first one that completes."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Race(cancelAllOnWin:_:against:)"},"doc://Afluent/documentation/Afluent/TimerSequence":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimerSequence"}],"type":"topic","title":"TimerSequence","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"TimerSequence","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TimerSequence","url":"\/documentation\/afluent\/timersequence","role":"symbol"},"doc://Afluent/documentation/Afluent/TopLevelEncoder":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TopLevelEncoder","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TopLevelEncoder","navigatorTitle":[{"text":"TopLevelEncoder","kind":"identifier"}],"url":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","role":"symbol"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"kind":"symbol","url":"\/documentation\/afluent\/backoffstrategy","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"type":"topic","title":"BackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","role":"symbol"},"doc://Afluent/documentation/Afluent/ClockDurationUnit":{"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/ClockDurationUnit","kind":"symbol","title":"ClockDurationUnit","navigatorTitle":[{"text":"ClockDurationUnit","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClockDurationUnit"}],"url":"\/documentation\/afluent\/clockdurationunit"},"doc://Afluent/documentation/Afluent/AnyCancellable":{"kind":"symbol","url":"\/documentation\/afluent\/anycancellable","navigatorTitle":[{"text":"AnyCancellable","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCancellable","kind":"identifier"}],"abstract":[{"text":"Stores an erased unit of work and provides a mechanism to cancel it","type":"text"}],"type":"topic","title":"AnyCancellable","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AnyCancellable","role":"symbol"},"doc://Afluent/documentation/Afluent/Just":{"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/Just","kind":"symbol","title":"Just","navigatorTitle":[{"text":"Just","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Just","kind":"identifier"}],"url":"\/documentation\/afluent\/just"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","url":"\/documentation\/afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","title":"Afluent","type":"topic","role":"collection"},"doc://Afluent/documentation/Afluent/TaskState":{"kind":"symbol","url":"\/documentation\/afluent\/taskstate","navigatorTitle":[{"text":"TaskState","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskState"}],"abstract":[],"type":"topic","title":"TaskState","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/TaskState","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkCache":{"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkCache","kind":"symbol","title":"AsynchronousUnitOfWorkCache","navigatorTitle":[{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsynchronousUnitOfWorkCache","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworkcache"},"doc://Afluent/documentation/Afluent/AsynchronousOperation":{"kind":"symbol","url":"\/documentation\/afluent\/asynchronousoperation","navigatorTitle":[{"text":"AsynchronousOperation","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousOperation","kind":"identifier"}],"abstract":[{"type":"text","text":"Reference to an operation that an operator would execute"}],"type":"topic","title":"AsynchronousOperation","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousOperation","role":"symbol"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","kind":"symbol","title":"AsynchronousUnitOfWorkSequence","navigatorTitle":[{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"url":"\/documentation\/afluent\/asynchronousunitofworksequence"}}}