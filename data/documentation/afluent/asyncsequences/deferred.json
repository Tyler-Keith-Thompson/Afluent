{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","interfaceLanguage":"swift"},"metadata":{"role":"symbol","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"roleHeading":"Structure","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"modules":[{"name":"Afluent"}],"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","extendedModule":"Afluent"},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"title":"Structures"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"title":"Type Aliases"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"title":"Default Implementations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/Sci"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"kind":"symbol","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"type":"text","text":" "},{"text":"Notably, ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By wrapping either of these in a "},{"code":"Deferred","type":"codeVoice"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}]},{"syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"type":"codeListing"}]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"type":"topic","kind":"symbol","title":"AsyncSequences.Deferred.AsyncIterator","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}],"navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","kind":"article","abstract":[],"role":"collectionGroup","title":"AsyncSequence Implementations","type":"topic"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","type":"topic","title":"Afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","role":"collection"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"role":"symbol","kind":"symbol","type":"topic","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"AsyncIterator","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","title":"makeAsyncIterator()"},"doc://Afluent/Sci":{"title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"role":"symbol","kind":"symbol","type":"topic","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"navigatorTitle":[{"text":"Element","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","title":"AsyncSequences.Deferred.Element"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"type":"topic","kind":"symbol","title":"AsyncSequences.Deferred","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","url":"\/documentation\/afluent\/asyncsequences\/deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"upstream","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":"))","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that will later be called at the time of iteration."}],"title":"init(upstream:)"}}}