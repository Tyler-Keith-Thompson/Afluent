{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"type":"conformsTo"}],"sections":[],"kind":"symbol","topicSections":[{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"]}],"metadata":{"roleHeading":"Structure","role":"symbol","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"extendedModule":"Afluent","title":"AsyncSequences.Deferred","modules":[{"name":"Afluent"}],"externalID":"s:7Afluent14AsyncSequencesO8DeferredV"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sci","text":"AsyncSequence","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By wrapping either of these in a "},{"type":"codeVoice","code":"Deferred"},{"text":", you can define the creation of an asynchronous sequence without executing it immediately.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}]},{"syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"type":"codeListing"}]}],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"references":{"doc://Afluent/documentation/Afluent":{"kind":"symbol","url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","abstract":[],"title":"Afluent","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","role":"collectionGroup","kind":"article","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","type":"topic","title":"AsyncSequence Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","role":"symbol","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"text":" ","type":"text"},{"type":"text","text":"that will later be called at the time of iteration."}],"kind":"symbol","title":"init(upstream:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"upstream"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"role":"symbol","abstract":[],"title":"AsyncSequences.Deferred.Element","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","navigatorTitle":[{"text":"Element","kind":"identifier"}]},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","abstract":[],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","title":"AsyncSequences.Deferred.AsyncIterator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"makeAsyncIterator"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Deferred","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"AsyncIterator","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV"}],"kind":"symbol","title":"makeAsyncIterator()","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"url":"\/documentation\/afluent\/asyncsequences\/deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"title":"AsyncSequences.Deferred","type":"topic"},"doc://Afluent/Sci":{"type":"unresolvable","title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"title":"AsyncSequences","url":"\/documentation\/afluent\/asyncsequences","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"}}}