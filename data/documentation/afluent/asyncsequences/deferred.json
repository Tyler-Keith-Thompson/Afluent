{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci","text":"AsyncSequence"}],"languages":["swift"]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" immediately execute their passed closure to start yielding and buffering values."},{"type":"text","text":" "},{"type":"text","text":"By wrapping either of these in a "},{"type":"codeVoice","code":"Deferred"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"inlineContent":[{"text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}],"kind":"content"}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"title":"Type Aliases"},{"title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"sections":[],"metadata":{"roleHeading":"Structure","extendedModule":"Afluent","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"externalID":"s:7Afluent14AsyncSequencesO8DeferredV","role":"symbol","modules":[{"name":"Afluent"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"symbolKind":"struct","title":"AsyncSequences.Deferred"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"]}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"navigatorTitle":[{"text":"Element","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","abstract":[],"title":"AsyncSequences.Deferred.Element","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Element"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"url":"\/documentation\/afluent\/asyncsequences\/deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"title":"AsyncSequences.Deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","type":"topic","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"url":"\/documentation\/afluent\/asyncsequences","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"kind":"symbol","title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncIterator","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","title":"AsyncSequences.Deferred.AsyncIterator","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","abstract":[],"role":"symbol","type":"topic","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"text":" ","type":"text"},{"type":"text","text":"that will later be called at the time of iteration."}],"kind":"symbol","title":"init(upstream:)"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeAsyncIterator","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","type":"topic","role":"symbol","abstract":[],"kind":"symbol","title":"makeAsyncIterator()"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","type":"topic","role":"collectionGroup"},"doc://Afluent/Sci":{"identifier":"doc:\/\/Afluent\/Sci","title":"_Concurrency.AsyncSequence","type":"unresolvable"}}}