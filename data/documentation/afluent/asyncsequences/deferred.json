{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"topicSections":[{"anchor":"Structures","generated":true,"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"anchor":"Initializers","generated":true,"title":"Initializers"},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"generated":true},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"generated":true,"title":"Type Aliases","anchor":"Type-Aliases"},{"generated":true,"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations"}],"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"type":"text","text":" "},{"text":"Notably, ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By wrapping either of these in a "},{"code":"Deferred","type":"codeVoice"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"text":" ","type":"text"},{"type":"text","text":"This can allow for a sequence to be created and iterated over multiple times."}]},{"syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"type":"codeListing"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"metadata":{"role":"symbol","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"title":"AsyncSequences.Deferred","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Afluent"}],"extendedModule":"Afluent"},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"kind":"relationships"}],"references":{"doc://Afluent/Sci":{"title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci","type":"unresolvable"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent":{"type":"topic","url":"\/documentation\/afluent","kind":"symbol","role":"collection","title":"Afluent","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","title":"makeAsyncIterator()","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAsyncIterator","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":">."},{"text":"AsyncIterator","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","kind":"typeIdentifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","title":"AsyncSequences.Deferred.Element","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","title":"init(upstream:)","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","abstract":[{"text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"upstream","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":"))","kind":"text"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","title":"AsyncSequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"type":"topic","role":"collectionGroup","abstract":[],"kind":"article","title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"title":"AsyncSequences.Deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","title":"AsyncSequences.Deferred.AsyncIterator","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncIterator","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"role":"symbol"}}}