{"topicSections":[{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"],"title":"Instance Methods"},{"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"generated":true,"title":"Default Implementations"}],"metadata":{"title":"AsyncSequences.Deferred","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"externalID":"s:7Afluent14AsyncSequencesO8DeferredV","extendedModule":"Afluent","role":"symbol","modules":[{"name":"Afluent"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"roleHeading":"Structure","remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35","fileName":"Deferred.swift"},"symbolKind":"struct"},"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Upstream"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"kind":"text","text":", "},{"text":"Upstream","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sci","text":"AsyncSequence"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"code":"AsyncStream","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"text":"By wrapping either of these in a ","type":"text"},{"type":"codeVoice","code":"Deferred"},{"text":", you can define the creation of an asynchronous sequence without executing it immediately.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}]},{"type":"codeListing","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"syntax":"swift"}],"kind":"content"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"title":"Conforms To","type":"conformsTo"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"sections":[],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","title":"AsyncSequences.Deferred.Element","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Element"}],"kind":"symbol","navigatorTitle":[{"text":"Element","kind":"identifier"}],"role":"symbol","abstract":[],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AsyncSequences","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asyncsequences","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","type":"topic","title":"AsyncSequences.Deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","abstract":[],"kind":"article"},"doc://Afluent/Sci":{"type":"unresolvable","title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"title":"init(upstream:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"upstream"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","kind":"symbol"},"doc://Afluent/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","type":"topic","kind":"symbol","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}],"title":"AsyncSequences.Deferred.AsyncIterator"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"type":"topic","abstract":[],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","kind":"symbol","title":"makeAsyncIterator()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":">."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator","kind":"typeIdentifier"}]},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","role":"collection","title":"Afluent","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"kind":"symbol"}}}