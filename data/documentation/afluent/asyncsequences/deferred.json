{"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"metadata":{"role":"symbol","extendedModule":"Afluent","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","modules":[{"name":"Afluent"}],"title":"AsyncSequences.Deferred","symbolKind":"struct","roleHeading":"Structure","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35","fileName":"Deferred.swift"},"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"title":"Default Implementations","generated":true}],"abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"kind":"relationships","title":"Conforms To"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sci","kind":"typeIdentifier","text":"AsyncSequence"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" immediately execute their passed closure to start yielding and buffering values."},{"text":" ","type":"text"},{"type":"text","text":"By wrapping either of these in a "},{"code":"Deferred","type":"codeVoice"},{"text":", you can define the creation of an asynchronous sequence without executing it immediately.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence.","type":"text"},{"text":" ","type":"text"},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}]},{"code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"type":"codeListing","syntax":"swift"}]}],"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"role":"symbol","title":"init(upstream:)","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"text":"that will later be called at the time of iteration.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"upstream","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","role":"symbol","kind":"symbol","title":"AsyncSequences.Deferred.AsyncIterator","type":"topic","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator"},"doc://Afluent/documentation/Afluent":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Afluent\/documentation\/Afluent","abstract":[],"title":"Afluent","url":"\/documentation\/afluent"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"role":"symbol","title":"makeAsyncIterator()","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","kind":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"makeAsyncIterator","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Deferred","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Upstream"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}]},"doc://Afluent/Sci":{"title":"_Concurrency.AsyncSequence","type":"unresolvable","identifier":"doc:\/\/Afluent\/Sci"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","kind":"article","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"title":"AsyncSequences.Deferred.Element","abstract":[],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"url":"\/documentation\/afluent\/asyncsequences\/deferred","abstract":[{"text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}]},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"}}}