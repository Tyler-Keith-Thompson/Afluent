{"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"kind":"symbol","topicSections":[{"title":"Structures","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"]},{"title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"sections":[],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"kind":"relationships","title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"text":"AsyncSequence","preciseIdentifier":"s:Sci","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution."},{"type":"text","text":" "},{"text":"Notably, ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AsyncThrowingStream"},{"type":"text","text":" immediately execute their passed closure to start yielding and buffering values."},{"type":"text","text":" "},{"text":"By wrapping either of these in a ","type":"text"},{"type":"codeVoice","code":"Deferred"},{"text":", you can define the creation of an asynchronous sequence without executing it immediately.","type":"text"}]},{"inlineContent":[{"text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence.","type":"text"},{"type":"text","text":" "},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}],"type":"paragraph"},{"code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"extendedModule":"Afluent","role":"symbol","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","modules":[{"name":"Afluent"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"roleHeading":"Structure","title":"AsyncSequences.Deferred"},"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"title":"init(upstream:)","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"kind":"text","text":": (() -> "},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":"))"}],"kind":"symbol","abstract":[{"text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}],"title":"AsyncSequences.Deferred.Element","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"role":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol","title":"AsyncSequences","role":"symbol","url":"\/documentation\/afluent\/asyncsequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","kind":"article","type":"topic","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"},"doc://Afluent/Sci":{"title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci","type":"unresolvable"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"title":"AsyncSequences.Deferred","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Deferred","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"title":"AsyncSequences.Deferred.AsyncIterator","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncIterator","kind":"identifier"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","abstract":[],"type":"topic","kind":"symbol"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","abstract":[],"title":"Afluent","type":"topic","role":"collection"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeAsyncIterator","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier","text":"AsyncSequences"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","text":"Deferred"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","abstract":[],"type":"topic","title":"makeAsyncIterator()"}}}