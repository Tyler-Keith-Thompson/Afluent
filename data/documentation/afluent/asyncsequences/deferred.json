{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"},{"text":", ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"AsyncSequence","preciseIdentifier":"s:Sci","kind":"typeIdentifier"}]}]},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By wrapping either of these in a "},{"code":"Deferred","type":"codeVoice"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"title":"Structures"},{"title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"],"title":"Type Aliases"},{"title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"generated":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"externalID":"s:7Afluent14AsyncSequencesO8DeferredV","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","symbolKind":"struct","modules":[{"name":"Afluent"}],"extendedModule":"Afluent"},"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"]}],"references":{"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"navigatorTitle":[{"kind":"identifier","text":"Element"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","title":"AsyncSequences.Deferred.Element","abstract":[],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Element"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"type":"topic","abstract":[],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"makeAsyncIterator","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO","text":"AsyncSequences"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV","kind":"typeIdentifier","text":"Deferred"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","title":"makeAsyncIterator()","kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":"))","kind":"text"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","type":"topic","kind":"symbol","role":"symbol","title":"init(upstream:)"},"doc://Afluent/Sci":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/Sci","title":"_Concurrency.AsyncSequence"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"type":"topic","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","title":"AsyncSequences.Deferred.AsyncIterator","navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"kind":"symbol"},"doc://Afluent/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","abstract":[],"type":"topic","title":"Afluent","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"title":"AsyncSequences","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequences"}],"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","url":"\/documentation\/afluent\/asyncsequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","type":"topic","title":"AsyncSequences.Deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"url":"\/documentation\/afluent\/asyncsequences\/deferred","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}]}}}