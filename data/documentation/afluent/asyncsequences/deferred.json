{"metadata":{"title":"AsyncSequences.Deferred","externalID":"s:7Afluent14AsyncSequencesO8DeferredV","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"modules":[{"name":"Afluent"}],"roleHeading":"Structure","symbolKind":"struct","role":"symbol","extendedModule":"Afluent","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L35"},"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}]},"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator"],"title":"Structures"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)"],"title":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()"]},{"title":"Type Aliases","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element"]},{"title":"Default Implementations","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/afluent\/asyncsequences\/deferred"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/Sci"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"sections":[],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"},{"kind":"text","text":"<"},{"text":"Upstream","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier","text":"Sendable"},{"kind":"text","text":", "},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"AsyncSequence","preciseIdentifier":"s:Sci"}]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Using this type allows for an asynchronous sequence to be created without eagerly beginning execution.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Notably, "},{"type":"codeVoice","code":"AsyncStream"},{"text":" and ","type":"text"},{"code":"AsyncThrowingStream","type":"codeVoice"},{"text":" immediately execute their passed closure to start yielding and buffering values.","type":"text"},{"type":"text","text":" "},{"text":"By wrapping either of these in a ","type":"text"},{"code":"Deferred","type":"codeVoice"},{"type":"text","text":", you can define the creation of an asynchronous sequence without executing it immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time iteration begins using this type, the passed closure is called to create a new asynchronous sequence."},{"type":"text","text":" "},{"text":"This can allow for a sequence to be created and iterated over multiple times.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let deferred = Deferred {","    AsyncStream { continuation in","        \/\/ yield some values asynchronously","    }","}","","for try await value in deferred {","    \/\/ starts at the first element","}","","for try await value in deferred {","    \/\/ starts at the first element","}"]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Afluent/Sci":{"type":"unresolvable","title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/Afluent\/Sci"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/Element":{"title":"AsyncSequences.Deferred.Element","navigatorTitle":[{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/element","role":"symbol","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/Element","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncIterator":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncIterator","role":"symbol","title":"AsyncSequences.Deferred.AsyncIterator","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncIterator"}],"navigatorTitle":[{"text":"AsyncIterator","kind":"identifier"}],"abstract":[],"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asynciterator","kind":"symbol"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","role":"collection","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","title":"Afluent","abstract":[]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"title":"init(upstream:)","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"type":"text","text":" "},{"type":"text","text":"that will later be called at the time of iteration."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"upstream","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}]},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","url":"\/documentation\/afluent\/asyncsequences\/deferred","kind":"symbol","title":"AsyncSequences.Deferred","navigatorTitle":[{"text":"Deferred","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Deferred"}],"abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"type":"topic"},"doc://Afluent/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/makeAsyncIterator()":{"title":"makeAsyncIterator()","type":"topic","url":"\/documentation\/afluent\/asyncsequences\/deferred\/makeasynciterator()","role":"symbol","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/makeAsyncIterator()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"makeAsyncIterator","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Deferred","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Upstream"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO8DeferredV0B8IteratorV","text":"AsyncIterator"}]},"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","role":"symbol","title":"AsyncSequences","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"kind":"symbol"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","title":"AsyncSequence Implementations","url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","kind":"article","abstract":[],"role":"collectionGroup"}}}