{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred"]]},"metadata":{"modules":[{"name":"Afluent"}],"symbolKind":"init","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"kind":"text","text":": (() -> "},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":"))"}],"role":"symbol","externalID":"s:7Afluent14AsyncSequencesO8DeferredV8upstreamAEy_xGxyYbc_tcfc","roleHeading":"Initializer","remoteSource":{"fileName":"Deferred.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/Deferred.swift#L43"},"title":"init(upstream:)"},"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"text":" ","type":"text"},{"text":"that will later be called at the time of iteration.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"upstream","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"kind":"text","text":"))"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"upstream","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that returns an asynchronous sequence that will be used later during iteration.","type":"text"}]}]}],"kind":"parameters"}],"references":{"doc://Afluent/documentation/Afluent":{"abstract":[],"title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol","url":"\/documentation\/afluent","type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences":{"title":"AsyncSequences","navigatorTitle":[{"text":"AsyncSequences","kind":"identifier"}],"url":"\/documentation\/afluent\/asyncsequences","kind":"symbol","abstract":[{"text":"A namespace for grouping related AsyncSequence operations.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSequences"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"navigatorTitle":[{"kind":"identifier","text":"Deferred"}],"title":"AsyncSequences.Deferred","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","role":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Deferred"}],"type":"topic"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/init(upstream:)":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/init(upstream:)","type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"))"}],"abstract":[{"type":"text","text":"Constructs an asynchronous sequence defining an closure that returns an asynchronous sequence"},{"text":" ","type":"text"},{"type":"text","text":"that will later be called at the time of iteration."}],"title":"init(upstream:)","url":"\/documentation\/afluent\/asyncsequences\/deferred\/init(upstream:)","kind":"symbol"}}}