{"identifier":{"url":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/retry(_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Retries the upstream ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":" up to a specified number of times.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"retries"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":" = 1) -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","text":"AsyncSequences","preciseIdentifier":"s:7Afluent14AsyncSequencesO","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","text":"Retry","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to retry the upstream, defaulting to 1.","type":"text"}]}],"name":"retries"}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" that emits the same output as the upstream but retries on failure up to the specified number of times.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"name":"Important","type":"aside","style":"important","content":[{"inlineContent":[{"type":"text","text":"Not every "},{"type":"codeVoice","code":"AsyncSequence"},{"text":" can be retried, for this to work the sequence has to implement an iterator that doesnâ€™t preserve state across various creations.","type":"text"}],"type":"paragraph"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AsyncThrowingStream"},{"text":" are notable sequences which cannot be retried on their own.","type":"text"}]}],"type":"aside","style":"note"}]}],"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations"]]},"metadata":{"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/SequenceOperators\/RetrySequence.swift#L173","fileName":"RetrySequence.swift"},"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC","text":"Retry"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"text":">","kind":"text"}],"title":"retry(_:)","externalID":"s:Sci7Afluents8SendableRzsAB7ElementRpzrlE5retryyAA14AsyncSequencesO5RetryCy_xAA0G15ByCountStrategyCGSuF::SYNTHESIZED::s:7Afluent14AsyncSequencesO8DeferredV","extendedModule":"_Concurrency","symbolKind":"method","roleHeading":"Instance Method","modules":[{"name":"Afluent","relatedModules":["_Concurrency"]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/AsyncSequences":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSequences"}],"abstract":[{"type":"text","text":"A namespace for grouping related AsyncSequence operations."}],"url":"\/documentation\/afluent\/asyncsequences","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AsyncSequences","kind":"identifier"}],"kind":"symbol","title":"AsyncSequences","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences"},"doc://Afluent/documentation/Afluent/AsyncSequences/Retry":{"abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Retry"}],"navigatorTitle":[{"kind":"identifier","text":"Retry"}],"url":"\/documentation\/afluent\/asyncsequences\/retry","kind":"symbol","title":"AsyncSequences.Retry","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Retry"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/retry(_:)":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"Retries the upstream ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" up to a specified number of times."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/retry(_:)","kind":"symbol","url":"\/documentation\/afluent\/asyncsequences\/deferred\/retry(_:)","role":"symbol","title":"retry(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"retry"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AsyncSequences","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO"},{"kind":"text","text":"."},{"text":"Retry","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent14AsyncSequencesO5RetryC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"},{"text":">","kind":"text"}]},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}],"title":"RetryByCountStrategy","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"RetryStrategy","type":"codeVoice"},{"type":"text","text":" that limits the number of retry attempts."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred/AsyncSequence-Implementations":{"url":"\/documentation\/afluent\/asyncsequences\/deferred\/asyncsequence-implementations","title":"AsyncSequence Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred\/AsyncSequence-Implementations","type":"topic","role":"collectionGroup"},"doc://Afluent/documentation/Afluent/AsyncSequences/Deferred":{"url":"\/documentation\/afluent\/asyncsequences\/deferred","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deferred","kind":"identifier"}],"title":"AsyncSequences.Deferred","abstract":[{"type":"text","text":"An asynchronous sequence that defers the execution of another asynchronous sequence until iteration."}],"kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsyncSequences\/Deferred","type":"topic","role":"symbol","navigatorTitle":[{"text":"Deferred","kind":"identifier"}]},"doc://Afluent/documentation/Afluent":{"type":"topic","abstract":[],"url":"\/documentation\/afluent","role":"collection","kind":"symbol","title":"Afluent","identifier":"doc:\/\/Afluent\/documentation\/Afluent"}}}