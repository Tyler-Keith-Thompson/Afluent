{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/afluent\/retrybybackoffstrategy"]}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","doc:\/\/Afluent\/s8SendableP","doc:\/\/Afluent\/ScA","doc:\/\/Afluent\/12_Concurrency8AnyActorP"],"kind":"relationships","title":"Conforms To"}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy"},"metadata":{"modules":[{"name":"Afluent"}],"externalID":"s:7Afluent22RetryByBackoffStrategyC","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"role":"symbol","remoteSource":{"fileName":"RetryByBackoffStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryByBackoffStrategy.swift#L33"},"roleHeading":"Class","symbolKind":"class","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"title":"RetryByBackoffStrategy"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)"]},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations"],"title":"Default Implementations","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"actor"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"},{"kind":"text","text":"<"},{"text":"Strategy","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Strategy","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"BackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","preciseIdentifier":"s:7Afluent15BackoffStrategyP"}]}]},{"parameters":[{"name":"C","content":[{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"type":"codeVoice","code":"Clock"},{"text":" used for measuring time between retries.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This actor manages retry attempts with a configurable ","type":"text"},{"type":"codeVoice","code":"BackoffStrategy"},{"text":" and clock. It uses the clock to calculate","type":"text"},{"type":"text","text":" "},{"text":"the time delays between retries, allowing more fine-grained control over the timing of retries based on the provided","type":"text"},{"type":"text","text":" "},{"type":"text","text":"backoff strategy."}]},{"content":[{"inlineContent":[{"text":"This actor conforms to ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"text":" and is used to manage retries based on time delays.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}]}],"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"kind":"symbol","references":{"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/Actor-Implementations":{"url":"\/documentation\/afluent\/retrybybackoffstrategy\/actor-implementations","abstract":[],"title":"Actor Implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/Actor-Implementations","kind":"article"},"doc://Afluent/documentation/Afluent":{"url":"\/documentation\/afluent","abstract":[],"type":"topic","title":"Afluent","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/RetryStrategy-Implementations":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/RetryStrategy-Implementations","kind":"article","title":"RetryStrategy Implementations","url":"\/documentation\/afluent\/retrybybackoffstrategy\/retrystrategy-implementations","role":"collectionGroup","abstract":[],"type":"topic"},"doc://Afluent/12_Concurrency8AnyActorP":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/12_Concurrency8AnyActorP","title":"_Concurrency.AnyActor"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/handle(error:beforeRetry:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handle"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"beforeRetry","kind":"externalParam"},{"text":": (any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/afluent\/retrybybackoffstrategy\/handle(error:beforeretry:)","abstract":[],"title":"handle(error:beforeRetry:)","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/handle(error:beforeRetry:)","kind":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy/init(_:clock:durationUnit:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Strategy","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"clock","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Strategy"},{"text":".","kind":"text"},{"text":"Clock","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa"},{"kind":"text","text":", "},{"text":"durationUnit","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent17ClockDurationUnita","text":"ClockDurationUnit"},{"text":"<","kind":"text"},{"text":"Strategy","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Clock","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent15BackoffStrategyP5ClockQa"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":">)"}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy\/init(_:clock:durationUnit:)","type":"topic","abstract":[{"type":"text","text":"Creates a new retry strategy with the given backoff strategy and clock."}],"kind":"symbol","title":"init(_:clock:durationUnit:)","url":"\/documentation\/afluent\/retrybybackoffstrategy\/init(_:clock:durationunit:)"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/ScA":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/ScA","title":"_Concurrency.Actor"},"doc://Afluent/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Afluent\/s8SendableP","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/BackoffStrategy":{"abstract":[{"type":"text","text":"A protocol for implementing custom backoff strategies in retry mechanisms."}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/BackoffStrategy","navigatorTitle":[{"text":"BackoffStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/backoffstrategy","title":"BackoffStrategy","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BackoffStrategy"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","kind":"symbol","title":"RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","role":"symbol","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"identifier"}],"abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}],"type":"topic"}}}