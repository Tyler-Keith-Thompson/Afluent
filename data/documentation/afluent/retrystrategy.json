{"metadata":{"symbolKind":"protocol","title":"RetryStrategy","modules":[{"name":"Afluent"}],"role":"symbol","roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"remoteSource":{"url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12","fileName":"RetryStrategy.swift"},"externalID":"s:7Afluent13RetryStrategyP"},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"schemaVersion":{"patch":0,"minor":3,"major":0},"relationshipsSections":[{"identifiers":["doc:\/\/Afluent\/s8SendableP"],"title":"Inherits From","type":"inheritsFrom","kind":"relationships"},{"kind":"relationships","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"title":"Conforming Types","type":"conformingTypes"}],"variants":[{"paths":["\/documentation\/afluent\/retrystrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"]},{"title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"]}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs."},{"type":"text","text":" "},{"type":"text","text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"text":" that limits the number of retry attempts.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"text":"RetryByCountStrategy","kind":"identifier"}],"url":"\/documentation\/afluent\/retrybycountstrategy","title":"RetryByCountStrategy","type":"topic"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"title":"handle(error:beforeRetry:)","type":"topic","required":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"handle","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"error"},{"text":": any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"beforeRetry","kind":"externalParam"},{"text":": (any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"backoff","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"text":"<","kind":"text"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"text":">) -> ","kind":"text"},{"text":"RetryByBackoffStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC"},{"text":"<","kind":"text"},{"text":"ExponentialBackoffStrategy","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ContinuousClock","preciseIdentifier":"s:12_Concurrency15ContinuousClockV","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"abstract":[{"type":"text","text":"Creates a retry strategy using the provided backoff strategy and a continuous clock."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","title":"backoff(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol"},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"url":"\/documentation\/afluent\/retrybybackoffstrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"A retry strategy using a specified backoff strategy and clock."}],"kind":"symbol","role":"symbol","title":"RetryByBackoffStrategy","type":"topic"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","type":"topic","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","kind":"symbol","title":"handle(error:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"kind":"text","text":": any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://Afluent/s8SendableP":{"identifier":"doc:\/\/Afluent\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"abstract":[{"text":"Creates a retry strategy that retries the operation up to a specified number of times.","type":"text"}],"title":"byCount(_:)","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)","url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"byCount","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Afluent20RetryByCountStrategyC","text":"RetryByCountStrategy","kind":"typeIdentifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByCountStrategy"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/afluent","abstract":[],"title":"Afluent"},"doc://Afluent/documentation/Afluent/RetryStrategy":{"role":"symbol","title":"RetryStrategy","url":"\/documentation\/afluent\/retrystrategy","abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"}],"navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}]}}}