{"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent"]]},"metadata":{"modules":[{"name":"Afluent"}],"role":"symbol","externalID":"s:7Afluent13RetryStrategyP","navigatorTitle":[{"text":"RetryStrategy","kind":"identifier"}],"title":"RetryStrategy","roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RetryStrategy"}],"remoteSource":{"fileName":"RetryStrategy.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/RetryStrategies\/RetryStrategy.swift#L12"},"symbolKind":"protocol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryStrategy"},{"text":" : ","kind":"text"},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"}]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"Conforming types must implement logic to determine if an operation should be retried after an error occurs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This protocol also allows executing any pre-retry logic, such as logging or cleanup, before attempting a retry."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy"},"abstract":[{"type":"text","text":"A strategy for handling errors and determining whether to retry an operation."}],"topicSections":[{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)"],"title":"Instance Methods"},{"title":"Type Methods","identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)","doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)"]}],"kind":"symbol","relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Afluent\/s8SendableP"],"type":"inheritsFrom","kind":"relationships"},{"identifiers":["doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/afluent\/retrystrategy"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Afluent/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Afluent\/s8SendableP"},"doc://Afluent/documentation/Afluent/RetryByCountStrategy":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"RetryStrategy"},{"type":"text","text":" that limits the number of retry attempts."}],"title":"RetryByCountStrategy","type":"topic","role":"symbol","url":"\/documentation\/afluent\/retrybycountstrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByCountStrategy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByCountStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"RetryByCountStrategy"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:beforeRetry:)":{"kind":"symbol","title":"handle(error:beforeRetry:)","abstract":[{"text":"Determines whether an operation should be retried after encountering an error.","type":"text"}],"required":true,"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:beforeRetry:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"error"},{"kind":"text","text":": any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"text":"beforeRetry","kind":"externalParam"},{"text":": (any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","url":"\/documentation\/afluent\/retrystrategy\/handle(error:beforeretry:)","role":"symbol"},"doc://Afluent/documentation/Afluent/RetryStrategy/handle(error:)":{"url":"\/documentation\/afluent\/retrystrategy\/handle(error:)","role":"symbol","kind":"symbol","title":"handle(error:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handle"},{"kind":"text","text":"("},{"text":"error","kind":"externalParam"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","abstract":[{"type":"text","text":"Determines whether an operation should be retried after encountering an error."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/handle(error:)"},"doc://Afluent/documentation/Afluent/RetryStrategy/byCount(_:)":{"abstract":[{"type":"text","text":"Creates a retry strategy that retries the operation up to a specified number of times."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RetryByCountStrategy"},{"type":"text","text":"."}]},"title":"byCount(_:)","type":"topic","role":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/byCount(_:)","kind":"symbol","url":"\/documentation\/afluent\/retrystrategy\/bycount(_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"byCount"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"RetryByCountStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent20RetryByCountStrategyC"}]},"doc://Afluent/documentation/Afluent/RetryByBackoffStrategy":{"title":"RetryByBackoffStrategy","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryByBackoffStrategy","url":"\/documentation\/afluent\/retrybybackoffstrategy","navigatorTitle":[{"text":"RetryByBackoffStrategy","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RetryByBackoffStrategy"}],"role":"symbol","type":"topic","abstract":[{"text":"A retry strategy using a specified backoff strategy and clock.","type":"text"}]},"doc://Afluent/documentation/Afluent/RetryStrategy":{"abstract":[{"text":"A strategy for handling errors and determining whether to retry an operation.","type":"text"}],"title":"RetryStrategy","type":"topic","role":"symbol","url":"\/documentation\/afluent\/retrystrategy","kind":"symbol","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RetryStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RetryStrategy"}]},"doc://Afluent/documentation/Afluent/RetryStrategy/backoff(_:)":{"url":"\/documentation\/afluent\/retrystrategy\/backoff(_:)","role":"symbol","kind":"symbol","title":"backoff(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"backoff","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC","text":"ExponentialBackoffStrategy"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12_Concurrency15ContinuousClockV","text":"ContinuousClock","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7Afluent22RetryByBackoffStrategyC","kind":"typeIdentifier","text":"RetryByBackoffStrategy"},{"text":"<","kind":"text"},{"text":"ExponentialBackoffStrategy","kind":"typeIdentifier","preciseIdentifier":"s:7Afluent26ExponentialBackoffStrategyC"},{"kind":"text","text":"<"},{"text":"ContinuousClock","kind":"typeIdentifier","preciseIdentifier":"s:12_Concurrency15ContinuousClockV"},{"text":">>","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RetryByBackoffStrategy<ExponentialBackoffStrategy<ContinuousClock>>"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","abstract":[{"type":"text","text":"Creates a retry strategy using the provided backoff strategy and a continuous clock."}],"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/RetryStrategy\/backoff(_:)"},"doc://Afluent/documentation/Afluent":{"type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/Afluent\/documentation\/Afluent","role":"collection","title":"Afluent","url":"\/documentation\/afluent"}}}