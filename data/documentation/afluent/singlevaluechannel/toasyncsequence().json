{"abstract":[{"text":"Converts the asynchronous unit of work into an ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":".","type":"text"}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncSequence"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"extendedModule":"Afluent","externalID":"s:7Afluent22AsynchronousUnitOfWorkPAAE15toAsyncSequenceAA0bcdeH0VyxGyF::SYNTHESIZED::s:7Afluent18SingleValueChannelC","title":"toAsyncSequence()","role":"symbol","remoteSource":{"fileName":"ToAsyncSequence.swift","url":"https:\/\/github.com\/Tyler-Keith-Thompson\/Afluent\/blob\/main\/Sources\/Afluent\/Workers\/ToAsyncSequence.swift#L64"},"symbolKind":"method","roleHeading":"Instance Method","modules":[{"name":"Afluent"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"toAsyncSequence","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence","preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"AsynchronousUnitOfWorkSequence"},{"type":"text","text":" that represents the operation of the "},{"type":"codeVoice","code":"AsynchronousUnitOfWork"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method transforms the result of an "},{"code":"AsynchronousUnitOfWork","type":"codeVoice"},{"text":" into an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":". Itâ€™s useful for integrating the single-value asynchronous operation into APIs that work with sequences, or for using async\/await in a more sequential, iterative manner."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting sequence emits a single value if the operation succeeds, or throws an error if the operation fails. After emitting its single value or error, the sequence completes."}]}]}],"variants":[{"paths":["\/documentation\/afluent\/singlevaluechannel\/toasyncsequence()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/toAsyncSequence()"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Afluent\/documentation\/Afluent","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations"]]},"references":{"doc://Afluent/documentation/Afluent":{"identifier":"doc:\/\/Afluent\/documentation\/Afluent","kind":"symbol","role":"collection","url":"\/documentation\/afluent","abstract":[],"type":"topic","title":"Afluent"},"doc://Afluent/documentation/Afluent/SingleValueChannel":{"title":"SingleValueChannel","url":"\/documentation\/afluent\/singlevaluechannel","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel","type":"topic","abstract":[{"type":"text","text":"A channel that emits a single value or an error."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"SingleValueChannel","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"SingleValueChannel","kind":"identifier"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel/AsynchronousUnitOfWork-Implementations":{"title":"AsynchronousUnitOfWork Implementations","url":"\/documentation\/afluent\/singlevaluechannel\/asynchronousunitofwork-implementations","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/AsynchronousUnitOfWork-Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article"},"doc://Afluent/documentation/Afluent/AsynchronousUnitOfWorkSequence":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsynchronousUnitOfWorkSequence","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/afluent\/asynchronousunitofworksequence","abstract":[{"type":"text","text":"A sequence that represents a single execution of an asynchronous unit of work."}],"role":"symbol","title":"AsynchronousUnitOfWorkSequence","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/AsynchronousUnitOfWorkSequence","navigatorTitle":[{"kind":"identifier","text":"AsynchronousUnitOfWorkSequence"}]},"doc://Afluent/documentation/Afluent/SingleValueChannel/toAsyncSequence()":{"kind":"symbol","abstract":[{"type":"text","text":"Converts the asynchronous unit of work into an "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"toAsyncSequence"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Afluent30AsynchronousUnitOfWorkSequenceV","kind":"typeIdentifier","text":"AsynchronousUnitOfWorkSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","title":"toAsyncSequence()","identifier":"doc:\/\/Afluent\/documentation\/Afluent\/SingleValueChannel\/toAsyncSequence()","url":"\/documentation\/afluent\/singlevaluechannel\/toasyncsequence()","type":"topic"}}}