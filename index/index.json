{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/==(_:_:)","title":"static func == (AnyCancellable, AnyCancellable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/store(in:)-1mwgh","title":"func store(in: inout some RangeReplaceableCollection<AnyCancellable>)","type":"method"},{"path":"\/documentation\/afluent\/anycancellable\/store(in:)-7fl3","title":"func store(in: inout Set<AnyCancellable>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/anycancellable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/anycancellable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/anycancellable","title":"AnyCancellable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousoperation\/init(operation:)","title":"init(operation: () async throws -> Success)","type":"init"}],"path":"\/documentation\/afluent\/asynchronousoperation","title":"AsynchronousOperation","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/init()","title":"init()","type":"init"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/cacheuntilcompletionorcancellation","title":"case cacheUntilCompletionOrCancellation","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy","title":"AsynchronousUnitOfWorkCache.Strategy","type":"enum"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache","title":"AsynchronousUnitOfWorkCache","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/init(operation:)","title":"init(operation: () async throws -> Success)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/result","title":"var result: Result<Self.Success, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/execute()","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-5wx8c","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-60nyn","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-15f1f","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-90rje","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/maperror(_:)","title":"func mapError((Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/maperror(_:_:)","title":"func mapError<E>(E, (Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/run()","title":"func run()","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/subscribe()","title":"func subscribe() -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/timeout(_:customerror:)","title":"func timeout(Measurement<UnitDuration>, customError: Error?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, Error>","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: () -> Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send()","title":"func send() throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send(_:)","title":"func send(Success) throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/send(error:)","title":"func send(error: Error) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/alreadycompleted","title":"case alreadyCompleted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluechannel\/channelerror","title":"SingleValueChannel.ChannelError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/result","title":"var result: Result<Self.Success, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/execute()","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/flatmap(_:)-5ez8t","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/flatmap(_:)-uqak","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/map(_:)-1z2ew","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/map(_:)-496pn","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/maperror(_:)","title":"func mapError((Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/maperror(_:_:)","title":"func mapError<E>(E, (Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/run()","title":"func run()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/subscribe()","title":"func subscribe() -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/timeout(_:customerror:)","title":"func timeout(Measurement<UnitDuration>, customError: Error?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, Error>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: () -> Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluechannel\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/singlevaluechannel\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluechannel","title":"SingleValueChannel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send()","title":"func send() throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send(_:)","title":"func send(Success) throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/send(error:)","title":"func send(error: Error) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/alreadycompleted","title":"case alreadyCompleted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluesubject\/subjecterror","title":"SingleValueSubject.SubjectError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/result","title":"var result: Result<Self.Success, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/singlevaluesubject\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/execute()","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/flatmap(_:)-6lgwd","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/flatmap(_:)-ho0z","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/map(_:)-6wv7y","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/map(_:)-7r7t","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/maperror(_:)","title":"func mapError((Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/maperror(_:_:)","title":"func mapError<E>(E, (Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/run()","title":"func run()","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/subscribe()","title":"func subscribe() -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/timeout(_:customerror:)","title":"func timeout(Measurement<UnitDuration>, customError: Error?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, Error>","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: () -> Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/singlevaluesubject\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/singlevaluesubject\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/singlevaluesubject","title":"SingleValueSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/taskstate\/init()","title":"init()","type":"init"}],"path":"\/documentation\/afluent\/taskstate","title":"TaskState","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/success","title":"Success","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/result-3gy7m","title":"var result: Result<Self.Success, Error>","type":"property"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/result-7fjzu","title":"var result: Result<Self.Success, Error>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/state","title":"var state: TaskState<Self.Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()-76n0u","title":"func cancel()","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()-7rfl","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute()-50h6","title":"func execute() async throws -> Self.Success","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute()-16c12","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-4z8wr","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-5r25z","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-346hb","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-56k56","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/maperror(_:)","title":"func mapError((Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/maperror(_:_:)","title":"func mapError<E>(E, (Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/run()-810a7","title":"func run()","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/run()-99pd2","title":"func run()","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/subscribe()","title":"func subscribe() -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/timeout(_:customerror:)","title":"func timeout(Measurement<UnitDuration>, customError: Error?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, Error>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: () -> Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/input","title":"Input","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Self.Input) throws -> T","type":"method"}],"path":"\/documentation\/afluent\/topleveldecoder","title":"TopLevelDecoder","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/encode(_:)","title":"func encode<T>(T) throws -> Self.Output","type":"method"}],"path":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/init(_:)","title":"init(AsynchronousUnitOfWork<Success>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/result","title":"var result: Result<Self.Success, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/breakpoint(receiveoutput:receiveerror:)","title":"func breakpoint(receiveOutput: ((Self.Success) async throws -> Bool)?, receiveError: ((Error) async throws -> Bool)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/breakpointonerror()","title":"func breakpointOnError() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/dematerialize()","title":"func dematerialize<T>() -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/erasetoanyunitofwork()","title":"func eraseToAnyUnitOfWork() -> AnyAsynchronousUnitOfWork<Self.Success>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/execute()","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/flatmap(_:)-59de","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/flatmap(_:)-lran","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/map(_:)-6cm1r","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/map(_:)-7mg6e","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/maperror(_:)","title":"func mapError((Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/maperror(_:_:)","title":"func mapError<E>(E, (Error) -> Error) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/materialize()","title":"func materialize() -> some AsynchronousUnitOfWork<Result<Self.Success, Error>>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retain()","title":"func retain() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/run()","title":"func run()","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/subscribe()","title":"func subscribe() -> AnyCancellable","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/timeout(_:customerror:)","title":"func timeout(Measurement<UnitDuration>, customError: Error?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/toasyncsequence()","title":"func toAsyncSequence() -> AsynchronousUnitOfWorkSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/tostream()","title":"func toStream() -> AsyncThrowingStream<Self.Success, Error>","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/unwrap(orthrow:)","title":"func unwrap<T>(orThrow: () -> Error) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Self.Success) -> Out) -> some AsynchronousUnitOfWork<Out>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/anyasynchronousunitofwork\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/anyasynchronousunitofwork","title":"AnyAsynchronousUnitOfWork","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator\/next()","title":"func next() async throws -> UnitOfWork.Success?","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asynciterator","title":"AsynchronousUnitOfWorkSequence.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsynchronousUnitOfWorkSequence<UnitOfWork>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/element","title":"AsynchronousUnitOfWorkSequence.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/compactmap(_:)-34v2z","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/compactmap(_:)-5kp88","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(_:)-8ceb8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(_:)-9kxl1","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/map(_:)-4z79u","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/map(_:)-91jvf","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/compactmap(_:)-34v2z","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/compactmap(_:)-5kp88","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(_:)-8ceb8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/flatmap(_:)-9kxl1","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/map(_:)-4z79u","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/map(_:)-91jvf","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworksequence","title":"AsynchronousUnitOfWorkSequence","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/auowcache","title":"AUOWCache","type":"typealias"},{"path":"\/documentation\/afluent\/anyasyncsequence","title":"AnyAsyncSequence","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Retry<Upstream>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/element","title":"AsyncSequences.Retry.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-3ymcj","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-479gi","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-86cgj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-8nweb","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-1ut05","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-7cx8","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-3ymcj","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/compactmap(_:)-479gi","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-86cgj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/flatmap(_:)-8nweb","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-1ut05","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/map(_:)-7cx8","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retry\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retry\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retry","title":"AsyncSequences.Retry","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryAfterFlatMapping<Upstream, Downstream>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/element","title":"AsyncSequences.RetryAfterFlatMapping.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-1c4pa","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-89l2h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-4m7nf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6w456","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-23lae","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-9uds6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-1c4pa","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/compactmap(_:)-89l2h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-4m7nf","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/flatmap(_:)-6w456","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-23lae","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/map(_:)-9uds6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryafterflatmapping","title":"AsyncSequences.RetryAfterFlatMapping","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOn<Upstream, Failure>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/element","title":"AsyncSequences.RetryOn.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/compactmap(_:)-3qkjr","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/compactmap(_:)-93nbd","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(_:)-6huim","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(_:)-9tgbu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/map(_:)-3zxl6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/map(_:)-5q3ff","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/compactmap(_:)-3qkjr","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/compactmap(_:)-93nbd","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(_:)-6huim","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/flatmap(_:)-9tgbu","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/map(_:)-3zxl6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/map(_:)-5q3ff","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryon\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryon","title":"AsyncSequences.RetryOn","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.RetryOnAfterFlatMapping<Upstream, Failure, Downstream>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/next()","title":"func next() async throws -> Upstream.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/element","title":"AsyncSequences.RetryOnAfterFlatMapping.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/compactmap(_:)-337o1","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/compactmap(_:)-7b7yt","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(_:)-13y9g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(_:)-50rg3","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/map(_:)-6otry","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/map(_:)-84bg5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/compactmap(_:)-337o1","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/compactmap(_:)-7b7yt","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(_:)-13y9g","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/flatmap(_:)-50rg3","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/map(_:)-6otry","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/map(_:)-84bg5","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/retryonafterflatmapping","title":"AsyncSequences.RetryOnAfterFlatMapping","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator\/next()","title":"func next() async throws -> Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasynciterator","title":"AsyncSequences.AnyAsyncIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/init(erasing:)","title":"init<S>(erasing: S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.AnyAsyncIterator<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-4rcyu","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-72i2y","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-5f9jj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-fts7","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-4d12i","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-7i4mq","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-4rcyu","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/compactmap(_:)-72i2y","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-5f9jj","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/flatmap(_:)-fts7","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-4d12i","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/map(_:)-7i4mq","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/anyasyncsequence","title":"AsyncSequences.AnyAsyncSequence","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.Catch<Upstream, Downstream>.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asynciterator","title":"AsyncSequences.Catch.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.Catch<Upstream, Downstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/element","title":"AsyncSequences.Catch.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/compactmap(_:)-8h2fm","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/compactmap(_:)-9hjxd","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(_:)-8am7a","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(_:)-xutp","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/map(_:)-4wxqk","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/map(_:)-6k3x1","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/compactmap(_:)-8h2fm","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/compactmap(_:)-9hjxd","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(_:)-8am7a","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/flatmap(_:)-xutp","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/map(_:)-4wxqk","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/map(_:)-6k3x1","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/catch\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/catch\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/catch","title":"AsyncSequences.Catch","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator\/next()","title":"func next() async throws -> AsyncSequences.HandleEvents<Upstream>.Element?","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asynciterator","title":"AsyncSequences.HandleEvents.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncSequences.HandleEvents<Upstream>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/element","title":"AsyncSequences.HandleEvents.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-7gqp1","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-951fk","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-1zex8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-3b83y","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-1tre6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-47m9a","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-7gqp1","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/compactmap(_:)-951fk","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-1zex8","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/flatmap(_:)-3b83y","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-1tre6","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/map(_:)-47m9a","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asyncsequences\/handleevents","title":"AsyncSequences.HandleEvents","type":"struct"}],"path":"\/documentation\/afluent\/asyncsequences","title":"AsyncSequences","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/failedretaining","title":"case failedRetaining","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/unretainederror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/unretainederror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/afluent\/unretainederror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/unretainederror","title":"UnretainedError","type":"enum"},{"path":"\/documentation\/afluent\/workers","title":"Workers","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"},{"path":"\/documentation\/afluent\/foundation\/jsonencoder","title":"JSONEncoder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/urlsession\/deferreddatatask(for:)","title":"func deferredDataTask(for: URLRequest) -> some AsynchronousUnitOfWork<(data: Data, response: URLResponse)>\n","type":"method"},{"path":"\/documentation\/afluent\/foundation\/urlsession\/deferreddatatask(from:)","title":"func deferredDataTask(from: URL) -> some AsynchronousUnitOfWork<(data: Data, response: URLResponse)>\n","type":"method"}],"path":"\/documentation\/afluent\/foundation\/urlsession","title":"URLSession","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/measurement\/hours(_:)","title":"static func hours(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/microseconds(_:)","title":"static func microseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/milliseconds(_:)","title":"static func milliseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/minutes(_:)","title":"static func minutes(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/nanoseconds(_:)","title":"static func nanoseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/picoseconds(_:)","title":"static func picoseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/seconds(_:)","title":"static func seconds(Double) -> Measurement<UnitDuration>","type":"method"}],"path":"\/documentation\/afluent\/foundation\/measurement","title":"Measurement","type":"extension"}],"path":"\/documentation\/afluent\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/catch(_:_:)","title":"func `catch`<D, E>(E, (E) async -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AsyncSequences.AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/handleevents(receiveoutput:receiveerror:receivecomplete:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Element) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveComplete: (() async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> AsyncSequences.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:)","title":"func retry(UInt) -> AsyncSequences.Retry<Self>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> AsyncSequences.RetryAfterFlatMapping<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> AsyncSequences.RetryOn<Self, E>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (E) async throws -> D) -> AsyncSequences.RetryOnAfterFlatMapping<Self, E, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"},{"path":"\/documentation\/afluent\/_concurrency\/asyncsequence\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (E) async throws -> D) -> AsyncSequences.Catch<Self, D>","type":"method"}],"path":"\/documentation\/afluent\/_concurrency\/asyncsequence","title":"AsyncSequence","type":"extension"}],"path":"\/documentation\/afluent\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/afluent","title":"Afluent","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}