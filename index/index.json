{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/init()","title":"init()","type":"init"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/cacheuntilcompletionorcancellation","title":"case cacheUntilCompletionOrCancellation","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache\/strategy","title":"AsynchronousUnitOfWorkCache.Strategy","type":"enum"}],"path":"\/documentation\/afluent\/asynchronousunitofworkcache","title":"AsynchronousUnitOfWorkCache","type":"class"},{"path":"\/documentation\/afluent\/taskstate","title":"TaskState","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/success","title":"Success","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/result-3gy7m","title":"var result: Result<Self.Success, Error>","type":"property"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/result-7fjzu","title":"var result: Result<Self.Success, Error>","type":"property"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/state","title":"var state: TaskState<Self.Success>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()-76n0u","title":"func cancel()","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/cancel()-7rfl","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/catch(_:_:)","title":"func `catch`<D, E>(E, (Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute()-50h6","title":"func execute() async throws -> Self.Success","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/execute()-16c12","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-4z8wr","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/flatmap(_:)-5r25z","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-346hb","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/map(_:)-56k56","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"children":[{"children":[{"path":"\/documentation\/afluent\/asynchronousunitofwork\/run()-8x0kb","title":"func run() throws","type":"method"}],"title":"AsynchronousUnitOfWork Implementations","type":"groupMarker"}],"path":"\/documentation\/afluent\/asynchronousunitofwork\/run()-9u0k5","title":"func run() throws","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/timeout(_:)","title":"func timeout(Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/asynchronousunitofwork\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/asynchronousunitofwork","title":"AsynchronousUnitOfWork","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/input","title":"Input","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/topleveldecoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Self.Input) throws -> T","type":"method"}],"path":"\/documentation\/afluent\/topleveldecoder","title":"TopLevelDecoder","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/toplevelencoder\/encode(_:)","title":"func encode<T>(T) throws -> Self.Output","type":"method"}],"path":"\/documentation\/afluent\/toplevelencoder","title":"TopLevelEncoder","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/init(operation:)","title":"init(operation: () async throws -> Success)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/state","title":"let state: TaskState<Success>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/result","title":"var result: Result<Self.Success, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/deferredtask\/assertnofailure()","title":"func assertNoFailure() -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Success>, on: Root) async throws","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:)","title":"func `catch`<D>((Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/catch(_:_:)","title":"func `catch`<D, E>(E, (Error) async -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/decode(type:decoder:)","title":"func decode<T, D>(type: T.Type, decoder: D) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/delay(for:)","title":"func delay(for: Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/discardoutput()","title":"func discardOutput() -> some AsynchronousUnitOfWork<()>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/encode(encoder:)","title":"func encode<E>(encoder: E) -> some AsynchronousUnitOfWork<E.Output>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/execute()","title":"func execute() async throws -> Self.Success","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-5wx7t","title":"func flatMap<D>(() async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/flatmap(_:)-60nyy","title":"func flatMap<D>((Self.Success) async throws -> D) -> some AsynchronousUnitOfWork<D.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/handleevents(receiveoutput:receiveerror:receivecancel:)","title":"func handleEvents(receiveOutput: ((Self.Success) async throws -> Void)?, receiveError: ((Error) async throws -> Void)?, receiveCancel: (() async throws -> Void)?) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-15f1y","title":"func map<S>((Self.Success) async -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/map(_:)-90rjz","title":"func map<T>(KeyPath<Self.Success, T>) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/print(_:)","title":"func print(String) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replaceerror(with:)","title":"func replaceError(with: Self.Success) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/replacenil(with:)","title":"func replaceNil<S>(with: S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:)","title":"func retry(UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:_:)","title":"func retry<D>(UInt, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:)","title":"func retry<E>(UInt, on: E) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/retry(_:on:_:)","title":"func retry<D, E>(UInt, on: E, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/run()","title":"func run() throws","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/share()","title":"func share() -> some AsynchronousUnitOfWork<Self.Success> & AnyActor","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:fileid:function:line:column:)","title":"func shareFromCache(AUOWCache, strategy: AUOWCache.Strategy, fileId: String, function: String, line: UInt, column: UInt) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:)","title":"func shareFromCache<H0>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:)","title":"func shareFromCache<H0, H1>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:)","title":"func shareFromCache<H0, H1, H2>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/sharefromcache(_:strategy:keys:_:_:_:_:_:_:_:_:_:)","title":"func shareFromCache<H0, H1, H2, H3, H4, H5, H6, H7, H8, H9>(AUOWCache, strategy: AUOWCache.Strategy, keys: H0, H1, H2, H3, H4, H5, H6, H7, H8, H9) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/timeout(_:)","title":"func timeout(Measurement<UnitDuration>) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:)","title":"func tryCatch<D>((Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trycatch(_:_:)","title":"func tryCatch<D, E>(E, (Error) async throws -> D) -> some AsynchronousUnitOfWork<Self.Success>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/trymap(_:)","title":"func tryMap<S>((Self.Success) async throws -> S) -> some AsynchronousUnitOfWork<S>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:)","title":"func zip<D>(D) -> some AsynchronousUnitOfWork<(Self.Success, D.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:)","title":"func zip<D0, D1>(D0, D1) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:)","title":"func zip<D0, D1, D2>(D0, D1, D2) -> some AsynchronousUnitOfWork<(Self.Success, D0.Success, D1.Success, D2.Success)>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:_:transform:)","title":"func zip<D0, D1, D2, T>(D0, D1, D2, transform: ((Self.Success, D0.Success, D1.Success, D2.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:_:transform:)","title":"func zip<D0, D1, T>(D0, D1, transform: ((Self.Success, D0.Success, D1.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"},{"path":"\/documentation\/afluent\/deferredtask\/zip(_:transform:)","title":"func zip<D, T>(D, transform: ((Self.Success, D.Success)) async throws -> T) -> some AsynchronousUnitOfWork<T>\n","type":"method"}],"path":"\/documentation\/afluent\/deferredtask\/asynchronousunitofwork-implementations","title":"AsynchronousUnitOfWork Implementations","type":"symbol"}],"path":"\/documentation\/afluent\/deferredtask","title":"DeferredTask","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/afluent\/auowcache","title":"AUOWCache","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"path":"\/documentation\/afluent\/workers","title":"Workers","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"},{"path":"\/documentation\/afluent\/foundation\/jsonencoder","title":"JSONEncoder","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/afluent\/foundation\/measurement\/hours(_:)","title":"static func hours(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/microseconds(_:)","title":"static func microseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/milliseconds(_:)","title":"static func milliseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/minutes(_:)","title":"static func minutes(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/nanoseconds(_:)","title":"static func nanoseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/picoseconds(_:)","title":"static func picoseconds(Double) -> Measurement<UnitDuration>","type":"method"},{"path":"\/documentation\/afluent\/foundation\/measurement\/seconds(_:)","title":"static func seconds(Double) -> Measurement<UnitDuration>","type":"method"}],"path":"\/documentation\/afluent\/foundation\/measurement","title":"Measurement","type":"extension"}],"path":"\/documentation\/afluent\/foundation","title":"Foundation","type":"extension"}],"path":"\/documentation\/afluent","title":"Afluent","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}